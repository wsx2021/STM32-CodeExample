
UART_HyperTerminal_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000008  0800461c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000017c  2000009c  080046b0  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000218  080046b0  00020218  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000e69a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0000fa74  00000000  00000000  0002e766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000021d8  00000000  00000000  0003e1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f20  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000d3c60  00000000  00000000  000412d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00114f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020eaf  00000000  00000000  00115da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00136c4f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e64  00000000  00000000  00136ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000009c 	.word	0x2000009c
 8000158:	00000000 	.word	0x00000000
 800015c:	080044f8 	.word	0x080044f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a0 	.word	0x200000a0
 8000178:	080044f8 	.word	0x080044f8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000480:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000482:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000484:	3304      	adds	r3, #4

08000486 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000486:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000488:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800048a:	d3f9      	bcc.n	8000480 <CopyDataInit>
  bx lr
 800048c:	4770      	bx	lr

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800048e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000490:	3004      	adds	r0, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000492:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>
  bx lr
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f000 fb1a 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <LoopForever+0x8>)
 80004a2:	490c      	ldr	r1, [pc, #48]	; (80004d4 <LoopForever+0xc>)
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <LoopForever+0x10>)
 80004a6:	2300      	movs	r3, #0
 80004a8:	f7ff ffed 	bl	8000486 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004ac:	480b      	ldr	r0, [pc, #44]	; (80004dc <LoopForever+0x14>)
 80004ae:	490c      	ldr	r1, [pc, #48]	; (80004e0 <LoopForever+0x18>)
 80004b0:	2300      	movs	r3, #0
 80004b2:	f7ff ffee 	bl	8000492 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <LoopForever+0x1c>)
 80004b8:	490b      	ldr	r1, [pc, #44]	; (80004e8 <LoopForever+0x20>)
 80004ba:	2300      	movs	r3, #0
 80004bc:	f7ff ffe9 	bl	8000492 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c0:	f003 ffee 	bl	80044a0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80004c4:	f000 f846 	bl	8000554 <main>

080004c8 <LoopForever>:

LoopForever:
  b LoopForever
 80004c8:	e7fe      	b.n	80004c8 <LoopForever>
 80004ca:	0000      	.short	0x0000
  ldr   r0, =_estack
 80004cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004d0:	20000008 	.word	0x20000008
 80004d4:	2000009c 	.word	0x2000009c
 80004d8:	0800461c 	.word	0x0800461c
  INIT_BSS _sbss, _ebss
 80004dc:	2000009c 	.word	0x2000009c
 80004e0:	20000218 	.word	0x20000218
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80004e4:	20030000 	.word	0x20030000
 80004e8:	20030000 	.word	0x20030000

080004ec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_IRQHandler>

080004ee <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b085      	sub	sp, #20
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4313      	orrs	r3, r2
 8000504:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4013      	ands	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fb12 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f856 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f91e 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000564:	f000 f902 	bl	800076c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000568:	f000 f8b2 	bl	80006d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Configure LED2 and LED3 */
  BSP_LED_Init(LED2);
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fa5d 	bl	8000a2c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000572:	2002      	movs	r0, #2
 8000574:	f000 fa5a 	bl	8000a2c <BSP_LED_Init>

  /*##-1- Start the transmission process #####################################*/
  /* User start transmission data through "TxBuffer" buffer */
  if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)aTxStartMessage, TXSTARTMESSAGESIZE)!= HAL_OK)
 8000578:	2261      	movs	r2, #97	; 0x61
 800057a:	4920      	ldr	r1, [pc, #128]	; (80005fc <main+0xa8>)
 800057c:	4820      	ldr	r0, [pc, #128]	; (8000600 <main+0xac>)
 800057e:	f002 fb83 	bl	8002c88 <HAL_UART_Transmit_DMA>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <main+0x38>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 8000588:	f000 f930 	bl	80007ec <Error_Handler>
  }

  /*##-2- Put UART peripheral in reception process ###########################*/
  /* Any data received will be stored in "aRxBuffer" buffer : the number max of
     data received is 10 */
  if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 800058c:	220a      	movs	r2, #10
 800058e:	491d      	ldr	r1, [pc, #116]	; (8000604 <main+0xb0>)
 8000590:	481b      	ldr	r0, [pc, #108]	; (8000600 <main+0xac>)
 8000592:	f002 fc0b 	bl	8002dac <HAL_UART_Receive_DMA>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <main+0x4c>
  {
    /* Transfer error in reception process */
    Error_Handler();
 800059c:	f000 f926 	bl	80007ec <Error_Handler>
      state of the peripheral; if it's busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
  while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 80005a0:	bf00      	nop
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0xac>)
 80005a4:	f002 ff90 	bl	80034c8 <HAL_UART_GetState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b20      	cmp	r3, #32
 80005ac:	d1f9      	bne.n	80005a2 <main+0x4e>
  {
  }

  /*##-4- Send the received Buffer ###########################################*/
  if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 80005ae:	220a      	movs	r2, #10
 80005b0:	4914      	ldr	r1, [pc, #80]	; (8000604 <main+0xb0>)
 80005b2:	4813      	ldr	r0, [pc, #76]	; (8000600 <main+0xac>)
 80005b4:	f002 fb68 	bl	8002c88 <HAL_UART_Transmit_DMA>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <main+0x6e>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 80005be:	f000 f915 	bl	80007ec <Error_Handler>
      state of the peripheral; if it's busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
  while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 80005c2:	bf00      	nop
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <main+0xac>)
 80005c6:	f002 ff7f 	bl	80034c8 <HAL_UART_GetState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b20      	cmp	r3, #32
 80005ce:	d1f9      	bne.n	80005c4 <main+0x70>
  {
  }

  /*##-6- Send the End Message ###############################################*/  
  if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)aTxEndMessage, TXENDMESSAGESIZE)!= HAL_OK)
 80005d0:	2215      	movs	r2, #21
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <main+0xb4>)
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <main+0xac>)
 80005d6:	f002 fb57 	bl	8002c88 <HAL_UART_Transmit_DMA>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <main+0x90>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 80005e0:	f000 f904 	bl	80007ec <Error_Handler>
  }
  
  /*##-7- Wait for the end of the transfer ###################################*/  
  while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY)
 80005e4:	bf00      	nop
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <main+0xac>)
 80005e8:	f002 ff6e 	bl	80034c8 <HAL_UART_GetState>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b20      	cmp	r3, #32
 80005f0:	d1f9      	bne.n	80005e6 <main+0x92>
  {
  }

  /* Turn on LED2 if test passes then enter infinite loop */
  BSP_LED_On(LED2); 
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fa54 	bl	8000aa0 <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0xa4>
 80005fa:	bf00      	nop
 80005fc:	20000008 	.word	0x20000008
 8000600:	200000b8 	.word	0x200000b8
 8000604:	20000208 	.word	0x20000208
 8000608:	2000006c 	.word	0x2000006c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09a      	sub	sp, #104	; 0x68
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2248      	movs	r2, #72	; 0x48
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 ff64 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
 800062e:	615a      	str	r2, [r3, #20]
 8000630:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xc0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <SystemClock_Config+0xc0>)
 800063c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xc0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064e:	2320      	movs	r3, #32
 8000650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000656:	2300      	movs	r3, #0
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800065a:	2360      	movs	r3, #96	; 0x60
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000662:	2301      	movs	r3, #1
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 800066a:	2320      	movs	r3, #32
 800066c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800066e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000672:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000674:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000678:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800067a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800067e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fc5f 	bl	8001f48 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000690:	f000 f8ac 	bl	80007ec <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000694:	236f      	movs	r3, #111	; 0x6f
 8000696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2303      	movs	r3, #3
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2103      	movs	r1, #3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 ffd5 	bl	8002664 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006c0:	f000 f894 	bl	80007ec <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3768      	adds	r7, #104	; 0x68
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58000400 	.word	0x58000400

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <MX_USART1_UART_Init+0x98>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006f4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006f8:	220c      	movs	r2, #12
 80006fa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_USART1_UART_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_USART1_UART_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_USART1_UART_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART1_UART_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800071a:	4812      	ldr	r0, [pc, #72]	; (8000764 <MX_USART1_UART_Init+0x94>)
 800071c:	f002 fa64 	bl	8002be8 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000726:	f000 f861 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_USART1_UART_Init+0x94>)
 800072e:	f003 fdec 	bl	800430a <HAL_UARTEx_SetTxFifoThreshold>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000738:	f000 f858 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_USART1_UART_Init+0x94>)
 8000740:	f003 fe21 	bl	8004386 <HAL_UARTEx_SetRxFifoThreshold>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800074a:	f000 f84f 	bl	80007ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART1_UART_Init+0x94>)
 8000750:	f003 fda2 	bl	8004298 <HAL_UARTEx_DisableFifoMode>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 f847 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000b8 	.word	0x200000b8
 8000768:	40013800 	.word	0x40013800

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000770:	2004      	movs	r0, #4
 8000772:	f7ff febc 	bl	80004ee <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff feb9 	bl	80004ee <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2100      	movs	r1, #0
 8000780:	200b      	movs	r0, #11
 8000782:	f000 fb5e 	bl	8000e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000786:	200b      	movs	r0, #11
 8000788:	f000 fb75 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200c      	movs	r0, #12
 8000792:	f000 fb56 	bl	8000e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000796:	200c      	movs	r0, #12
 8000798:	f000 fb6d 	bl	8000e76 <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff febb 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <HAL_UART_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  /* Turn LED3 on: Transfer error in reception/transmission process */
  BSP_LED_On(LED3);
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 f95e 	bl	8000aa0 <BSP_LED_On>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f000 f955 	bl	8000aa0 <BSP_LED_On>
  while(1);
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0xa>

080007f8 <LL_AHB2_GRP1_EnableClock>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081c:	68fb      	ldr	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800082a:	b480      	push	{r7}
 800082c:	b085      	sub	sp, #20
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a3c      	ldr	r2, [pc, #240]	; (800097c <HAL_UART_MspInit+0x110>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d171      	bne.n	8000972 <HAL_UART_MspInit+0x106>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000892:	f7ff ffca 	bl	800082a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ffae 	bl	80007f8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800089c:	23c0      	movs	r3, #192	; 0xc0
 800089e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ac:	2307      	movs	r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	4832      	ldr	r0, [pc, #200]	; (8000980 <HAL_UART_MspInit+0x114>)
 80008b8:	f000 fe2a 	bl	8001510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80008bc:	4b31      	ldr	r3, [pc, #196]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008be:	4a32      	ldr	r2, [pc, #200]	; (8000988 <HAL_UART_MspInit+0x11c>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80008c2:	4b30      	ldr	r3, [pc, #192]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008c4:	220e      	movs	r2, #14
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008f4:	4823      	ldr	r0, [pc, #140]	; (8000984 <HAL_UART_MspInit+0x118>)
 80008f6:	f000 fad9 	bl	8000eac <HAL_DMA_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x98>
    {
      Error_Handler();
 8000900:	f7ff ff74 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <HAL_UART_MspInit+0x118>)
 8000908:	67da      	str	r2, [r3, #124]	; 0x7c
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <HAL_UART_MspInit+0x118>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_UART_MspInit+0x120>)
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_UART_MspInit+0x124>)
 8000914:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_UART_MspInit+0x120>)
 8000918:	220f      	movs	r2, #15
 800091a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_UART_MspInit+0x120>)
 800091e:	2210      	movs	r2, #16
 8000920:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_UART_MspInit+0x120>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x120>)
 800092a:	2280      	movs	r2, #128	; 0x80
 800092c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_UART_MspInit+0x120>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_UART_MspInit+0x120>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_UART_MspInit+0x120>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_UART_MspInit+0x120>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000946:	4811      	ldr	r0, [pc, #68]	; (800098c <HAL_UART_MspInit+0x120>)
 8000948:	f000 fab0 	bl	8000eac <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8000952:	f7ff ff4b 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0c      	ldr	r2, [pc, #48]	; (800098c <HAL_UART_MspInit+0x120>)
 800095a:	679a      	str	r2, [r3, #120]	; 0x78
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_UART_MspInit+0x120>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2024      	movs	r0, #36	; 0x24
 8000968:	f000 fa6b 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800096c:	2024      	movs	r0, #36	; 0x24
 800096e:	f000 fa82 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40013800 	.word	0x40013800
 8000980:	48000400 	.word	0x48000400
 8000984:	20000148 	.word	0x20000148
 8000988:	4002001c 	.word	0x4002001c
 800098c:	200001a8 	.word	0x200001a8
 8000990:	40020008 	.word	0x40020008

08000994 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f93e 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <DMA1_Channel1_IRQHandler+0x10>)
 80009c2:	f000 fc54 	bl	800126e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200001a8 	.word	0x200001a8

080009d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <DMA1_Channel2_IRQHandler+0x10>)
 80009d6:	f000 fc4a 	bl	800126e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000148 	.word	0x20000148

080009e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <USART1_IRQHandler+0x10>)
 80009ea:	f002 fa35 	bl	8002e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000b8 	.word	0x200000b8

080009f8 <LL_AHB2_GRP1_EnableClock>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff ffd6 	bl	80009f8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <BSP_LED_Init+0x6c>)
 8000a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a54:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <BSP_LED_Init+0x70>)
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fd4d 	bl	8001510 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <BSP_LED_Init+0x70>)
 8000a7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <BSP_LED_Init+0x6c>)
 8000a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f000 feb1 	bl	80017f0 <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800453c 	.word	0x0800453c
 8000a9c:	20000084 	.word	0x20000084

08000aa0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a07      	ldr	r2, [pc, #28]	; (8000acc <BSP_LED_On+0x2c>)
 8000aae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <BSP_LED_On+0x30>)
 8000ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	f000 fe97 	bl	80017f0 <HAL_GPIO_WritePin>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000084 	.word	0x20000084
 8000ad0:	0800453c 	.word	0x0800453c

08000ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <SystemInit+0xa0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <SystemInit+0xa0>)
 8000ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae4:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <SystemInit+0xa0>)
 8000ae6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b02:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000b06:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <SystemInit+0xa4>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b24:	f023 0305 	bic.w	r3, r3, #5
 8000b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <SystemInit+0xa8>)
 8000b46:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <SystemInit+0xa8>)
 8000b4e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00
 8000b78:	faf6fefb 	.word	0xfaf6fefb
 8000b7c:	22041000 	.word	0x22041000

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_Init+0x3c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_Init+0x3c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f948 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 f80f 	bl	8000bc0 <HAL_InitTick>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	e001      	b.n	8000bb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bae:	f7ff fe55 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	58004000 	.word	0x58004000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d024      	beq.n	8000c1e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	f001 fef4 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f950 	bl	8000e92 <HAL_SYSTICK_Config>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10f      	bne.n	8000c18 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d809      	bhi.n	8000c12 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 f91c 	bl	8000e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <HAL_InitTick+0x70>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e004      	b.n	8000c22 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e001      	b.n	8000c22 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	20000094 	.word	0x20000094

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000098 	.word	0x20000098
 8000c58:	20000214 	.word	0x20000214

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000214 	.word	0x20000214

08000c74 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTickPrio+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000094 	.word	0x20000094

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff29 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff40 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff90 	bl	8000d80 <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5f 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff33 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa4 	bl	8000de8 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d101      	bne.n	8000ebe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e08e      	b.n	8000fdc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b47      	ldr	r3, [pc, #284]	; (8000fe4 <HAL_DMA_Init+0x138>)
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d80f      	bhi.n	8000eea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b45      	ldr	r3, [pc, #276]	; (8000fe8 <HAL_DMA_Init+0x13c>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a45      	ldr	r2, [pc, #276]	; (8000fec <HAL_DMA_Init+0x140>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	009a      	lsls	r2, r3, #2
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <HAL_DMA_Init+0x144>)
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee8:	e00e      	b.n	8000f08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <HAL_DMA_Init+0x148>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a3d      	ldr	r2, [pc, #244]	; (8000fec <HAL_DMA_Init+0x140>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	091b      	lsrs	r3, r3, #4
 8000efc:	009a      	lsls	r2, r3, #2
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a3c      	ldr	r2, [pc, #240]	; (8000ff8 <HAL_DMA_Init+0x14c>)
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 fa74 	bl	8001448 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f68:	d102      	bne.n	8000f70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d010      	beq.n	8000fb2 <HAL_DMA_Init+0x106>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d80c      	bhi.n	8000fb2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fa93 	bl	80014c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	e008      	b.n	8000fc4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020407 	.word	0x40020407
 8000fe8:	bffdfff8 	.word	0xbffdfff8
 8000fec:	cccccccd 	.word	0xcccccccd
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	bffdfbf8 	.word	0xbffdfbf8
 8000ff8:	40020400 	.word	0x40020400

08000ffc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_DMA_Start_IT+0x20>
 8001018:	2302      	movs	r3, #2
 800101a:	e066      	b.n	80010ea <HAL_DMA_Start_IT+0xee>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2201      	movs	r2, #1
 8001020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d155      	bne.n	80010dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f9b9 	bl	80013cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	2b00      	cmp	r3, #0
 8001060:	d008      	beq.n	8001074 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 020e 	orr.w	r2, r2, #14
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e00f      	b.n	8001094 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0204 	bic.w	r2, r2, #4
 8001082:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 020a 	orr.w	r2, r2, #10
 8001092:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e005      	b.n	80010e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010e4:	2302      	movs	r3, #2
 80010e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e04f      	b.n	80011a4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d008      	beq.n	8001122 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2204      	movs	r2, #4
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e040      	b.n	80011a4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 020e 	bic.w	r2, r2, #14
 8001130:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001140:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0201 	bic.w	r2, r2, #1
 8001150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f003 021c 	and.w	r2, r3, #28
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800116e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00c      	beq.n	8001192 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001186:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001190:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d005      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2204      	movs	r2, #4
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e047      	b.n	8001264 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020e 	bic.w	r2, r2, #14
 80011e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f003 021c 	and.w	r2, r3, #28
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001220:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00c      	beq.n	8001244 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001238:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001242:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    }
  }
  return status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f003 031c 	and.w	r3, r3, #28
 800128e:	2204      	movs	r2, #4
 8001290:	409a      	lsls	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d026      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x7a>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d021      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0204 	bic.w	r2, r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 021c 	and.w	r2, r3, #28
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2104      	movs	r1, #4
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d071      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80012e6:	e06c      	b.n	80013c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f003 031c 	and.w	r3, r3, #28
 80012f0:	2202      	movs	r2, #2
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d02e      	beq.n	800135a <HAL_DMA_IRQHandler+0xec>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d029      	beq.n	800135a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10b      	bne.n	800132c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 020a 	bic.w	r2, r2, #10
 8001322:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	f003 021c 	and.w	r2, r3, #28
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	2102      	movs	r1, #2
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b00      	cmp	r3, #0
 800134e:	d038      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001358:	e033      	b.n	80013c2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f003 031c 	and.w	r3, r3, #28
 8001362:	2208      	movs	r2, #8
 8001364:	409a      	lsls	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d02a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x156>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d025      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 020e 	bic.w	r2, r2, #14
 8001386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 021c 	and.w	r2, r3, #28
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2101      	movs	r1, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
}
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f003 021c 	and.w	r2, r3, #28
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b10      	cmp	r3, #16
 8001418:	d108      	bne.n	800142c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800142a:	e007      	b.n	800143c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001458:	429a      	cmp	r2, r3
 800145a:	d80a      	bhi.n	8001472 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001468:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6493      	str	r3, [r2, #72]	; 0x48
 8001470:	e007      	b.n	8001482 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	009a      	lsls	r2, r3, #2
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800147c:	4413      	add	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	3b08      	subs	r3, #8
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	2201      	movs	r2, #1
 80014a2:	409a      	lsls	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40020407 	.word	0x40020407
 80014b8:	4002081c 	.word	0x4002081c
 80014bc:	cccccccd 	.word	0xcccccccd
 80014c0:	40020880 	.word	0x40020880

080014c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80014e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2201      	movs	r2, #1
 80014f4:	409a      	lsls	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	1000823f 	.word	0x1000823f
 800150c:	40020940 	.word	0x40020940

08001510 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	e14c      	b.n	80017ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 813e 	beq.w	80017b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d005      	beq.n	8001550 <HAL_GPIO_Init+0x40>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d130      	bne.n	80015b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001586:	2201      	movs	r2, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	f003 0201 	and.w	r2, r3, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d017      	beq.n	80015ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d123      	bne.n	8001642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0203 	and.w	r2, r3, #3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8098 	beq.w	80017b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <HAL_GPIO_Init+0x2c8>)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ae:	d019      	beq.n	80016e4 <HAL_GPIO_Init+0x1d4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <HAL_GPIO_Init+0x2cc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d013      	beq.n	80016e0 <HAL_GPIO_Init+0x1d0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <HAL_GPIO_Init+0x2d0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00d      	beq.n	80016dc <HAL_GPIO_Init+0x1cc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x2d4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d007      	beq.n	80016d8 <HAL_GPIO_Init+0x1c8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <HAL_GPIO_Init+0x2d8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_GPIO_Init+0x1c4>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e008      	b.n	80016e6 <HAL_GPIO_Init+0x1d6>
 80016d4:	2307      	movs	r3, #7
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x1d6>
 80016d8:	2303      	movs	r3, #3
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x1d6>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x1d6>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x1d6>
 80016e4:	2300      	movs	r3, #0
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f6:	4938      	ldr	r1, [pc, #224]	; (80017d8 <HAL_GPIO_Init+0x2c8>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001728:	4a30      	ldr	r2, [pc, #192]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800172e:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001752:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 800175a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 8001788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ac:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <HAL_GPIO_Init+0x2dc>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f47f aeab 	bne.w	8001520 <HAL_GPIO_Init+0x10>
  }
}
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40010000 	.word	0x40010000
 80017dc:	48000400 	.word	0x48000400
 80017e0:	48000800 	.word	0x48000800
 80017e4:	48000c00 	.word	0x48000c00
 80017e8:	48001000 	.word	0x48001000
 80017ec:	58000800 	.word	0x58000800

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800180c:	e002      	b.n	8001814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	58000400 	.word	0x58000400

08001840 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_PWREx_GetVoltageRange+0x18>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	58000400 	.word	0x58000400

0800185c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800186e:	d101      	bne.n	8001874 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018ce:	d101      	bne.n	80018d4 <LL_RCC_HSE_IsReady+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_RCC_HSE_IsReady+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192e:	d101      	bne.n	8001934 <LL_RCC_HSI_IsReady+0x18>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <LL_RCC_HSI_IsReady+0x1a>
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	061b      	lsls	r3, r3, #24
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d101      	bne.n	80019c6 <LL_RCC_HSI48_IsReady+0x18>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <LL_RCC_HSI48_IsReady+0x1a>
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a48:	f023 0304 	bic.w	r3, r3, #4
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d101      	bne.n	8001a72 <LL_RCC_LSE_IsReady+0x18>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_RCC_LSE_IsReady+0x1a>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d101      	bne.n	8001ada <LL_RCC_LSI1_IsReady+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_RCC_LSI1_IsReady+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d101      	bne.n	8001b42 <LL_RCC_LSI2_IsReady+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_RCC_LSI2_IsReady+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d101      	bne.n	8001bce <LL_RCC_MSI_IsReady+0x16>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_RCC_MSI_IsReady+0x18>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2bb0      	cmp	r3, #176	; 0xb0
 8001c18:	d901      	bls.n	8001c1e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c1a:	23b0      	movs	r3, #176	; 0xb0
 8001c1c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 0203 	bic.w	r2, r3, #3
 8001c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cfa:	f023 020f 	bic.w	r2, r3, #15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e1a:	d101      	bne.n	8001e20 <LL_RCC_PLL_IsReady+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_RCC_PLL_IsReady+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d101      	bne.n	8001ea6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec6:	d101      	bne.n	8001ecc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d101      	bne.n	8001ef2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f10:	d101      	bne.n	8001f16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f34:	d101      	bne.n	8001f3a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08d      	sub	sp, #52	; 0x34
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e37f      	b.n	800265a <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8092 	beq.w	800208c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f68:	f7ff fe89 	bl	8001c7e <LL_RCC_GetSysClkSource>
 8001f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f6e:	f7ff ff82 	bl	8001e76 <LL_RCC_PLL_GetMainSource>
 8001f72:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3e>
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	d14c      	bne.n	800201a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d149      	bne.n	800201a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f86:	f7ff fe17 	bl	8001bb8 <LL_RCC_MSI_IsReady>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_OscConfig+0x54>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e35e      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001fa0:	f7ff fe2f 	bl	8001c02 <LL_RCC_MSI_GetRange>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	429c      	cmp	r4, r3
 8001fa8:	d914      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fd46 	bl	8002a40 <RCC_SetFlashLatencyFromMSIRange>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e34d      	b.n	800265a <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fe09 	bl	8001bda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fe2d 	bl	8001c2c <LL_RCC_MSI_SetCalibTrimming>
 8001fd2:	e013      	b.n	8001ffc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fdfe 	bl	8001bda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fe22 	bl	8001c2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fd27 	bl	8002a40 <RCC_SetFlashLatencyFromMSIRange>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e32e      	b.n	800265a <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ffc:	f000 fce0 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002000:	4603      	mov	r3, r0
 8002002:	4aa5      	ldr	r2, [pc, #660]	; (8002298 <HAL_RCC_OscConfig+0x350>)
 8002004:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002006:	4ba5      	ldr	r3, [pc, #660]	; (800229c <HAL_RCC_OscConfig+0x354>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fdd8 	bl	8000bc0 <HAL_InitTick>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d039      	beq.n	800208a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e31f      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01e      	beq.n	8002060 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002022:	f7ff fdab 	bl	8001b7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002026:	f7fe fe19 	bl	8000c5c <HAL_GetTick>
 800202a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202e:	f7fe fe15 	bl	8000c5c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e30c      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002040:	f7ff fdba 	bl	8001bb8 <LL_RCC_MSI_IsReady>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f1      	beq.n	800202e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fdc3 	bl	8001bda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fde7 	bl	8001c2c <LL_RCC_MSI_SetCalibTrimming>
 800205e:	e015      	b.n	800208c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002060:	f7ff fd9b 	bl	8001b9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002064:	f7fe fdfa 	bl	8000c5c <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800206c:	f7fe fdf6 	bl	8000c5c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e2ed      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 800207e:	f7ff fd9b 	bl	8001bb8 <LL_RCC_MSI_IsReady>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f1      	bne.n	800206c <HAL_RCC_OscConfig+0x124>
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d04e      	beq.n	8002136 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002098:	f7ff fdf1 	bl	8001c7e <LL_RCC_GetSysClkSource>
 800209c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209e:	f7ff feea 	bl	8001e76 <LL_RCC_PLL_GetMainSource>
 80020a2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x16e>
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d10a      	bne.n	80020cc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b6:	f7ff fc01 	bl	80018bc <LL_RCC_HSE_IsReady>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d039      	beq.n	8002134 <HAL_RCC_OscConfig+0x1ec>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d135      	bne.n	8002134 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e2c6      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d102      	bne.n	80020dc <HAL_RCC_OscConfig+0x194>
 80020d6:	f7ff fbd3 	bl	8001880 <LL_RCC_HSE_Enable>
 80020da:	e001      	b.n	80020e0 <HAL_RCC_OscConfig+0x198>
 80020dc:	f7ff fbdf 	bl	800189e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe fdb8 	bl	8000c5c <HAL_GetTick>
 80020ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe fdb4 	bl	8000c5c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e2ab      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002102:	f7ff fbdb 	bl	80018bc <LL_RCC_HSE_IsReady>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f1      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1a8>
 800210c:	e013      	b.n	8002136 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe fda5 	bl	8000c5c <HAL_GetTick>
 8002112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002116:	f7fe fda1 	bl	8000c5c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e298      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002128:	f7ff fbc8 	bl	80018bc <LL_RCC_HSE_IsReady>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f1      	bne.n	8002116 <HAL_RCC_OscConfig+0x1ce>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d051      	beq.n	80021e6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	f7ff fd9c 	bl	8001c7e <LL_RCC_GetSysClkSource>
 8002146:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002148:	f7ff fe95 	bl	8001e76 <LL_RCC_PLL_GetMainSource>
 800214c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d005      	beq.n	8002160 <HAL_RCC_OscConfig+0x218>
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d113      	bne.n	8002182 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d110      	bne.n	8002182 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002160:	f7ff fbdc 	bl	800191c <LL_RCC_HSI_IsReady>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x22e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e271      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fbe0 	bl	8001940 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002180:	e031      	b.n	80021e6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d019      	beq.n	80021be <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218a:	f7ff fba9 	bl	80018e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7fe fd65 	bl	8000c5c <HAL_GetTick>
 8002192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7fe fd61 	bl	8000c5c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e258      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021a8:	f7ff fbb8 	bl	800191c <LL_RCC_HSI_IsReady>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f1      	beq.n	8002196 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fbc2 	bl	8001940 <LL_RCC_HSI_SetCalibTrimming>
 80021bc:	e013      	b.n	80021e6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021be:	f7ff fb9e 	bl	80018fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7fe fd4b 	bl	8000c5c <HAL_GetTick>
 80021c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7fe fd47 	bl	8000c5c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e23e      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021dc:	f7ff fb9e 	bl	800191c <LL_RCC_HSI_IsReady>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f1      	bne.n	80021ca <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80a4 	beq.w	8002348 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d077      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d04b      	beq.n	80022ac <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002214:	f7ff fc55 	bl	8001ac2 <LL_RCC_LSI1_IsReady>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d113      	bne.n	8002246 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800221e:	f7ff fc2e 	bl	8001a7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002222:	f7fe fd1b 	bl	8000c5c <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800222a:	f7fe fd17 	bl	8000c5c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e20e      	b.n	800265a <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800223c:	f7ff fc41 	bl	8001ac2 <LL_RCC_LSI1_IsReady>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f1      	beq.n	800222a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002246:	f7ff fc4e 	bl	8001ae6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224a:	f7fe fd07 	bl	8000c5c <HAL_GetTick>
 800224e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002252:	f7fe fd03 	bl	8000c5c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1fa      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002264:	f7ff fc61 	bl	8001b2a <LL_RCC_LSI2_IsReady>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f1      	beq.n	8002252 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fc6b 	bl	8001b4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002278:	f7ff fc12 	bl	8001aa0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fcee 	bl	8000c5c <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002282:	e00d      	b.n	80022a0 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002284:	f7fe fcea 	bl	8000c5c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d906      	bls.n	80022a0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1e1      	b.n	800265a <HAL_RCC_OscConfig+0x712>
 8002296:	bf00      	nop
 8002298:	20000090 	.word	0x20000090
 800229c:	20000094 	.word	0x20000094
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022a0:	f7ff fc0f 	bl	8001ac2 <LL_RCC_LSI1_IsReady>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ec      	bne.n	8002284 <HAL_RCC_OscConfig+0x33c>
 80022aa:	e04d      	b.n	8002348 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022ac:	f7ff fbe7 	bl	8001a7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fcd4 	bl	8000c5c <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022b8:	f7fe fcd0 	bl	8000c5c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1c7      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022ca:	f7ff fbfa 	bl	8001ac2 <LL_RCC_LSI1_IsReady>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f1      	beq.n	80022b8 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022d4:	f7ff fc18 	bl	8001b08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022da:	f7fe fcbf 	bl	8000c5c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1b6      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022ec:	f7ff fc1d 	bl	8001b2a <LL_RCC_LSI2_IsReady>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f1      	bne.n	80022da <HAL_RCC_OscConfig+0x392>
 80022f6:	e027      	b.n	8002348 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80022f8:	f7ff fc06 	bl	8001b08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7fe fcae 	bl	8000c5c <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002304:	f7fe fcaa 	bl	8000c5c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1a1      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002316:	f7ff fc08 	bl	8001b2a <LL_RCC_LSI2_IsReady>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f1      	bne.n	8002304 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002320:	f7ff fbbe 	bl	8001aa0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe fc9a 	bl	8000c5c <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800232c:	f7fe fc96 	bl	8000c5c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e18d      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800233e:	f7ff fbc0 	bl	8001ac2 <LL_RCC_LSI1_IsReady>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f1      	bne.n	800232c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05b      	beq.n	800240c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002354:	4ba7      	ldr	r3, [pc, #668]	; (80025f4 <HAL_RCC_OscConfig+0x6ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d114      	bne.n	800238a <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002360:	f7ff fa5e 	bl	8001820 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002364:	f7fe fc7a 	bl	8000c5c <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236c:	f7fe fc76 	bl	8000c5c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e16d      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237e:	4b9d      	ldr	r3, [pc, #628]	; (80025f4 <HAL_RCC_OscConfig+0x6ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <HAL_RCC_OscConfig+0x450>
 8002392:	f7ff fb1e 	bl	80019d2 <LL_RCC_LSE_Enable>
 8002396:	e00c      	b.n	80023b2 <HAL_RCC_OscConfig+0x46a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d104      	bne.n	80023aa <HAL_RCC_OscConfig+0x462>
 80023a0:	f7ff fb39 	bl	8001a16 <LL_RCC_LSE_EnableBypass>
 80023a4:	f7ff fb15 	bl	80019d2 <LL_RCC_LSE_Enable>
 80023a8:	e003      	b.n	80023b2 <HAL_RCC_OscConfig+0x46a>
 80023aa:	f7ff fb23 	bl	80019f4 <LL_RCC_LSE_Disable>
 80023ae:	f7ff fb43 	bl	8001a38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d014      	beq.n	80023e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fc4f 	bl	8000c5c <HAL_GetTick>
 80023be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fc4b 	bl	8000c5c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e140      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023d8:	f7ff fb3f 	bl	8001a5a <LL_RCC_LSE_IsReady>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ef      	beq.n	80023c2 <HAL_RCC_OscConfig+0x47a>
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7fe fc3a 	bl	8000c5c <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fc36 	bl	8000c5c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e12b      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002402:	f7ff fb2a 	bl	8001a5a <LL_RCC_LSE_IsReady>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ef      	bne.n	80023ec <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02c      	beq.n	8002472 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d014      	beq.n	800244a <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002420:	f7ff faa3 	bl	800196a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7fe fc1a 	bl	8000c5c <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242c:	f7fe fc16 	bl	8000c5c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e10d      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800243e:	f7ff fab6 	bl	80019ae <LL_RCC_HSI48_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f1      	beq.n	800242c <HAL_RCC_OscConfig+0x4e4>
 8002448:	e013      	b.n	8002472 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800244a:	f7ff fa9f 	bl	800198c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fc05 	bl	8000c5c <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002456:	f7fe fc01 	bl	8000c5c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0f8      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002468:	f7ff faa1 	bl	80019ae <LL_RCC_HSI48_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f1      	bne.n	8002456 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80ee 	beq.w	8002658 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247c:	f7ff fbff 	bl	8001c7e <LL_RCC_GetSysClkSource>
 8002480:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	2b02      	cmp	r3, #2
 8002490:	f040 80b4 	bne.w	80025fc <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0203 	and.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	429a      	cmp	r2, r3
 80024a0:	d123      	bne.n	80024ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d11c      	bne.n	80024ea <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d114      	bne.n	80024ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d10d      	bne.n	80024ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d05d      	beq.n	80025a6 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d058      	beq.n	80025a2 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0ab      	b.n	800265a <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002502:	f7ff fc72 	bl	8001dea <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002506:	f7fe fba9 	bl	8000c5c <HAL_GetTick>
 800250a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fba5 	bl	8000c5c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e09c      	b.n	800265a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_RCC_OscConfig+0x6b0>)
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002546:	0212      	lsls	r2, r2, #8
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800255a:	430a      	orrs	r2, r1
 800255c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002560:	4313      	orrs	r3, r2
 8002562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002564:	f7ff fc32 	bl	8001dcc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002576:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002578:	f7fe fb70 	bl	8000c5c <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fb6c 	bl	8000c5c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e063      	b.n	800265a <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	e05a      	b.n	8002658 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e059      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d151      	bne.n	8002658 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025b4:	f7ff fc0a 	bl	8001dcc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c8:	f7fe fb48 	bl	8000c5c <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fb44 	bl	8000c5c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e03b      	b.n	800265a <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCC_OscConfig+0x688>
 80025f0:	e032      	b.n	8002658 <HAL_RCC_OscConfig+0x710>
 80025f2:	bf00      	nop
 80025f4:	58000400 	.word	0x58000400
 80025f8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d028      	beq.n	8002654 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	f7ff fbf2 	bl	8001dea <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002610:	f023 0303 	bic.w	r3, r3, #3
 8002614:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002620:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fb17 	bl	8000c5c <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fb13 	bl	8000c5c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x6ea>
 8002652:	e001      	b.n	8002658 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3734      	adds	r7, #52	; 0x34
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	bf00      	nop

08002664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e12d      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002678:	4b98      	ldr	r3, [pc, #608]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d91b      	bls.n	80026be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4b95      	ldr	r3, [pc, #596]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 0207 	bic.w	r2, r3, #7
 800268e:	4993      	ldr	r1, [pc, #588]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002696:	f7fe fae1 	bl	8000c5c <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800269e:	f7fe fadd 	bl	8000c5c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e111      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b0:	4b8a      	ldr	r3, [pc, #552]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d1ef      	bne.n	800269e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fae1 	bl	8001c96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fac2 	bl	8000c5c <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026dc:	f7fe fabe 	bl	8000c5c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0f2      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026ee:	f7ff fbce 	bl	8001e8e <LL_RCC_IsActiveFlag_HPRE>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f1      	beq.n	80026dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d016      	beq.n	8002732 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fad8 	bl	8001cbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800270e:	f7fe faa5 	bl	8000c5c <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002716:	f7fe faa1 	bl	8000c5c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0d5      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002728:	f7ff fbc3 	bl	8001eb2 <LL_RCC_IsActiveFlag_C2HPRE>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f1      	beq.n	8002716 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fad1 	bl	8001cea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002748:	f7fe fa88 	bl	8000c5c <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002750:	f7fe fa84 	bl	8000c5c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0b8      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002762:	f7ff fbb9 	bl	8001ed8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f1      	beq.n	8002750 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff facb 	bl	8001d18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002782:	f7fe fa6b 	bl	8000c5c <HAL_GetTick>
 8002786:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800278a:	f7fe fa67 	bl	8000c5c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e09b      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800279c:	f7ff fbaf 	bl	8001efe <LL_RCC_IsActiveFlag_PPRE1>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f1      	beq.n	800278a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d017      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fac1 	bl	8001d40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027be:	f7fe fa4d 	bl	8000c5c <HAL_GetTick>
 80027c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027c6:	f7fe fa49 	bl	8000c5c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e07d      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027d8:	f7ff fba3 	bl	8001f22 <LL_RCC_IsActiveFlag_PPRE2>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f1      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d043      	beq.n	8002876 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027f6:	f7ff f861 	bl	80018bc <LL_RCC_HSE_IsReady>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11e      	bne.n	800283e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e067      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d106      	bne.n	800281a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800280c:	f7ff fafc 	bl	8001e08 <LL_RCC_PLL_IsReady>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d113      	bne.n	800283e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e05c      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002822:	f7ff f9c9 	bl	8001bb8 <LL_RCC_MSI_IsReady>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e051      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002830:	f7ff f874 	bl	800191c <LL_RCC_HSI_IsReady>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e04a      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fa07 	bl	8001c56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fe fa08 	bl	8000c5c <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fe fa04 	bl	8000c5c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e036      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	f7ff fa0a 	bl	8001c7e <LL_RCC_GetSysClkSource>
 800286a:	4602      	mov	r2, r0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	429a      	cmp	r2, r3
 8002874:	d1ec      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d21b      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0207 	bic.w	r2, r3, #7
 800288c:	4913      	ldr	r1, [pc, #76]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe f9e2 	bl	8000c5c <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289a:	e008      	b.n	80028ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800289c:	f7fe f9de 	bl	8000c5c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e012      	b.n	80028d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x278>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1ef      	bne.n	800289c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028bc:	f000 f880 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <HAL_RCC_ClockConfig+0x27c>)
 80028c4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028c6:	f7fe f9d5 	bl	8000c74 <HAL_GetTickPrio>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe f977 	bl	8000bc0 <HAL_InitTick>
 80028d2:	4603      	mov	r3, r0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	58004000 	.word	0x58004000
 80028e0:	20000090 	.word	0x20000090

080028e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ea:	f7ff f9c8 	bl	8001c7e <LL_RCC_GetSysClkSource>
 80028ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10a      	bne.n	800290c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028f6:	f7ff f984 	bl	8001c02 <LL_RCC_MSI_GetRange>
 80028fa:	4603      	mov	r3, r0
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	e04b      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d102      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	e045      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d10a      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800291e:	f7fe ff9d 	bl	800185c <LL_RCC_HSE_IsEnabledDiv2>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e03a      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800292e:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCC_GetSysClockFreq+0xd8>)
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e037      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002934:	f7ff fa9f 	bl	8001e76 <LL_RCC_PLL_GetMainSource>
 8002938:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d003      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x64>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x6a>
 8002946:	e00d      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800294a:	60bb      	str	r3, [r7, #8]
        break;
 800294c:	e015      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800294e:	f7fe ff85 	bl	800185c <LL_RCC_HSE_IsEnabledDiv2>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d102      	bne.n	800295e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002958:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800295a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800295c:	e00d      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_GetSysClockFreq+0xd8>)
 8002960:	60bb      	str	r3, [r7, #8]
        break;
 8002962:	e00a      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002964:	f7ff f94d 	bl	8001c02 <LL_RCC_MSI_GetRange>
 8002968:	4603      	mov	r3, r0
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	60bb      	str	r3, [r7, #8]
        break;
 8002978:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800297a:	f7ff fa57 	bl	8001e2c <LL_RCC_PLL_GetN>
 800297e:	4602      	mov	r2, r0
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	fb03 f402 	mul.w	r4, r3, r2
 8002986:	f7ff fa6a 	bl	8001e5e <LL_RCC_PLL_GetDivider>
 800298a:	4603      	mov	r3, r0
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	3301      	adds	r3, #1
 8002990:	fbb4 f4f3 	udiv	r4, r4, r3
 8002994:	f7ff fa57 	bl	8001e46 <LL_RCC_PLL_GetR>
 8002998:	4603      	mov	r3, r0
 800299a:	0f5b      	lsrs	r3, r3, #29
 800299c:	3301      	adds	r3, #1
 800299e:	fbb4 f3f3 	udiv	r3, r4, r3
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80029a4:	68fb      	ldr	r3, [r7, #12]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	080045a4 	.word	0x080045a4
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	003d0900 	.word	0x003d0900
 80029bc:	007a1200 	.word	0x007a1200

080029c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b598      	push	{r3, r4, r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029c4:	f7ff ff8e 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80029c8:	4604      	mov	r4, r0
 80029ca:	f7ff f9cd 	bl	8001d68 <LL_RCC_GetAHBPrescaler>
 80029ce:	4603      	mov	r3, r0
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd98      	pop	{r3, r4, r7, pc}
 80029e4:	08004544 	.word	0x08004544

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b598      	push	{r3, r4, r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029ec:	f7ff ffe8 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4604      	mov	r4, r0
 80029f2:	f7ff f9d3 	bl	8001d9c <LL_RCC_GetAPB1Prescaler>
 80029f6:	4603      	mov	r3, r0
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd98      	pop	{r3, r4, r7, pc}
 8002a10:	08004584 	.word	0x08004584

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b598      	push	{r3, r4, r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a18:	f7ff ffd2 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	f7ff f9c9 	bl	8001db4 <LL_RCC_GetAPB2Prescaler>
 8002a22:	4603      	mov	r3, r0
 8002a24:	0adb      	lsrs	r3, r3, #11
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd98      	pop	{r3, r4, r7, pc}
 8002a3c:	08004584 	.word	0x08004584

08002a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2bb0      	cmp	r3, #176	; 0xb0
 8002a4c:	d903      	bls.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e007      	b.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a66:	f7ff f98b 	bl	8001d80 <LL_RCC_GetAHB4Prescaler>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	0c9c      	lsrs	r4, r3, #18
 8002a8a:	f7fe fed9 	bl	8001840 <HAL_PWREx_GetVoltageRange>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4619      	mov	r1, r3
 8002a92:	4620      	mov	r0, r4
 8002a94:	f000 f80c 	bl	8002ab0 <RCC_SetFlashLatency>
 8002a98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	080045a4 	.word	0x080045a4
 8002aa8:	08004544 	.word	0x08004544
 8002aac:	431bde83 	.word	0x431bde83

08002ab0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b093      	sub	sp, #76	; 0x4c
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <RCC_SetFlashLatency+0xe8>)
 8002abc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002ac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002ac6:	4a35      	ldr	r2, [pc, #212]	; (8002b9c <RCC_SetFlashLatency+0xec>)
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ad2:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <RCC_SetFlashLatency+0xf0>)
 8002ad4:	f107 040c 	add.w	r4, r7, #12
 8002ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ade:	2300      	movs	r3, #0
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae8:	d11a      	bne.n	8002b20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002aea:	2300      	movs	r3, #0
 8002aec:	643b      	str	r3, [r7, #64]	; 0x40
 8002aee:	e013      	b.n	8002b18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	3348      	adds	r3, #72	; 0x48
 8002af6:	443b      	add	r3, r7
 8002af8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d807      	bhi.n	8002b12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	443b      	add	r3, r7
 8002b0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b0e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b10:	e020      	b.n	8002b54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b14:	3301      	adds	r3, #1
 8002b16:	643b      	str	r3, [r7, #64]	; 0x40
 8002b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d9e8      	bls.n	8002af0 <RCC_SetFlashLatency+0x40>
 8002b1e:	e019      	b.n	8002b54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b24:	e013      	b.n	8002b4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3348      	adds	r3, #72	; 0x48
 8002b2c:	443b      	add	r3, r7
 8002b2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d807      	bhi.n	8002b48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	3348      	adds	r3, #72	; 0x48
 8002b3e:	443b      	add	r3, r7
 8002b40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b46:	e005      	b.n	8002b54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d9e8      	bls.n	8002b26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <RCC_SetFlashLatency+0xf4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4911      	ldr	r1, [pc, #68]	; (8002ba4 <RCC_SetFlashLatency+0xf4>)
 8002b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b64:	f7fe f87a 	bl	8000c5c <HAL_GetTick>
 8002b68:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b6a:	e008      	b.n	8002b7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b6c:	f7fe f876 	bl	8000c5c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e007      	b.n	8002b8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <RCC_SetFlashLatency+0xf4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1ef      	bne.n	8002b6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	374c      	adds	r7, #76	; 0x4c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	bf00      	nop
 8002b98:	08004510 	.word	0x08004510
 8002b9c:	08004520 	.word	0x08004520
 8002ba0:	0800452c 	.word	0x0800452c
 8002ba4:	58004000 	.word	0x58004000

08002ba8 <LL_RCC_GetUSARTClockSource>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4013      	ands	r3, r2
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_GetLPUARTClockSource>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4013      	ands	r3, r2
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e042      	b.n	8002c80 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d106      	bne.n	8002c12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd fe2d 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2224      	movs	r2, #36	; 0x24
 8002c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fc62 	bl	80034f4 <UART_SetConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e022      	b.n	8002c80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fe7e 	bl	8003944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 ff05 	bl	8003a88 <UART_CheckIdleState>
 8002c7e:	4603      	mov	r3, r0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d17a      	bne.n	8002d96 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <HAL_UART_Transmit_DMA+0x24>
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e073      	b.n	8002d98 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Transmit_DMA+0x36>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e06c      	b.n	8002d98 <HAL_UART_Transmit_DMA+0x110>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2221      	movs	r2, #33	; 0x21
 8002ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02c      	beq.n	8002d4e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_UART_Transmit_DMA+0x118>)
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d00:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <HAL_UART_Transmit_DMA+0x11c>)
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_UART_Transmit_DMA+0x120>)
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d10:	2200      	movs	r2, #0
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3328      	adds	r3, #40	; 0x28
 8002d24:	461a      	mov	r2, r3
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	f7fe f968 	bl	8000ffc <HAL_DMA_Start_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2210      	movs	r2, #16
 8002d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e024      	b.n	8002d98 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2240      	movs	r2, #64	; 0x40
 8002d54:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3308      	adds	r3, #8
 8002d64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7e:	623a      	str	r2, [r7, #32]
 8002d80:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	69f9      	ldr	r1, [r7, #28]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08003f47 	.word	0x08003f47
 8002da4:	08003fe1 	.word	0x08003fe1
 8002da8:	0800415b 	.word	0x0800415b

08002dac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d142      	bne.n	8002e4a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_UART_Receive_DMA+0x24>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e03b      	b.n	8002e4c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Receive_DMA+0x36>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e034      	b.n	8002e4c <HAL_UART_Receive_DMA+0xa0>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_UART_Receive_DMA+0xa8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01f      	beq.n	8002e3a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d018      	beq.n	8002e3a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	613b      	str	r3, [r7, #16]
   return(result);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	69f9      	ldr	r1, [r7, #28]
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e6      	bne.n	8002e08 <HAL_UART_Receive_DMA+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 ff35 	bl	8003cb0 <UART_Start_Receive_DMA>
 8002e46:	4603      	mov	r3, r0
 8002e48:	e000      	b.n	8002e4c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40008000 	.word	0x40008000

08002e58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b0ba      	sub	sp, #232	; 0xe8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e82:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e86:	4013      	ands	r3, r2
 8002e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11b      	bne.n	8002ecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d009      	beq.n	8002ecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 82d6 	beq.w	800346e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
      }
      return;
 8002eca:	e2d0      	b.n	800346e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 811f 	beq.w	8003114 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002eda:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <HAL_UART_IRQHandler+0x2b0>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ee6:	4b89      	ldr	r3, [pc, #548]	; (800310c <HAL_UART_IRQHandler+0x2b4>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8112 	beq.w	8003114 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d011      	beq.n	8002f20 <HAL_UART_IRQHandler+0xc8>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d011      	beq.n	8002f50 <HAL_UART_IRQHandler+0xf8>
 8002f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f46:	f043 0204 	orr.w	r2, r3, #4
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <HAL_UART_IRQHandler+0x128>
 8002f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f76:	f043 0202 	orr.w	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d017      	beq.n	8002fbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f9c:	4b5a      	ldr	r3, [pc, #360]	; (8003108 <HAL_UART_IRQHandler+0x2b0>)
 8002f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f043 0208 	orr.w	r2, r3, #8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <HAL_UART_IRQHandler+0x196>
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 823c 	beq.w	8003472 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d005      	beq.n	8003052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800304a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04f      	beq.n	80030f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 ff11 	bl	8003e7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b40      	cmp	r3, #64	; 0x40
 8003064:	d141      	bne.n	80030ea <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800307c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3308      	adds	r3, #8
 800308e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800309e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030a2:	e841 2300 	strex	r3, r2, [r1]
 80030a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1d9      	bne.n	8003066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_UART_IRQHandler+0x2b8>)
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe f872 	bl	80011b0 <HAL_DMA_Abort_IT>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80030dc:	4610      	mov	r0, r2
 80030de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	e00f      	b.n	8003102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fb77 	bl	80007d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	e00b      	b.n	8003102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fd fb73 	bl	80007d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f0:	e007      	b.n	8003102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fb6f 	bl	80007d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003100:	e1b7      	b.n	8003472 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003102:	bf00      	nop
    return;
 8003104:	e1b5      	b.n	8003472 <HAL_UART_IRQHandler+0x61a>
 8003106:	bf00      	nop
 8003108:	10000001 	.word	0x10000001
 800310c:	04000120 	.word	0x04000120
 8003110:	080041db 	.word	0x080041db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003118:	2b01      	cmp	r3, #1
 800311a:	f040 814a 	bne.w	80033b2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8143 	beq.w	80033b2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800312c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 813c 	beq.w	80033b2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2210      	movs	r2, #16
 8003140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	f040 80b5 	bne.w	80032bc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800315e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8187 	beq.w	8003476 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800316e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003172:	429a      	cmp	r2, r3
 8003174:	f080 817f 	bcs.w	8003476 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800317e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 8086 	bne.w	80032a0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1da      	bne.n	8003194 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3308      	adds	r3, #8
 80031e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800320a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e1      	bne.n	80031de <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3308      	adds	r3, #8
 8003220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800322a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800322c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800323e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800324c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e3      	bne.n	800321a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800326e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003270:	f023 0310 	bic.w	r3, r3, #16
 8003274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003282:	65bb      	str	r3, [r7, #88]	; 0x58
 8003284:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e4      	bne.n	8003260 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd ff29 	bl	80010f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f8fb 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80032ba:	e0dc      	b.n	8003476 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80ce 	beq.w	800347a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80032de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80c9 	beq.w	800347a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800330a:	647b      	str	r3, [r7, #68]	; 0x44
 800330c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e4      	bne.n	80032e8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3308      	adds	r3, #8
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	623b      	str	r3, [r7, #32]
   return(result);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003346:	633a      	str	r2, [r7, #48]	; 0x30
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800334c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e1      	bne.n	800331e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	60fb      	str	r3, [r7, #12]
   return(result);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0310 	bic.w	r3, r3, #16
 8003382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	69b9      	ldr	r1, [r7, #24]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	617b      	str	r3, [r7, #20]
   return(result);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e4      	bne.n	800336e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f880 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033b0:	e063      	b.n	800347a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00e      	beq.n	80033dc <HAL_UART_IRQHandler+0x584>
 80033be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d008      	beq.n	80033dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 ff41 	bl	800425c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033da:	e051      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80033f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	2b00      	cmp	r3, #0
 8003406:	d03a      	beq.n	800347e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
    }
    return;
 8003410:	e035      	b.n	800347e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_UART_IRQHandler+0x5da>
 800341e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 feeb 	bl	8004206 <UART_EndTransmit_IT>
    return;
 8003430:	e026      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_UART_IRQHandler+0x5fa>
 800343e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003442:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 ff1a 	bl	8004284 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003450:	e016      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d010      	beq.n	8003480 <HAL_UART_IRQHandler+0x628>
 800345e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003462:	2b00      	cmp	r3, #0
 8003464:	da0c      	bge.n	8003480 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 ff02 	bl	8004270 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800346c:	e008      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
      return;
 800346e:	bf00      	nop
 8003470:	e006      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
    return;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
      return;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
      return;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <HAL_UART_IRQHandler+0x628>
    return;
 800347e:	bf00      	nop
  }
}
 8003480:	37e8      	adds	r7, #232	; 0xe8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop

08003488 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4313      	orrs	r3, r2
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b08c      	sub	sp, #48	; 0x30
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4313      	orrs	r3, r2
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4baf      	ldr	r3, [pc, #700]	; (80037e0 <UART_SetConfig+0x2ec>)
 8003524:	4013      	ands	r3, r2
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800352c:	430b      	orrs	r3, r1
 800352e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4aa4      	ldr	r2, [pc, #656]	; (80037e4 <UART_SetConfig+0x2f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355c:	4313      	orrs	r3, r2
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800356a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003574:	430b      	orrs	r3, r1
 8003576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f023 010f 	bic.w	r1, r3, #15
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a95      	ldr	r2, [pc, #596]	; (80037e8 <UART_SetConfig+0x2f4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d125      	bne.n	80035e4 <UART_SetConfig+0xf0>
 8003598:	2003      	movs	r0, #3
 800359a:	f7ff fb05 	bl	8002ba8 <LL_RCC_GetUSARTClockSource>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d81b      	bhi.n	80035dc <UART_SetConfig+0xe8>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <UART_SetConfig+0xb8>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cd 	.word	0x080035cd
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c2:	e042      	b.n	800364a <UART_SetConfig+0x156>
 80035c4:	2302      	movs	r3, #2
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ca:	e03e      	b.n	800364a <UART_SetConfig+0x156>
 80035cc:	2304      	movs	r3, #4
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d2:	e03a      	b.n	800364a <UART_SetConfig+0x156>
 80035d4:	2308      	movs	r3, #8
 80035d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035da:	e036      	b.n	800364a <UART_SetConfig+0x156>
 80035dc:	2310      	movs	r3, #16
 80035de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e2:	e032      	b.n	800364a <UART_SetConfig+0x156>
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7e      	ldr	r2, [pc, #504]	; (80037e4 <UART_SetConfig+0x2f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d12a      	bne.n	8003644 <UART_SetConfig+0x150>
 80035ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80035f2:	f7ff fae9 	bl	8002bc8 <LL_RCC_GetLPUARTClockSource>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035fc:	d01a      	beq.n	8003634 <UART_SetConfig+0x140>
 80035fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003602:	d81b      	bhi.n	800363c <UART_SetConfig+0x148>
 8003604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003608:	d00c      	beq.n	8003624 <UART_SetConfig+0x130>
 800360a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360e:	d815      	bhi.n	800363c <UART_SetConfig+0x148>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <UART_SetConfig+0x128>
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003618:	d008      	beq.n	800362c <UART_SetConfig+0x138>
 800361a:	e00f      	b.n	800363c <UART_SetConfig+0x148>
 800361c:	2300      	movs	r3, #0
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e012      	b.n	800364a <UART_SetConfig+0x156>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e00e      	b.n	800364a <UART_SetConfig+0x156>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e00a      	b.n	800364a <UART_SetConfig+0x156>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363a:	e006      	b.n	800364a <UART_SetConfig+0x156>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003642:	e002      	b.n	800364a <UART_SetConfig+0x156>
 8003644:	2310      	movs	r3, #16
 8003646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a65      	ldr	r2, [pc, #404]	; (80037e4 <UART_SetConfig+0x2f0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	f040 8097 	bne.w	8003784 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800365a:	2b08      	cmp	r3, #8
 800365c:	d823      	bhi.n	80036a6 <UART_SetConfig+0x1b2>
 800365e:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0x170>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	08003689 	.word	0x08003689
 8003668:	080036a7 	.word	0x080036a7
 800366c:	08003691 	.word	0x08003691
 8003670:	080036a7 	.word	0x080036a7
 8003674:	08003697 	.word	0x08003697
 8003678:	080036a7 	.word	0x080036a7
 800367c:	080036a7 	.word	0x080036a7
 8003680:	080036a7 	.word	0x080036a7
 8003684:	0800369f 	.word	0x0800369f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7ff f9ae 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 800368c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800368e:	e010      	b.n	80036b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <UART_SetConfig+0x2f8>)
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003694:	e00d      	b.n	80036b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003696:	f7ff f925 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800369c:	e009      	b.n	80036b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800369e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036a4:	e005      	b.n	80036b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 812b 	beq.w	8003910 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	4a4c      	ldr	r2, [pc, #304]	; (80037f0 <UART_SetConfig+0x2fc>)
 80036c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d305      	bcc.n	80036ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d903      	bls.n	80036f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036f0:	e10e      	b.n	8003910 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2200      	movs	r2, #0
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	60fa      	str	r2, [r7, #12]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	4a3c      	ldr	r2, [pc, #240]	; (80037f0 <UART_SetConfig+0x2fc>)
 8003700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003704:	b29b      	uxth	r3, r3
 8003706:	2200      	movs	r2, #0
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003710:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003714:	f7fc fd32 	bl	800017c <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	020b      	lsls	r3, r1, #8
 800372a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800372e:	0202      	lsls	r2, r0, #8
 8003730:	6979      	ldr	r1, [r7, #20]
 8003732:	6849      	ldr	r1, [r1, #4]
 8003734:	0849      	lsrs	r1, r1, #1
 8003736:	2000      	movs	r0, #0
 8003738:	460c      	mov	r4, r1
 800373a:	4605      	mov	r5, r0
 800373c:	eb12 0804 	adds.w	r8, r2, r4
 8003740:	eb43 0905 	adc.w	r9, r3, r5
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	469a      	mov	sl, r3
 800374c:	4693      	mov	fp, r2
 800374e:	4652      	mov	r2, sl
 8003750:	465b      	mov	r3, fp
 8003752:	4640      	mov	r0, r8
 8003754:	4649      	mov	r1, r9
 8003756:	f7fc fd11 	bl	800017c <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4613      	mov	r3, r2
 8003760:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003768:	d308      	bcc.n	800377c <UART_SetConfig+0x288>
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003770:	d204      	bcs.n	800377c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	e0c9      	b.n	8003910 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003782:	e0c5      	b.n	8003910 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378c:	d16e      	bne.n	800386c <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800378e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003792:	3b01      	subs	r3, #1
 8003794:	2b07      	cmp	r3, #7
 8003796:	d82d      	bhi.n	80037f4 <UART_SetConfig+0x300>
 8003798:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <UART_SetConfig+0x2ac>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037c1 	.word	0x080037c1
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037f5 	.word	0x080037f5
 80037ac:	080037cf 	.word	0x080037cf
 80037b0:	080037f5 	.word	0x080037f5
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	080037f5 	.word	0x080037f5
 80037bc:	080037d7 	.word	0x080037d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff f928 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80037c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037c6:	e01b      	b.n	8003800 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <UART_SetConfig+0x2f8>)
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037cc:	e018      	b.n	8003800 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7ff f889 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80037d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037d4:	e014      	b.n	8003800 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037dc:	e010      	b.n	8003800 <UART_SetConfig+0x30c>
 80037de:	bf00      	nop
 80037e0:	cfff69f3 	.word	0xcfff69f3
 80037e4:	40008000 	.word	0x40008000
 80037e8:	40013800 	.word	0x40013800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	080045e4 	.word	0x080045e4
      default:
        pclk = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 8084 	beq.w	8003910 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	4a4b      	ldr	r2, [pc, #300]	; (800393c <UART_SetConfig+0x448>)
 800380e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003812:	461a      	mov	r2, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	fbb3 f3f2 	udiv	r3, r3, r2
 800381a:	005a      	lsls	r2, r3, #1
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	441a      	add	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	2b0f      	cmp	r3, #15
 8003834:	d916      	bls.n	8003864 <UART_SetConfig+0x370>
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d212      	bcs.n	8003864 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	b29b      	uxth	r3, r3
 8003842:	f023 030f 	bic.w	r3, r3, #15
 8003846:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	b29a      	uxth	r2, r3
 8003854:	8bfb      	ldrh	r3, [r7, #30]
 8003856:	4313      	orrs	r3, r2
 8003858:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	8bfa      	ldrh	r2, [r7, #30]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	e055      	b.n	8003910 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800386a:	e051      	b.n	8003910 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800386c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003870:	3b01      	subs	r3, #1
 8003872:	2b07      	cmp	r3, #7
 8003874:	d821      	bhi.n	80038ba <UART_SetConfig+0x3c6>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <UART_SetConfig+0x388>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	0800389d 	.word	0x0800389d
 8003880:	080038a5 	.word	0x080038a5
 8003884:	080038bb 	.word	0x080038bb
 8003888:	080038ab 	.word	0x080038ab
 800388c:	080038bb 	.word	0x080038bb
 8003890:	080038bb 	.word	0x080038bb
 8003894:	080038bb 	.word	0x080038bb
 8003898:	080038b3 	.word	0x080038b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7ff f8ba 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038a2:	e010      	b.n	80038c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a4:	4b26      	ldr	r3, [pc, #152]	; (8003940 <UART_SetConfig+0x44c>)
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038a8:	e00d      	b.n	80038c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038aa:	f7ff f81b 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80038ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038b0:	e009      	b.n	80038c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038b8:	e005      	b.n	80038c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038c4:	bf00      	nop
    }

    if (pclk != 0U)
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d021      	beq.n	8003910 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	4a1a      	ldr	r2, [pc, #104]	; (800393c <UART_SetConfig+0x448>)
 80038d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	fbb3 f2f2 	udiv	r2, r3, r2
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	441a      	add	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d908      	bls.n	800390a <UART_SetConfig+0x416>
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d204      	bcs.n	800390a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e002      	b.n	8003910 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2201      	movs	r2, #1
 8003914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2201      	movs	r2, #1
 800391c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2200      	movs	r2, #0
 8003924:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800392c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800393a:	bf00      	nop
 800393c:	080045e4 	.word	0x080045e4
 8003940:	00f42400 	.word	0x00f42400

08003944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a42:	d10a      	bne.n	8003a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a98:	f7fd f8e0 	bl	8000c5c <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d10e      	bne.n	8003aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f82f 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e025      	b.n	8003b16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d10e      	bne.n	8003af6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f819 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e00f      	b.n	8003b16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b09c      	sub	sp, #112	; 0x70
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	e0a9      	b.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	f000 80a5 	beq.w	8003c84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fd f88f 	bl	8000c5c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d140      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b64:	667b      	str	r3, [r7, #100]	; 0x64
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e6      	bne.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ba2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ba4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e069      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d051      	beq.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d149      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c4c:	623a      	str	r2, [r7, #32]
 8003c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	69f9      	ldr	r1, [r7, #28]
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e010      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	f43f af46 	beq.w	8003b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3770      	adds	r7, #112	; 0x70
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b096      	sub	sp, #88	; 0x58
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2222      	movs	r2, #34	; 0x22
 8003cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d02c      	beq.n	8003d3e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce8:	4a40      	ldr	r2, [pc, #256]	; (8003dec <UART_Start_Receive_DMA+0x13c>)
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf0:	4a3f      	ldr	r2, [pc, #252]	; (8003df0 <UART_Start_Receive_DMA+0x140>)
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf8:	4a3e      	ldr	r2, [pc, #248]	; (8003df4 <UART_Start_Receive_DMA+0x144>)
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d00:	2200      	movs	r2, #0
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	4619      	mov	r1, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	461a      	mov	r2, r3
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	f7fd f970 	bl	8000ffc <HAL_DMA_Start_IT>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2210      	movs	r2, #16
 8003d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e051      	b.n	8003de2 <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e6      	bne.n	8003d46 <UART_Start_Receive_DMA+0x96>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d98:	637a      	str	r2, [r7, #52]	; 0x34
 8003d9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_Start_Receive_DMA+0xc8>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dcc:	623a      	str	r2, [r7, #32]
 8003dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e5      	bne.n	8003dac <UART_Start_Receive_DMA+0xfc>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3758      	adds	r7, #88	; 0x58
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	08003ffd 	.word	0x08003ffd
 8003df0:	08004123 	.word	0x08004123
 8003df4:	0800415b 	.word	0x0800415b

08003df8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b08f      	sub	sp, #60	; 0x3c
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e6      	bne.n	8003e00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e48:	633b      	str	r3, [r7, #48]	; 0x30
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e52:	61ba      	str	r2, [r7, #24]
 8003e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6979      	ldr	r1, [r7, #20]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e5      	bne.n	8003e32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003e6e:	bf00      	nop
 8003e70:	373c      	adds	r7, #60	; 0x3c
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b095      	sub	sp, #84	; 0x54
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e6      	bne.n	8003e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e3      	bne.n	8003eb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d118      	bne.n	8003f26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f023 0310 	bic.w	r3, r3, #16
 8003f08:	647b      	str	r3, [r7, #68]	; 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6979      	ldr	r1, [r7, #20]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003f3a:	bf00      	nop
 8003f3c:	3754      	adds	r7, #84	; 0x54
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b090      	sub	sp, #64	; 0x40
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d137      	bne.n	8003fd2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e5      	bne.n	8003f6a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e6      	bne.n	8003f9e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fd0:	e002      	b.n	8003fd8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003fd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fd4:	f7fc fbeb 	bl	80007ae <HAL_UART_TxCpltCallback>
}
 8003fd8:	bf00      	nop
 8003fda:	3740      	adds	r7, #64	; 0x40
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff fa4a 	bl	8003488 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b09c      	sub	sp, #112	; 0x70
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d171      	bne.n	80040fc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	2200      	movs	r2, #0
 800401c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800402e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	66bb      	str	r3, [r7, #104]	; 0x68
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800403e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004040:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800404c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	667b      	str	r3, [r7, #100]	; 0x64
 800406a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004072:	647a      	str	r2, [r7, #68]	; 0x44
 8004074:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	623b      	str	r3, [r7, #32]
   return(result);
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040a6:	633a      	str	r2, [r7, #48]	; 0x30
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d118      	bne.n	80040fc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	69b9      	ldr	r1, [r7, #24]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	617b      	str	r3, [r7, #20]
   return(result);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800410a:	4619      	mov	r1, r3
 800410c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800410e:	f7ff f9cf 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004112:	e002      	b.n	800411a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004114:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004116:	f7fc fb54 	bl	80007c2 <HAL_UART_RxCpltCallback>
}
 800411a:	bf00      	nop
 800411c:	3770      	adds	r7, #112	; 0x70
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d109      	bne.n	800414c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	b29b      	uxth	r3, r3
 8004142:	4619      	mov	r1, r3
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff f9b3 	bl	80034b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800414a:	e002      	b.n	8004152 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff f9a5 	bl	800349c <HAL_UART_RxHalfCpltCallback>
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004166:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d109      	bne.n	800419a <UART_DMAError+0x40>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b21      	cmp	r3, #33	; 0x21
 800418a:	d106      	bne.n	800419a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2200      	movs	r2, #0
 8004190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004194:	6978      	ldr	r0, [r7, #20]
 8004196:	f7ff fe2f 	bl	8003df8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d109      	bne.n	80041bc <UART_DMAError+0x62>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b22      	cmp	r3, #34	; 0x22
 80041ac:	d106      	bne.n	80041bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fe5f 	bl	8003e7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c2:	f043 0210 	orr.w	r2, r3, #16
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041cc:	6978      	ldr	r0, [r7, #20]
 80041ce:	f7fc fb02 	bl	80007d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d2:	bf00      	nop
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7fc faec 	bl	80007d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60bb      	str	r3, [r7, #8]
   return(result);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6979      	ldr	r1, [r7, #20]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	613b      	str	r3, [r7, #16]
   return(result);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e6      	bne.n	800420e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc faad 	bl	80007ae <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004254:	bf00      	nop
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UARTEx_DisableFifoMode+0x16>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e027      	b.n	80042fe <HAL_UARTEx_DisableFifoMode+0x66>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80042dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800431e:	2302      	movs	r3, #2
 8004320:	e02d      	b.n	800437e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2224      	movs	r2, #36	; 0x24
 800432e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0201 	bic.w	r2, r2, #1
 8004348:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f850 	bl	8004404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800439a:	2302      	movs	r3, #2
 800439c:	e02d      	b.n	80043fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f812 	bl	8004404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004424:	e031      	b.n	800448a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004426:	2308      	movs	r3, #8
 8004428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800442a:	2308      	movs	r3, #8
 800442c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	0e5b      	lsrs	r3, r3, #25
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	0f5b      	lsrs	r3, r3, #29
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800444e:	7bbb      	ldrb	r3, [r7, #14]
 8004450:	7b3a      	ldrb	r2, [r7, #12]
 8004452:	4911      	ldr	r1, [pc, #68]	; (8004498 <UARTEx_SetNbDataToProcess+0x94>)
 8004454:	5c8a      	ldrb	r2, [r1, r2]
 8004456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800445a:	7b3a      	ldrb	r2, [r7, #12]
 800445c:	490f      	ldr	r1, [pc, #60]	; (800449c <UARTEx_SetNbDataToProcess+0x98>)
 800445e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004460:	fb93 f3f2 	sdiv	r3, r3, r2
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	7b7a      	ldrb	r2, [r7, #13]
 8004470:	4909      	ldr	r1, [pc, #36]	; (8004498 <UARTEx_SetNbDataToProcess+0x94>)
 8004472:	5c8a      	ldrb	r2, [r1, r2]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004478:	7b7a      	ldrb	r2, [r7, #13]
 800447a:	4908      	ldr	r1, [pc, #32]	; (800449c <UARTEx_SetNbDataToProcess+0x98>)
 800447c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800447e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	080045fc 	.word	0x080045fc
 800449c:	08004604 	.word	0x08004604

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4d0d      	ldr	r5, [pc, #52]	; (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2600      	movs	r6, #0
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4d0b      	ldr	r5, [pc, #44]	; (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	; (80044e4 <__libc_init_array+0x44>)
 80044b4:	f000 f820 	bl	80044f8 <_init>
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2600      	movs	r6, #0
 80044be:	42a6      	cmp	r6, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c8:	4798      	blx	r3
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d2:	4798      	blx	r3
 80044d4:	3601      	adds	r6, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	08004614 	.word	0x08004614
 80044dc:	08004614 	.word	0x08004614
 80044e0:	08004614 	.word	0x08004614
 80044e4:	08004618 	.word	0x08004618

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
