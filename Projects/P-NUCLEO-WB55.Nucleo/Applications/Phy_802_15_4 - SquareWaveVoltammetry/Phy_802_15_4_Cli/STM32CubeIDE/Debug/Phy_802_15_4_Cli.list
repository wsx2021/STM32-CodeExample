
Phy_802_15_4_Cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c06c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      0000007c  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b84  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800cdac  0800cdac  0001cdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800cdb4  0800cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000b4  20000008  0800cdbc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 HSE_TUNING_INFO_REQUEST 00000004  200000bc  0800ce70  000200bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200000c0  0800ce74  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00005384  200000d4  0800ce85  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20005458  0800ce85  00025458  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000000b4  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       0000191f  200300dc  200300dc  00030000  2**2
                  ALLOC
 16 .debug_line   000240a2  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0001f64b  00000000  00000000  000441a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000533f  00000000  00000000  000637ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002148  00000000  00000000  00068b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f18c0  00000000  00000000  0006ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00001f18  00000000  00000000  0015c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002aad0  00000000  00000000  0015e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  00188f20  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000924c  00000000  00000000  00188f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000d4 	.word	0x200000d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c194 	.word	0x0800c194

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000d8 	.word	0x200000d8
 800017c:	0800c194 	.word	0x0800c194

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b974 	b.w	8000550 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	4604      	mov	r4, r0
 8000288:	468e      	mov	lr, r1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14d      	bne.n	800032a <__udivmoddi4+0xaa>
 800028e:	428a      	cmp	r2, r1
 8000290:	4694      	mov	ip, r2
 8000292:	d969      	bls.n	8000368 <__udivmoddi4+0xe8>
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	b152      	cbz	r2, 80002b0 <__udivmoddi4+0x30>
 800029a:	fa01 f302 	lsl.w	r3, r1, r2
 800029e:	f1c2 0120 	rsb	r1, r2, #32
 80002a2:	fa20 f101 	lsr.w	r1, r0, r1
 80002a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002aa:	ea41 0e03 	orr.w	lr, r1, r3
 80002ae:	4094      	lsls	r4, r2
 80002b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002b4:	0c21      	lsrs	r1, r4, #16
 80002b6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ba:	fa1f f78c 	uxth.w	r7, ip
 80002be:	fb08 e316 	mls	r3, r8, r6, lr
 80002c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002c6:	fb06 f107 	mul.w	r1, r6, r7
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 811f 	bcs.w	8000518 <__udivmoddi4+0x298>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 811c 	bls.w	8000518 <__udivmoddi4+0x298>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 f707 	mul.w	r7, r0, r7
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x92>
 80002fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000300:	f100 33ff 	add.w	r3, r0, #4294967295
 8000304:	f080 810a 	bcs.w	800051c <__udivmoddi4+0x29c>
 8000308:	42a7      	cmp	r7, r4
 800030a:	f240 8107 	bls.w	800051c <__udivmoddi4+0x29c>
 800030e:	4464      	add	r4, ip
 8000310:	3802      	subs	r0, #2
 8000312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000316:	1be4      	subs	r4, r4, r7
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa4>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xc2>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80ef 	beq.w	8000512 <__udivmoddi4+0x292>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x160>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd4>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80f9 	bhi.w	8000546 <__udivmoddi4+0x2c6>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	469e      	mov	lr, r3
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa4>
 8000362:	e9c5 4e00 	strd	r4, lr, [r5]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa4>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xec>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 8092 	bne.w	800049a <__udivmoddi4+0x21a>
 8000376:	eba1 010c 	sub.w	r1, r1, ip
 800037a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	2601      	movs	r6, #1
 8000384:	0c20      	lsrs	r0, r4, #16
 8000386:	fbb1 f3f7 	udiv	r3, r1, r7
 800038a:	fb07 1113 	mls	r1, r7, r3, r1
 800038e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000392:	fb0e f003 	mul.w	r0, lr, r3
 8000396:	4288      	cmp	r0, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x12c>
 800039a:	eb1c 0101 	adds.w	r1, ip, r1
 800039e:	f103 38ff 	add.w	r8, r3, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x12a>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f200 80cb 	bhi.w	8000540 <__udivmoddi4+0x2c0>
 80003aa:	4643      	mov	r3, r8
 80003ac:	1a09      	subs	r1, r1, r0
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003b4:	fb07 1110 	mls	r1, r7, r0, r1
 80003b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003bc:	fb0e fe00 	mul.w	lr, lr, r0
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x156>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003cc:	d202      	bcs.n	80003d4 <__udivmoddi4+0x154>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f200 80bb 	bhi.w	800054a <__udivmoddi4+0x2ca>
 80003d4:	4608      	mov	r0, r1
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003de:	e79c      	b.n	800031a <__udivmoddi4+0x9a>
 80003e0:	f1c6 0720 	rsb	r7, r6, #32
 80003e4:	40b3      	lsls	r3, r6
 80003e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ee:	fa20 f407 	lsr.w	r4, r0, r7
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	431c      	orrs	r4, r3
 80003f8:	40f9      	lsrs	r1, r7
 80003fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000402:	fbb1 f8f9 	udiv	r8, r1, r9
 8000406:	0c20      	lsrs	r0, r4, #16
 8000408:	fa1f fe8c 	uxth.w	lr, ip
 800040c:	fb09 1118 	mls	r1, r9, r8, r1
 8000410:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000414:	fb08 f00e 	mul.w	r0, r8, lr
 8000418:	4288      	cmp	r0, r1
 800041a:	fa02 f206 	lsl.w	r2, r2, r6
 800041e:	d90b      	bls.n	8000438 <__udivmoddi4+0x1b8>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f108 3aff 	add.w	sl, r8, #4294967295
 8000428:	f080 8088 	bcs.w	800053c <__udivmoddi4+0x2bc>
 800042c:	4288      	cmp	r0, r1
 800042e:	f240 8085 	bls.w	800053c <__udivmoddi4+0x2bc>
 8000432:	f1a8 0802 	sub.w	r8, r8, #2
 8000436:	4461      	add	r1, ip
 8000438:	1a09      	subs	r1, r1, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000440:	fb09 1110 	mls	r1, r9, r0, r1
 8000444:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	458e      	cmp	lr, r1
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x1e2>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f100 34ff 	add.w	r4, r0, #4294967295
 8000458:	d26c      	bcs.n	8000534 <__udivmoddi4+0x2b4>
 800045a:	458e      	cmp	lr, r1
 800045c:	d96a      	bls.n	8000534 <__udivmoddi4+0x2b4>
 800045e:	3802      	subs	r0, #2
 8000460:	4461      	add	r1, ip
 8000462:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000466:	fba0 9402 	umull	r9, r4, r0, r2
 800046a:	eba1 010e 	sub.w	r1, r1, lr
 800046e:	42a1      	cmp	r1, r4
 8000470:	46c8      	mov	r8, r9
 8000472:	46a6      	mov	lr, r4
 8000474:	d356      	bcc.n	8000524 <__udivmoddi4+0x2a4>
 8000476:	d053      	beq.n	8000520 <__udivmoddi4+0x2a0>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x212>
 800047a:	ebb3 0208 	subs.w	r2, r3, r8
 800047e:	eb61 010e 	sbc.w	r1, r1, lr
 8000482:	fa01 f707 	lsl.w	r7, r1, r7
 8000486:	fa22 f306 	lsr.w	r3, r2, r6
 800048a:	40f1      	lsrs	r1, r6
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	40d8      	lsrs	r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa21 f303 	lsr.w	r3, r1, r3
 80004a8:	4091      	lsls	r1, r2
 80004aa:	4301      	orrs	r1, r0
 80004ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b0:	fa1f fe8c 	uxth.w	lr, ip
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3610 	mls	r6, r7, r0, r3
 80004bc:	0c0b      	lsrs	r3, r1, #16
 80004be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004c2:	fb00 f60e 	mul.w	r6, r0, lr
 80004c6:	429e      	cmp	r6, r3
 80004c8:	fa04 f402 	lsl.w	r4, r4, r2
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x260>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d6:	d22f      	bcs.n	8000538 <__udivmoddi4+0x2b8>
 80004d8:	429e      	cmp	r6, r3
 80004da:	d92d      	bls.n	8000538 <__udivmoddi4+0x2b8>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1b9b      	subs	r3, r3, r6
 80004e2:	b289      	uxth	r1, r1
 80004e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb06 f30e 	mul.w	r3, r6, lr
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x28a>
 80004f8:	eb1c 0101 	adds.w	r1, ip, r1
 80004fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000500:	d216      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 8000502:	428b      	cmp	r3, r1
 8000504:	d914      	bls.n	8000530 <__udivmoddi4+0x2b0>
 8000506:	3e02      	subs	r6, #2
 8000508:	4461      	add	r1, ip
 800050a:	1ac9      	subs	r1, r1, r3
 800050c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000510:	e738      	b.n	8000384 <__udivmoddi4+0x104>
 8000512:	462e      	mov	r6, r5
 8000514:	4628      	mov	r0, r5
 8000516:	e705      	b.n	8000324 <__udivmoddi4+0xa4>
 8000518:	4606      	mov	r6, r0
 800051a:	e6e3      	b.n	80002e4 <__udivmoddi4+0x64>
 800051c:	4618      	mov	r0, r3
 800051e:	e6f8      	b.n	8000312 <__udivmoddi4+0x92>
 8000520:	454b      	cmp	r3, r9
 8000522:	d2a9      	bcs.n	8000478 <__udivmoddi4+0x1f8>
 8000524:	ebb9 0802 	subs.w	r8, r9, r2
 8000528:	eb64 0e0c 	sbc.w	lr, r4, ip
 800052c:	3801      	subs	r0, #1
 800052e:	e7a3      	b.n	8000478 <__udivmoddi4+0x1f8>
 8000530:	4646      	mov	r6, r8
 8000532:	e7ea      	b.n	800050a <__udivmoddi4+0x28a>
 8000534:	4620      	mov	r0, r4
 8000536:	e794      	b.n	8000462 <__udivmoddi4+0x1e2>
 8000538:	4640      	mov	r0, r8
 800053a:	e7d1      	b.n	80004e0 <__udivmoddi4+0x260>
 800053c:	46d0      	mov	r8, sl
 800053e:	e77b      	b.n	8000438 <__udivmoddi4+0x1b8>
 8000540:	3b02      	subs	r3, #2
 8000542:	4461      	add	r1, ip
 8000544:	e732      	b.n	80003ac <__udivmoddi4+0x12c>
 8000546:	4630      	mov	r0, r6
 8000548:	e709      	b.n	800035e <__udivmoddi4+0xde>
 800054a:	4464      	add	r4, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e742      	b.n	80003d6 <__udivmoddi4+0x156>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <us_delay_32m>:

                .global us_delay_32m
                .section .text.us_delay_32m

us_delay_32m:
                nop
 8000554:	46c0      	nop			; (mov r8, r8)
                nop
 8000556:	46c0      	nop			; (mov r8, r8)
                nop
 8000558:	46c0      	nop			; (mov r8, r8)
                nop
 800055a:	46c0      	nop			; (mov r8, r8)
                nop
 800055c:	46c0      	nop			; (mov r8, r8)
                nop
 800055e:	46c0      	nop			; (mov r8, r8)
                nop
 8000560:	46c0      	nop			; (mov r8, r8)
                nop
 8000562:	46c0      	nop			; (mov r8, r8)
                nop
 8000564:	46c0      	nop			; (mov r8, r8)
                nop
 8000566:	46c0      	nop			; (mov r8, r8)
                nop
 8000568:	46c0      	nop			; (mov r8, r8)
                nop
 800056a:	46c0      	nop			; (mov r8, r8)
                nop
 800056c:	46c0      	nop			; (mov r8, r8)
                nop
 800056e:	46c0      	nop			; (mov r8, r8)
                nop
 8000570:	46c0      	nop			; (mov r8, r8)
                nop
 8000572:	46c0      	nop			; (mov r8, r8)
                nop
 8000574:	46c0      	nop			; (mov r8, r8)
                nop
 8000576:	46c0      	nop			; (mov r8, r8)
                nop
 8000578:	46c0      	nop			; (mov r8, r8)
                nop
 800057a:	46c0      	nop			; (mov r8, r8)
                nop
 800057c:	46c0      	nop			; (mov r8, r8)
                nop
 800057e:	46c0      	nop			; (mov r8, r8)
                nop
 8000580:	46c0      	nop			; (mov r8, r8)
                nop
 8000582:	46c0      	nop			; (mov r8, r8)
                nop
 8000584:	46c0      	nop			; (mov r8, r8)
                nop
 8000586:	46c0      	nop			; (mov r8, r8)
                nop
 8000588:	46c0      	nop			; (mov r8, r8)
                nop
 800058a:	46c0      	nop			; (mov r8, r8)
                SUB  R0, R0, #1
 800058c:	3801      	subs	r0, #1
                BHI   us_delay_32m
 800058e:	d8e1      	bhi.n	8000554 <us_delay_32m>
                BX    LR
 8000590:	4770      	bx	lr

08000592 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  bx lr
 800059e:	4770      	bx	lr

080005a0 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80005a0:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80005a2:	3004      	adds	r0, #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80005a4:	4288      	cmp	r0, r1
  bcc FillZerobss
 80005a6:	d3fb      	bcc.n	80005a0 <FillZerobss>
  bx lr
 80005a8:	4770      	bx	lr
	...

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b0:	f003 fabe 	bl	8003b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <LoopForever+0x8>)
 80005b6:	490c      	ldr	r1, [pc, #48]	; (80005e8 <LoopForever+0xc>)
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <LoopForever+0x10>)
 80005ba:	2300      	movs	r3, #0
 80005bc:	f7ff ffec 	bl	8000598 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopForever+0x14>)
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <LoopForever+0x18>)
 80005c4:	2300      	movs	r3, #0
 80005c6:	f7ff ffed 	bl	80005a4 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <LoopForever+0x1c>)
 80005cc:	490b      	ldr	r1, [pc, #44]	; (80005fc <LoopForever+0x20>)
 80005ce:	2300      	movs	r3, #0
 80005d0:	f7ff ffe8 	bl	80005a4 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005d4:	f00a fa52 	bl	800aa7c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80005d8:	f002 f838 	bl	800264c <main>

080005dc <LoopForever>:

LoopForever:
  b LoopForever
 80005dc:	e7fe      	b.n	80005dc <LoopForever>
 80005de:	0000      	.short	0x0000
  ldr   r0, =_estack
 80005e0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80005e4:	20000008 	.word	0x20000008
 80005e8:	200000bc 	.word	0x200000bc
 80005ec:	0800cdbc 	.word	0x0800cdbc
  INIT_BSS _sbss, _ebss
 80005f0:	200000d4 	.word	0x200000d4
 80005f4:	20005458 	.word	0x20005458
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80005f8:	200300dc 	.word	0x200300dc
 80005fc:	200319fb 	.word	0x200319fb

08000600 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_IRQHandler>
	...

08000604 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <LL_EXTI_EnableIT_32_63+0x24>)
 800060e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <LL_EXTI_EnableIT_32_63+0x24>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	58000800 	.word	0x58000800

0800062c <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8000636:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800063a:	4905      	ldr	r1, [pc, #20]	; (8000650 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4313      	orrs	r3, r2
 8000640:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	58000800 	.word	0x58000800

08000654 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800065c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	608b      	str	r3, [r1, #8]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000680:	f000 f832 	bl	80006e8 <SystemPower_Config>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8000684:	f000 f80c 	bl	80006a0 <Init_Debug>

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000688:	2101      	movs	r1, #1
 800068a:	2001      	movs	r0, #1
 800068c:	f009 ff98 	bl	800a5c0 <UTIL_LPM_SetOffMode>
  Led_Init();
 8000690:	f000 f8cc 	bl	800082c <Led_Init>
  Button_Init();
 8000694:	f000 f8d7 	bl	8000846 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers and start CPU2 which will send back a ready event to CPU1 */
 8000698:	f000 f830 	bl	80006fc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800069c:	bf00      	nop
}
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80006a4:	f003 fb0c 	bl	8003cc0 <HAL_DBGMCU_EnableDBGSleepMode>

  /* Enable debugger EXTI lines */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80006a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006ac:	f7ff ffaa 	bl	8000604 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80006b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006b4:	f7ff ffba 	bl	800062c <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80006b8:	f008 fd7a 	bl	80091b0 <DbgTraceInit>
#endif

  /* Send a first trace to debug trace port to see that M4 is alive */
  APP_DBG("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <Init_Debug+0x40>)
 80006be:	2101      	movs	r1, #1
 80006c0:	2000      	movs	r0, #0
 80006c2:	f002 ffd9 	bl	8003678 <logApplication>
#ifdef STM32WB35xx
  APP_DBG("traces init done on Little DORY M4");
#else
  APP_DBG("traces init done on DORY M4");
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <Init_Debug+0x44>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	2000      	movs	r0, #0
 80006cc:	f002 ffd4 	bl	8003678 <logApplication>
#endif
  APP_DBG("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <Init_Debug+0x40>)
 80006d2:	2101      	movs	r1, #1
 80006d4:	2000      	movs	r0, #0
 80006d6:	f002 ffcf 	bl	8003678 <logApplication>

  return;
 80006da:	bf00      	nop
}
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	0800c228 	.word	0x0800c228
 80006e4:	0800c264 	.word	0x0800c264

080006e8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006f0:	f7ff ffb0 	bl	8000654 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 80006f4:	f009 ff22 	bl	800a53c <UTIL_LPM_Init>

  return;
 80006f8:	bf00      	nop
}
 80006fa:	bd80      	pop	{r7, pc}

080006fc <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000702:	f009 fce9 	bl	800a0d8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <appe_Tl_Init+0x50>)
 8000708:	2100      	movs	r1, #0
 800070a:	2004      	movs	r0, #4
 800070c:	f00a f8a8 	bl	800a860 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <appe_Tl_Init+0x54>)
 8000712:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <appe_Tl_Init+0x58>)
 8000716:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	480e      	ldr	r0, [pc, #56]	; (8000758 <appe_Tl_Init+0x5c>)
 800071e:	f008 fee1 	bl	80094e4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <appe_Tl_Init+0x60>)
 8000728:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <appe_Tl_Init+0x64>)
 800072c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800072e:	f241 43f0 	movw	r3, #5360	; 0x14f0
 8000732:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4618      	mov	r0, r3
 800073a:	f009 fe09 	bl	800a350 <TL_MM_Init>

  TL_Enable();
 800073e:	f009 fcc4 	bl	800a0ca <TL_Enable>

  return;
 8000742:	bf00      	nop
}
 8000744:	3720      	adds	r7, #32
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	0800951d 	.word	0x0800951d
 8000750:	200315cc 	.word	0x200315cc
 8000754:	08000765 	.word	0x08000765
 8000758:	0800077b 	.word	0x0800077b
 800075c:	200316d8 	.word	0x200316d8
 8000760:	200300dc 	.word	0x200300dc

08000764 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800076e:	bf00      	nop
}
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	330b      	adds	r3, #11
 8000788:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b29b      	uxth	r3, r3
 8000790:	f5b3 4f12 	cmp.w	r3, #37376	; 0x9200
 8000794:	d004      	beq.n	80007a0 <APPE_SysUserEvtRx+0x26>
 8000796:	f249 2201 	movw	r2, #37377	; 0x9201
 800079a:	4293      	cmp	r3, r2
 800079c:	d007      	beq.n	80007ae <APPE_SysUserEvtRx+0x34>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 800079e:	e00d      	b.n	80007bc <APPE_SysUserEvtRx+0x42>
         if (p_sys_event->payload[0] == WIRELESS_FW_RUNNING)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	789b      	ldrb	r3, [r3, #2]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <APPE_SysUserEvtRx+0x40>
           APPE_SysEvtReadyProcessing();
 80007a8:	f000 f834 	bl	8000814 <APPE_SysEvtReadyProcessing>
         break;
 80007ac:	e005      	b.n	80007ba <APPE_SysUserEvtRx+0x40>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f806 	bl	80007c4 <APPE_SysEvtError>
         break;
 80007b8:	e000      	b.n	80007bc <APPE_SysUserEvtRx+0x42>
         break;
 80007ba:	bf00      	nop
  }
  return;
 80007bc:	bf00      	nop
}
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b7d      	cmp	r3, #125	; 0x7d
 80007d2:	d002      	beq.n	80007da <APPE_SysEvtError+0x16>
 80007d4:	2b7e      	cmp	r3, #126	; 0x7e
 80007d6:	d006      	beq.n	80007e6 <APPE_SysEvtError+0x22>
 80007d8:	e00b      	b.n	80007f2 <APPE_SysEvtError+0x2e>
  {
  case ERR_THREAD_LLD_FATAL_ERROR:
       APP_DBG("** ERR_LLD_TESTS : LLD_FATAL_ERROR \n");
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <APPE_SysEvtError+0x44>)
 80007dc:	2101      	movs	r1, #1
 80007de:	2000      	movs	r0, #0
 80007e0:	f002 ff4a 	bl	8003678 <logApplication>
       break;
 80007e4:	e00c      	b.n	8000800 <APPE_SysEvtError+0x3c>
  case ERR_THREAD_UNKNOWN_CMD:
       APP_DBG("** ERR_LLD_TESTS : UNKNOWN_CMD \n");
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <APPE_SysEvtError+0x48>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	2000      	movs	r0, #0
 80007ec:	f002 ff44 	bl	8003678 <logApplication>
       break;
 80007f0:	e006      	b.n	8000800 <APPE_SysEvtError+0x3c>
  default:
       APP_DBG("** ERR_LLD_TESTS : ErroCode=%d \n",ErrorCode);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <APPE_SysEvtError+0x4c>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2000      	movs	r0, #0
 80007fa:	f002 ff3d 	bl	8003678 <logApplication>
       break;
 80007fe:	bf00      	nop
  }
  return;
 8000800:	bf00      	nop
}
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	0800c280 	.word	0x0800c280
 800080c:	0800c2a8 	.word	0x0800c2a8
 8000810:	0800c2cc 	.word	0x0800c2cc

08000814 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8000818:	f009 fe0e 	bl	800a438 <TL_TRACES_Init>

  APP_LLDTESTS_Init();
 800081c:	f000 f8b2 	bl	8000984 <APP_LLDTESTS_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000820:	2100      	movs	r1, #0
 8000822:	2001      	movs	r0, #1
 8000824:	f009 fecc 	bl	800a5c0 <UTIL_LPM_SetOffMode>
  return;
 8000828:	bf00      	nop
}
 800082a:	bd80      	pop	{r7, pc}

0800082c <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /**
   * Leds Initialization
   */
#if (CFG_HW_LPUART1_ENABLED != 1) || ! defined (STM32WB35xx)
  // On Little DORY, LED_BLUE share the GPIO PB5 with LPUART
  BSP_LED_Init(LED_BLUE);
 8000830:	2000      	movs	r0, #0
 8000832:	f003 f885 	bl	8003940 <BSP_LED_Init>
  
#if (CFG_HW_EXTPA_ENABLED != 1)
  BSP_LED_Init(LED_GREEN);
#endif
  
  BSP_LED_Init(LED_RED);
 8000836:	2002      	movs	r0, #2
 8000838:	f003 f882 	bl	8003940 <BSP_LED_Init>
  BSP_LED_On(LED_RED);
 800083c:	2002      	movs	r0, #2
 800083e:	f003 f8b9 	bl	80039b4 <BSP_LED_On>
#endif
  
  return;
 8000842:	bf00      	nop
}
 8000844:	bd80      	pop	{r7, pc}

08000846 <Button_Init>:

static void Button_Init( void )
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800084a:	2101      	movs	r1, #1
 800084c:	2000      	movs	r0, #0
 800084e:	f003 f8ff 	bl	8003a50 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000852:	2101      	movs	r1, #1
 8000854:	2001      	movs	r0, #1
 8000856:	f003 f8fb 	bl	8003a50 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800085a:	2101      	movs	r1, #1
 800085c:	2002      	movs	r0, #2
 800085e:	f003 f8f7 	bl	8003a50 <BSP_PB_Init>
#endif
  
  return;
 8000862:	bf00      	nop
}
 8000864:	bd80      	pop	{r7, pc}

08000866 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 800086a:	f009 fed9 	bl	800a620 <UTIL_LPM_EnterLowPower>
#endif
  return;
 800086e:	bf00      	nop
}
 8000870:	bd80      	pop	{r7, pc}

08000872 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
  {
  default :
    /* default case */
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f009 ff04 	bl	800a68c <UTIL_SEQ_Run>
    break;
 8000884:	bf00      	nop
  }
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8000896:	2100      	movs	r1, #0
 8000898:	2004      	movs	r0, #4
 800089a:	f00a f803 	bl	800a8a4 <UTIL_SEQ_SetTask>
  return;
 800089e:	bf00      	nop
}
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f00a f824 	bl	800a8fc <UTIL_SEQ_SetEvt>
  return;
 80008b4:	bf00      	nop
}
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f00a f839 	bl	800a93c <UTIL_SEQ_WaitEvt>
  return;
 80008ca:	bf00      	nop
}
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	330b      	adds	r3, #11
 80008de:	1c99      	adds	r1, r3, #2
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7a9b      	ldrb	r3, [r3, #10]
 80008e4:	3b02      	subs	r3, #2
 80008e6:	461a      	mov	r2, r3
 80008e8:	2001      	movs	r0, #1
 80008ea:	f008 fc87 	bl	80091fc <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f009 fd6a 	bl	800a3c8 <TL_MM_EvtDone>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
#if (CFG_HW_LPUART1_ENABLED == 1)
  MX_LPUART1_UART_Init();
 8000900:	f002 f828 	bl	8002954 <MX_LPUART1_UART_Init>
  return;
 8000904:	bf00      	nop
#endif
#endif
}
 8000906:	bd80      	pop	{r7, pc}

08000908 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	460b      	mov	r3, r1
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000916:	897a      	ldrh	r2, [r7, #10]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68f9      	ldr	r1, [r7, #12]
 800091c:	2002      	movs	r0, #2
 800091e:	f001 fc9f 	bl	8002260 <HW_UART_Transmit_DMA>

  return;
 8000922:	bf00      	nop
}
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800093a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000946:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000952:	4313      	orrs	r3, r2
 8000954:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	cafecafe 	.word	0xcafecafe

08000968 <LL_RCC_HSE_GetCapacitorTuning>:
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->HSECR, RCC_HSECR_HSETUNE) >> RCC_HSECR_HSETUNE_Pos);
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000974:	0a1b      	lsrs	r3, r3, #8
 8000976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <APP_LLDTESTS_Init>:
/* USER CODE END PV */

/* Functions Definition ------------------------------------------------------*/

void APP_LLDTESTS_Init( void )
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b092      	sub	sp, #72	; 0x48
 8000988:	af00      	add	r7, sp, #0
  uint32_t devId = HAL_GetDEVID();
 800098a:	f003 f992 	bl	8003cb2 <HAL_GetDEVID>
 800098e:	4603      	mov	r3, r0
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t revId = HAL_GetREVID();
 8000992:	f003 f987 	bl	8003ca4 <HAL_GetREVID>
 8000996:	4603      	mov	r3, r0
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t  param[8];
  char     traceBuff[50];
  
  /* USER CODE BEGIN APP_LLDTESTS_INIT_1 */
  /* Do not allow stop mode before Thread is initialized */
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_LLDTESTS, UTIL_LPM_DISABLE);
 800099a:	2101      	movs	r1, #1
 800099c:	2002      	movs	r0, #2
 800099e:	f009 fddf 	bl	800a560 <UTIL_LPM_SetStopMode>
  /* USER CODE END APP_LLDTESTS_INIT_1 */

  SHCI_CmdStatus_t LldTestsInitStatus;
  
  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_LLDTESTS_CheckWirelessFirmwareInfo();
 80009a2:	f000 f927 	bl	8000bf4 <APP_LLDTESTS_CheckWirelessFirmwareInfo>
  
  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_LLDTESTS, UTIL_LPM_DISABLE);
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f009 fe09 	bl	800a5c0 <UTIL_LPM_SetOffMode>
  
  
  /* Init config buffer and call TL_LLDTESTS_Init */
  APP_LLDTESTS_Init_TL();
 80009ae:	f000 fc87 	bl	80012c0 <APP_LLDTESTS_Init_TL>
  
  /* Create a task to send CLI commands to M0 via IPCC */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_SEND_CLI_TO_M0, UTIL_SEQ_RFU, SendCliCmdToM0);
 80009b2:	4a4c      	ldr	r2, [pc, #304]	; (8000ae4 <APP_LLDTESTS_Init+0x160>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	2002      	movs	r0, #2
 80009b8:	f009 ff52 	bl	800a860 <UTIL_SEQ_RegTask>
  
  /* Create a task to process data received from UART and create CLI commands */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_PROCESS_UART_RX_BUFFER, UTIL_SEQ_RFU, uartRxBufferProcess);
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <APP_LLDTESTS_Init+0x164>)
 80009be:	2100      	movs	r1, #0
 80009c0:	2008      	movs	r0, #8
 80009c2:	f009 ff4d 	bl	800a860 <UTIL_SEQ_RegTask>
  
  /* Create tasks to process interrupt from/to UART to avoid locking UART during IT processing */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_PROCESS_UART_RX_IT, UTIL_SEQ_RFU, uartRxItProcess);
 80009c6:	4a49      	ldr	r2, [pc, #292]	; (8000aec <APP_LLDTESTS_Init+0x168>)
 80009c8:	2100      	movs	r1, #0
 80009ca:	2010      	movs	r0, #16
 80009cc:	f009 ff48 	bl	800a860 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_PROCESS_UART_TX_IT, UTIL_SEQ_RFU, uartTxItProcess);
 80009d0:	4a47      	ldr	r2, [pc, #284]	; (8000af0 <APP_LLDTESTS_Init+0x16c>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	2020      	movs	r0, #32
 80009d6:	f009 ff43 	bl	800a860 <UTIL_SEQ_RegTask>
  
  /* Create a task to manage commands from M0 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_CMD_FROM_M0_TO_M4, UTIL_SEQ_RFU, m0CmdProcess);
 80009da:	4a46      	ldr	r2, [pc, #280]	; (8000af4 <APP_LLDTESTS_Init+0x170>)
 80009dc:	2100      	movs	r1, #0
 80009de:	2001      	movs	r0, #1
 80009e0:	f009 ff3e 	bl	800a860 <UTIL_SEQ_RegTask>
  
  /* Configure UART for receiving CLI command from PC and sending CLI response or notifications to PC */
  txBusy = 0;
 80009e4:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <APP_LLDTESTS_Init+0x174>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
  rxCmdAllowed = 0;
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <APP_LLDTESTS_Init+0x178>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
  txBuffer[UART_TX_BUFFER_SIZE] = 0;
 80009f0:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <APP_LLDTESTS_Init+0x17c>)
 80009f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
  txBuffer_wrPtr = 0;
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <APP_LLDTESTS_Init+0x180>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  txBuffer_rdPtr = 0;
 8000a00:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <APP_LLDTESTS_Init+0x184>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
  rxBuffer_wrPtr = 0;
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <APP_LLDTESTS_Init+0x188>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
  rxBuffer_rdPtr = 0;
 8000a0c:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <APP_LLDTESTS_Init+0x18c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
  currentCommandPos = 0;
 8000a12:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <APP_LLDTESTS_Init+0x190>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
  commandHistoryIdx = 0;
 8000a18:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <APP_LLDTESTS_Init+0x194>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
  commandHistoryIdxSav = 0;
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <APP_LLDTESTS_Init+0x198>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
  APP_LLDTESTS_Init_UART_CLI();
 8000a24:	f000 f98a 	bl	8000d3c <APP_LLDTESTS_Init_UART_CLI>
  
  /* Send LLD tests CLI start information to CLI UART */
  uartTxBufferAdd("\r\n\n=================================\r\n");
 8000a28:	483d      	ldr	r0, [pc, #244]	; (8000b20 <APP_LLDTESTS_Init+0x19c>)
 8000a2a:	f000 fb51 	bl	80010d0 <uartTxBufferAdd>
#ifdef STM32WB35xx
  sprintf(traceBuff, "(STM32WB35)");
#elif STM32WB55xx
  sprintf(traceBuff, "(STM32WB55)");
 8000a2e:	463b      	mov	r3, r7
 8000a30:	493c      	ldr	r1, [pc, #240]	; (8000b24 <APP_LLDTESTS_Init+0x1a0>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f00a f8a8 	bl	800ab88 <siprintf>
#else
#error Unnknown target
#endif
  sprintf(traceBuff, "%s RF 802_15_4 LLDs test\r\n", strtok(traceBuff, "\0"));
 8000a38:	463b      	mov	r3, r7
 8000a3a:	493b      	ldr	r1, [pc, #236]	; (8000b28 <APP_LLDTESTS_Init+0x1a4>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f00a f8df 	bl	800ac00 <strtok>
 8000a42:	4602      	mov	r2, r0
 8000a44:	463b      	mov	r3, r7
 8000a46:	4939      	ldr	r1, [pc, #228]	; (8000b2c <APP_LLDTESTS_Init+0x1a8>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00a f89d 	bl	800ab88 <siprintf>
  uartTxBufferAdd(traceBuff);
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fb3d 	bl	80010d0 <uartTxBufferAdd>
  uartTxBufferAdd("=================================\r\n");
 8000a56:	4836      	ldr	r0, [pc, #216]	; (8000b30 <APP_LLDTESTS_Init+0x1ac>)
 8000a58:	f000 fb3a 	bl	80010d0 <uartTxBufferAdd>
  
#if (CFG_LPM_SUPPORTED == 1U)
  uartTxBufferAdd("Low-power manager is activated\r\n");
 8000a5c:	4835      	ldr	r0, [pc, #212]	; (8000b34 <APP_LLDTESTS_Init+0x1b0>)
 8000a5e:	f000 fb37 	bl	80010d0 <uartTxBufferAdd>
  // PLL_CFG register
  APP_DBG( "RCC_PLLCFGR (0x%08X) = 0x%08X", (uint32_t)&(RCC->PLLCFGR), RCC->PLLCFGR);
#endif
  
  /* Indicate end of M4 initialization */
  APP_DBG("Test appli initialized on M4, wait for M0 initialization");
 8000a62:	4a35      	ldr	r2, [pc, #212]	; (8000b38 <APP_LLDTESTS_Init+0x1b4>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2000      	movs	r0, #0
 8000a68:	f002 fe06 	bl	8003678 <logApplication>
 8000a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  
  /* Send CLI start cmd to M0 (with device and revision ID as parameters */
  memcpy(&param[0], &devId, 4 );
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8000a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  memcpy(&param[4], &revId, 4 );
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  LldTestsInitStatus = SHCI_C2_LLDTESTS_Init(8, param);
 8000a74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2008      	movs	r0, #8
 8000a7c:	f008 fc3e 	bl	80092fc <SHCI_C2_LLDTESTS_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if(LldTestsInitStatus != SHCI_Success)
 8000a86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <APP_LLDTESTS_Init+0x114>
    APP_DBG((char *)"!! ERROR during M0 init !!");
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <APP_LLDTESTS_Init+0x1b8>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	2000      	movs	r0, #0
 8000a94:	f002 fdf0 	bl	8003678 <logApplication>
  
  /* M0 init done, send first command to have M0 code info and thus, a first prompt will be printed automatically */
  /* Do not accept new command from UART until this one is managed */
  rxCmdAllowed = 0;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <APP_LLDTESTS_Init+0x178>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
  currentCommandPos = 4;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <APP_LLDTESTS_Init+0x190>)
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	601a      	str	r2, [r3, #0]
  currentCommand[0] = 'i';
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <APP_LLDTESTS_Init+0x1bc>)
 8000aa6:	2269      	movs	r2, #105	; 0x69
 8000aa8:	701a      	strb	r2, [r3, #0]
  currentCommand[1] = 'n';
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <APP_LLDTESTS_Init+0x1bc>)
 8000aac:	226e      	movs	r2, #110	; 0x6e
 8000aae:	705a      	strb	r2, [r3, #1]
  currentCommand[2] = 'f';
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <APP_LLDTESTS_Init+0x1bc>)
 8000ab2:	2266      	movs	r2, #102	; 0x66
 8000ab4:	709a      	strb	r2, [r3, #2]
  currentCommand[3] = 'o';
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <APP_LLDTESTS_Init+0x1bc>)
 8000ab8:	226f      	movs	r2, #111	; 0x6f
 8000aba:	70da      	strb	r2, [r3, #3]
  currentCommand[4] = 0;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <APP_LLDTESTS_Init+0x1bc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	711a      	strb	r2, [r3, #4]
  /* Set corresponding task to send this command to M0 */
  UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f009 feed 	bl	800a8a4 <UTIL_SEQ_SetTask>
  
  /* Activate UART RX buffer processing task to allow USER command coming from UART */
  UTIL_SEQ_SetTask(1U << CFG_TASK_PROCESS_UART_RX_BUFFER, CFG_SCH_PRIO_0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2008      	movs	r0, #8
 8000ace:	f009 fee9 	bl	800a8a4 <UTIL_SEQ_SetTask>
  
  /* USER CODE BEGIN APP_LLDTESTS_INIT_2 */
  /* Allow stop mode after Thread initialization*/
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_LLDTESTS, UTIL_LPM_ENABLE);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f009 fd43 	bl	800a560 <UTIL_LPM_SetStopMode>
  /* USER CODE END APP_LLDTESTS_INIT_2 */
}
 8000ada:	bf00      	nop
 8000adc:	3748      	adds	r7, #72	; 0x48
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08001271 	.word	0x08001271
 8000ae8:	08000e39 	.word	0x08000e39
 8000aec:	08000dc5 	.word	0x08000dc5
 8000af0:	0800123d 	.word	0x0800123d
 8000af4:	080012e9 	.word	0x080012e9
 8000af8:	200000f0 	.word	0x200000f0
 8000afc:	200000f1 	.word	0x200000f1
 8000b00:	200000f4 	.word	0x200000f4
 8000b04:	200010f8 	.word	0x200010f8
 8000b08:	200010fc 	.word	0x200010fc
 8000b0c:	20001508 	.word	0x20001508
 8000b10:	2000150c 	.word	0x2000150c
 8000b14:	20001910 	.word	0x20001910
 8000b18:	20004114 	.word	0x20004114
 8000b1c:	20004118 	.word	0x20004118
 8000b20:	0800c2f0 	.word	0x0800c2f0
 8000b24:	0800c318 	.word	0x0800c318
 8000b28:	0800c324 	.word	0x0800c324
 8000b2c:	0800c328 	.word	0x0800c328
 8000b30:	0800c344 	.word	0x0800c344
 8000b34:	0800c368 	.word	0x0800c368
 8000b38:	0800c38c 	.word	0x0800c38c
 8000b3c:	0800c3c8 	.word	0x0800c3c8
 8000b40:	20001510 	.word	0x20001510

08000b44 <APP_LLDTESTS_Error>:
  * @param  ErrId :
  * @param  ErrCode
  * @retval None
  */
void APP_LLDTESTS_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN APP_LLDTESTS_Error_1 */

  /* USER CODE END APP_LLDTESTS_Error_1 */
  switch(ErrId)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d013      	beq.n	8000b7c <APP_LLDTESTS_Error+0x38>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d815      	bhi.n	8000b86 <APP_LLDTESTS_Error+0x42>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <APP_LLDTESTS_Error+0x24>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d005      	beq.n	8000b72 <APP_LLDTESTS_Error+0x2e>
 8000b66:	e00e      	b.n	8000b86 <APP_LLDTESTS_Error+0x42>
  {
  case ERR_LLDTESTS_SET_STATE_CB :
    APP_LLDTESTS_TraceError("ERROR : ERR_LLDTESTS_SET_STATE_CB ",ErrCode);
 8000b68:	6839      	ldr	r1, [r7, #0]
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <APP_LLDTESTS_Error+0x54>)
 8000b6c:	f000 f81c 	bl	8000ba8 <APP_LLDTESTS_TraceError>
    break;
 8000b70:	e00e      	b.n	8000b90 <APP_LLDTESTS_Error+0x4c>
    
  case ERR_LLDTESTS_ERASE_PERSISTENT_INFO :
    APP_LLDTESTS_TraceError("ERROR : ERR_LLDTESTS_ERASE_PERSISTENT_INFO ",ErrCode);
 8000b72:	6839      	ldr	r1, [r7, #0]
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <APP_LLDTESTS_Error+0x58>)
 8000b76:	f000 f817 	bl	8000ba8 <APP_LLDTESTS_TraceError>
    break;
 8000b7a:	e009      	b.n	8000b90 <APP_LLDTESTS_Error+0x4c>
    
  case ERR_LLDTESTS_CHECK_WIRELESS :
    APP_LLDTESTS_TraceError("ERROR : ERR_LLDTESTS_CHECK_WIRELESS ",ErrCode);
 8000b7c:	6839      	ldr	r1, [r7, #0]
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <APP_LLDTESTS_Error+0x5c>)
 8000b80:	f000 f812 	bl	8000ba8 <APP_LLDTESTS_TraceError>
    break;
 8000b84:	e004      	b.n	8000b90 <APP_LLDTESTS_Error+0x4c>
  /* USER CODE BEGIN APP_LLDTESTS_Error_2 */
  
  /* USER CODE END APP_LLDTESTS_Error_2 */
    
  default :
    APP_LLDTESTS_TraceError("ERROR Unknown ", 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <APP_LLDTESTS_Error+0x60>)
 8000b8a:	f000 f80d 	bl	8000ba8 <APP_LLDTESTS_TraceError>
    break;
 8000b8e:	bf00      	nop
  }
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	0800c3e4 	.word	0x0800c3e4
 8000b9c:	0800c408 	.word	0x0800c408
 8000ba0:	0800c434 	.word	0x0800c434
 8000ba4:	0800c45c 	.word	0x0800c45c

08000ba8 <APP_LLDTESTS_TraceError>:
  * @param  pMess  : Message associated to the error.
  * @param  ErrCode: Error code associated to the module (OpenThread or other module if any)
  * @retval None
  */
static void APP_LLDTESTS_TraceError(const char * pMess, uint32_t ErrCode)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TRACE_ERROR */
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <APP_LLDTESTS_TraceError+0x48>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f002 fd5b 	bl	8003678 <logApplication>
  while(1U == 1U)
  {
    BSP_LED_Toggle(LED1);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f002 ff2a 	bl	8003a1c <BSP_LED_Toggle>
    HAL_Delay(500U);
 8000bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bcc:	f002 f8ad 	bl	8002d2a <HAL_Delay>
    BSP_LED_Toggle(LED2);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f002 ff23 	bl	8003a1c <BSP_LED_Toggle>
    HAL_Delay(500U);
 8000bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bda:	f002 f8a6 	bl	8002d2a <HAL_Delay>
    BSP_LED_Toggle(LED3);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f002 ff1c 	bl	8003a1c <BSP_LED_Toggle>
    HAL_Delay(500U);
 8000be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be8:	f002 f89f 	bl	8002d2a <HAL_Delay>
    BSP_LED_Toggle(LED1);
 8000bec:	e7e9      	b.n	8000bc2 <APP_LLDTESTS_TraceError+0x1a>
 8000bee:	bf00      	nop
 8000bf0:	0800c46c 	.word	0x0800c46c

08000bf4 <APP_LLDTESTS_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_LLDTESTS_CheckWirelessFirmwareInfo(void)
{
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t* p_wireless_info = &wireless_info_instance;
 8000bfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  char              m0FwType[50] = "M0 FW Type : Unknown !! ";
 8000c00:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x114>)
 8000c02:	463c      	mov	r4, r7
 8000c04:	461d      	mov	r5, r3
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c0e:	c403      	stmia	r4!, {r0, r1}
 8000c10:	7022      	strb	r2, [r4, #0]
 8000c12:	f107 0319 	add.w	r3, r7, #25
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	761a      	strb	r2, [r3, #24]

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8000c26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000c28:	f008 fbae 	bl	8009388 <SHCI_GetWirelessFwInfo>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d004      	beq.n	8000c3c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x48>
  {
    APP_LLDTESTS_Error((uint32_t)ERR_LLDTESTS_CHECK_WIRELESS, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff ff85 	bl	8000b44 <APP_LLDTESTS_Error>
    /* Print version */
    APP_DBG("  M0 FW VERSION = v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
    
    APP_DBG("**********************************************************");
  }
}
 8000c3a:	e061      	b.n	8000d00 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x10c>
    APP_DBG("**********************************************************");
 8000c3c:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x118>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	2000      	movs	r0, #0
 8000c42:	f002 fd19 	bl	8003678 <logApplication>
    APP_DBG("Loaded M0 TEST FW info :");
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x11c>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f002 fd14 	bl	8003678 <logApplication>
    switch(p_wireless_info->StackType)
 8000c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c52:	7a5b      	ldrb	r3, [r3, #9]
 8000c54:	3b60      	subs	r3, #96	; 0x60
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d832      	bhi.n	8000cc0 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0xcc>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x6c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c71 	.word	0x08000c71
 8000c64:	08000c85 	.word	0x08000c85
 8000c68:	08000c99 	.word	0x08000c99
 8000c6c:	08000cad 	.word	0x08000cad
      sprintf(m0FwType, "  M0 FW Type : 802.15.4 and radio LLDs tests");
 8000c70:	463b      	mov	r3, r7
 8000c72:	4928      	ldr	r1, [pc, #160]	; (8000d14 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x120>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f009 ff87 	bl	800ab88 <siprintf>
      sprintf(cliPrompt, "802.15.4 TESTS > ");
 8000c7a:	4927      	ldr	r1, [pc, #156]	; (8000d18 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x124>)
 8000c7c:	4827      	ldr	r0, [pc, #156]	; (8000d1c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x128>)
 8000c7e:	f009 ff83 	bl	800ab88 <siprintf>
      break;
 8000c82:	e022      	b.n	8000cca <APP_LLDTESTS_CheckWirelessFirmwareInfo+0xd6>
      sprintf(m0FwType, "  M0 FW Type : 802.15.4 and radio PHY validation");
 8000c84:	463b      	mov	r3, r7
 8000c86:	4926      	ldr	r1, [pc, #152]	; (8000d20 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x12c>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f009 ff7d 	bl	800ab88 <siprintf>
      sprintf(cliPrompt, "802.15.4 valid cli > ");
 8000c8e:	4925      	ldr	r1, [pc, #148]	; (8000d24 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x130>)
 8000c90:	4822      	ldr	r0, [pc, #136]	; (8000d1c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x128>)
 8000c92:	f009 ff79 	bl	800ab88 <siprintf>
      break;
 8000c96:	e018      	b.n	8000cca <APP_LLDTESTS_CheckWirelessFirmwareInfo+0xd6>
      sprintf(m0FwType, "  M0 FW Type : BLE and radio PHY validation");
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4923      	ldr	r1, [pc, #140]	; (8000d28 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x134>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f009 ff73 	bl	800ab88 <siprintf>
      sprintf(cliPrompt, "BLE valid cli > ");
 8000ca2:	4922      	ldr	r1, [pc, #136]	; (8000d2c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x138>)
 8000ca4:	481d      	ldr	r0, [pc, #116]	; (8000d1c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x128>)
 8000ca6:	f009 ff6f 	bl	800ab88 <siprintf>
      break;
 8000caa:	e00e      	b.n	8000cca <APP_LLDTESTS_CheckWirelessFirmwareInfo+0xd6>
      sprintf(m0FwType, "  M0 FW Type : BLE and radio LLDs tests");
 8000cac:	463b      	mov	r3, r7
 8000cae:	4920      	ldr	r1, [pc, #128]	; (8000d30 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x13c>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 ff69 	bl	800ab88 <siprintf>
      sprintf(cliPrompt, "BLE TESTS > ");
 8000cb6:	491f      	ldr	r1, [pc, #124]	; (8000d34 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x140>)
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x128>)
 8000cba:	f009 ff65 	bl	800ab88 <siprintf>
      break;
 8000cbe:	e004      	b.n	8000cca <APP_LLDTESTS_CheckWirelessFirmwareInfo+0xd6>
      APP_LLDTESTS_Error((uint32_t)ERR_LLDTESTS_CHECK_WIRELESS, 0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff ff3e 	bl	8000b44 <APP_LLDTESTS_Error>
      break;
 8000cc8:	bf00      	nop
    APP_DBG(m0FwType);
 8000cca:	463b      	mov	r3, r7
 8000ccc:	461a      	mov	r2, r3
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f002 fcd1 	bl	8003678 <logApplication>
    APP_DBG("  M0 FW VERSION = v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8000cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	9200      	str	r2, [sp, #0]
 8000cea:	460b      	mov	r3, r1
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x144>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f002 fcc1 	bl	8003678 <logApplication>
    APP_DBG("**********************************************************");
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <APP_LLDTESTS_CheckWirelessFirmwareInfo+0x118>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f002 fcbc 	bl	8003678 <logApplication>
}
 8000d00:	bf00      	nop
 8000d02:	3748      	adds	r7, #72	; 0x48
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bdb0      	pop	{r4, r5, r7, pc}
 8000d08:	0800c60c 	.word	0x0800c60c
 8000d0c:	0800c490 	.word	0x0800c490
 8000d10:	0800c4cc 	.word	0x0800c4cc
 8000d14:	0800c4e8 	.word	0x0800c4e8
 8000d18:	0800c518 	.word	0x0800c518
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	0800c52c 	.word	0x0800c52c
 8000d24:	0800c560 	.word	0x0800c560
 8000d28:	0800c578 	.word	0x0800c578
 8000d2c:	0800c5a4 	.word	0x0800c5a4
 8000d30:	0800c5b8 	.word	0x0800c5b8
 8000d34:	0800c5e0 	.word	0x0800c5e0
 8000d38:	0800c5f0 	.word	0x0800c5f0

08000d3c <APP_LLDTESTS_Init_UART_CLI>:
 * @brief Perform initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_LLDTESTS_Init_UART_CLI(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
#if (CFG_HW_USART1_ENABLED == 1)
  MX_USART1_UART_Init();
 8000d40:	f001 fe8e 	bl	8002a60 <MX_USART1_UART_Init>
  
  /* Put the UART device in reception mode and wait for interrupt */
  if (HW_UART_Receive_IT(CFG_CLI_UART, &rxBuffer[rxBuffer_wrPtr], 1, uartRxCpltCallback) != hw_uart_ok)
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <APP_LLDTESTS_Init_UART_CLI+0x30>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <APP_LLDTESTS_Init_UART_CLI+0x34>)
 8000d4a:	1899      	adds	r1, r3, r2
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <APP_LLDTESTS_Init_UART_CLI+0x38>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2000      	movs	r0, #0
 8000d52:	f001 f995 	bl	8002080 <HW_UART_Receive_IT>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d004      	beq.n	8000d66 <APP_LLDTESTS_Init_UART_CLI+0x2a>
    APP_DBG((char *)"!! HAL_UART_Receive_IT error on M4 in APP_LLDTESTS_Init_UART_CLI !!");
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <APP_LLDTESTS_Init_UART_CLI+0x3c>)
 8000d5e:	2101      	movs	r1, #1
 8000d60:	2000      	movs	r0, #0
 8000d62:	f002 fc89 	bl	8003678 <logApplication>
#endif
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20001508 	.word	0x20001508
 8000d70:	20001108 	.word	0x20001108
 8000d74:	08000d89 	.word	0x08000d89
 8000d78:	0800c640 	.word	0x0800c640

08000d7c <APP_LLDTESTS_DeInit_UART_CLI>:
 * @brief Perform de-initialization of CLI UART interface.
 * @param  None
 * @retval None
 */
void APP_LLDTESTS_DeInit_UART_CLI(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
#if (CFG_HW_USART1_ENABLED == 1)
  MX_USART1_UART_DeInit();
 8000d80:	f001 febe 	bl	8002b00 <MX_USART1_UART_DeInit>
#endif
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <uartRxCpltCallback>:

static void uartRxCpltCallback(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
       - during RX isr (huart->RxISR)
       - after bytes copy in buffer specified in last call to HW_UART_Receive_IT()
       - when number of bytes specified in last call to HW_UART_Receive_IT() is achieved */
  
  /* Prepare buffer to receive next character */
  if ( rxCmdAllowed ) {
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <uartRxCpltCallback+0x34>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00c      	beq.n	8000dae <uartRxCpltCallback+0x26>
    /* Increment read pointer index and manage buffer rollover */
    rxBuffer_wrPtr++;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <uartRxCpltCallback+0x38>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <uartRxCpltCallback+0x38>)
 8000d9c:	6013      	str	r3, [r2, #0]
    if(rxBuffer_wrPtr >= CLI_CMD_BUFFER_SIZE)
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <uartRxCpltCallback+0x38>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da6:	d302      	bcc.n	8000dae <uartRxCpltCallback+0x26>
      rxBuffer_wrPtr = 0;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <uartRxCpltCallback+0x38>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
  }
  
  /* Re-put UART device in reception mode (not during IT to avoid locking the device while perhaps in transmit phase) */
  UTIL_SEQ_SetTask(1U << CFG_TASK_PROCESS_UART_RX_IT, CFG_SCH_PRIO_0);
 8000dae:	2100      	movs	r1, #0
 8000db0:	2010      	movs	r0, #16
 8000db2:	f009 fd77 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000f1 	.word	0x200000f1
 8000dc0:	20001508 	.word	0x20001508

08000dc4 <uartRxItProcess>:

static void uartRxItProcess(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Put the UART device in reception mode and wait for interrupt */
  if (HW_UART_Receive_IT(CFG_CLI_UART, &rxBuffer[rxBuffer_wrPtr], 1, uartRxCpltCallback) != hw_uart_ok)
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <uartRxItProcess+0x2c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <uartRxItProcess+0x30>)
 8000dce:	1899      	adds	r1, r3, r2
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <uartRxItProcess+0x34>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f001 f953 	bl	8002080 <HW_UART_Receive_IT>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d004      	beq.n	8000dea <uartRxItProcess+0x26>
    APP_DBG((char *)"!! HAL_UART_Receive_IT error on M4 in uartRxItProcess !!");
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <uartRxItProcess+0x38>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	2000      	movs	r0, #0
 8000de6:	f002 fc47 	bl	8003678 <logApplication>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20001508 	.word	0x20001508
 8000df4:	20001108 	.word	0x20001108
 8000df8:	08000d89 	.word	0x08000d89
 8000dfc:	0800c684 	.word	0x0800c684

08000e00 <uartClearChars>:

static void uartClearChars(int nbChar)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  char clearCmd[2];
  
  clearCmd[0] = CHAR_DEL;
 8000e08:	237f      	movs	r3, #127	; 0x7f
 8000e0a:	723b      	strb	r3, [r7, #8]
  clearCmd[1] = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	727b      	strb	r3, [r7, #9]
  for (int i = 0; i < nbChar; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e007      	b.n	8000e26 <uartClearChars+0x26>
    uartTxLlAdd(clearCmd);
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f934 	bl	8001088 <uartTxLlAdd>
  for (int i = 0; i < nbChar; i++) {
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	dbf3      	blt.n	8000e16 <uartClearChars+0x16>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <uartRxBufferProcess>:

static void uartRxBufferProcess( void )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  char last_char[2];
  static int8_t escape = -1;
  static uint8_t escape_seq[3] = {0};
  
  /* Ensure that last_char buffer contains a string with the char and a \0 (useful to send echo or CHAR_DEL to UART) */
  last_char[1] = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	717b      	strb	r3, [r7, #5]
  
  /* Interpret the character reception from UART (only if rxCmdAllowed is activated and read pointer reached write one)*/
  while (rxBuffer_rdPtr != rxBuffer_wrPtr ) {
 8000e42:	e0f1      	b.n	8001028 <uartRxBufferProcess+0x1f0>
    last_char[0] = rxBuffer[rxBuffer_rdPtr];
 8000e44:	4b80      	ldr	r3, [pc, #512]	; (8001048 <uartRxBufferProcess+0x210>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a80      	ldr	r2, [pc, #512]	; (800104c <uartRxBufferProcess+0x214>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	713b      	strb	r3, [r7, #4]
    if( escape >= 0 ) {
 8000e4e:	4b80      	ldr	r3, [pc, #512]	; (8001050 <uartRxBufferProcess+0x218>)
 8000e50:	f993 3000 	ldrsb.w	r3, [r3]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	db67      	blt.n	8000f28 <uartRxBufferProcess+0xf0>
      escape_seq[escape++] = last_char[0];
 8000e58:	4b7d      	ldr	r3, [pc, #500]	; (8001050 <uartRxBufferProcess+0x218>)
 8000e5a:	f993 2000 	ldrsb.w	r2, [r3]
 8000e5e:	b2d3      	uxtb	r3, r2
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	b259      	sxtb	r1, r3
 8000e66:	4b7a      	ldr	r3, [pc, #488]	; (8001050 <uartRxBufferProcess+0x218>)
 8000e68:	7019      	strb	r1, [r3, #0]
 8000e6a:	7939      	ldrb	r1, [r7, #4]
 8000e6c:	4b79      	ldr	r3, [pc, #484]	; (8001054 <uartRxBufferProcess+0x21c>)
 8000e6e:	5499      	strb	r1, [r3, r2]
      if ( escape == 2 ) {
 8000e70:	4b77      	ldr	r3, [pc, #476]	; (8001050 <uartRxBufferProcess+0x218>)
 8000e72:	f993 3000 	ldrsb.w	r3, [r3]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	f040 80c9 	bne.w	800100e <uartRxBufferProcess+0x1d6>
        if ( strcmp((char*)escape_seq, "[A") == 0 ) { // UP
 8000e7c:	4976      	ldr	r1, [pc, #472]	; (8001058 <uartRxBufferProcess+0x220>)
 8000e7e:	4875      	ldr	r0, [pc, #468]	; (8001054 <uartRxBufferProcess+0x21c>)
 8000e80:	f7ff f97e 	bl	8000180 <strcmp>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d121      	bne.n	8000ece <uartRxBufferProcess+0x96>
          uartClearChars(currentCommandPos);
 8000e8a:	4b74      	ldr	r3, [pc, #464]	; (800105c <uartRxBufferProcess+0x224>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffb6 	bl	8000e00 <uartClearChars>
          commandHistoryIdx = (commandHistoryIdx > 0) ? (commandHistoryIdx - 1) : (CLI_CMD_HISTORY_LENGTH - 1);
 8000e94:	4b72      	ldr	r3, [pc, #456]	; (8001060 <uartRxBufferProcess+0x228>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dd03      	ble.n	8000ea4 <uartRxBufferProcess+0x6c>
 8000e9c:	4b70      	ldr	r3, [pc, #448]	; (8001060 <uartRxBufferProcess+0x228>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <uartRxBufferProcess+0x6e>
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	4a6e      	ldr	r2, [pc, #440]	; (8001060 <uartRxBufferProcess+0x228>)
 8000ea8:	6013      	str	r3, [r2, #0]
          strcpy((char*)currentCommand,(char*)commandHistory[commandHistoryIdx]);
 8000eaa:	4b6d      	ldr	r3, [pc, #436]	; (8001060 <uartRxBufferProcess+0x228>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	029b      	lsls	r3, r3, #10
 8000eb0:	4a6c      	ldr	r2, [pc, #432]	; (8001064 <uartRxBufferProcess+0x22c>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <uartRxBufferProcess+0x230>)
 8000eb8:	f009 fe86 	bl	800abc8 <strcpy>
          currentCommandPos = strlen((char*)currentCommand);
 8000ebc:	486a      	ldr	r0, [pc, #424]	; (8001068 <uartRxBufferProcess+0x230>)
 8000ebe:	f7ff f969 	bl	8000194 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a65      	ldr	r2, [pc, #404]	; (800105c <uartRxBufferProcess+0x224>)
 8000ec6:	6013      	str	r3, [r2, #0]
          uartTxLlAdd((char*)currentCommand);
 8000ec8:	4867      	ldr	r0, [pc, #412]	; (8001068 <uartRxBufferProcess+0x230>)
 8000eca:	f000 f8dd 	bl	8001088 <uartTxLlAdd>
        }
        if ( strcmp((char*)escape_seq, "[B") == 0 ) { // DOWN
 8000ece:	4967      	ldr	r1, [pc, #412]	; (800106c <uartRxBufferProcess+0x234>)
 8000ed0:	4860      	ldr	r0, [pc, #384]	; (8001054 <uartRxBufferProcess+0x21c>)
 8000ed2:	f7ff f955 	bl	8000180 <strcmp>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d121      	bne.n	8000f20 <uartRxBufferProcess+0xe8>
          uartClearChars(currentCommandPos);
 8000edc:	4b5f      	ldr	r3, [pc, #380]	; (800105c <uartRxBufferProcess+0x224>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff8d 	bl	8000e00 <uartClearChars>
          commandHistoryIdx = (commandHistoryIdx < (CLI_CMD_HISTORY_LENGTH - 1)) ? (commandHistoryIdx + 1) : 0;
 8000ee6:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <uartRxBufferProcess+0x228>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d803      	bhi.n	8000ef6 <uartRxBufferProcess+0xbe>
 8000eee:	4b5c      	ldr	r3, [pc, #368]	; (8001060 <uartRxBufferProcess+0x228>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <uartRxBufferProcess+0xc0>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	4a59      	ldr	r2, [pc, #356]	; (8001060 <uartRxBufferProcess+0x228>)
 8000efa:	6013      	str	r3, [r2, #0]
          strcpy((char*)currentCommand,(char*)commandHistory[commandHistoryIdx]);
 8000efc:	4b58      	ldr	r3, [pc, #352]	; (8001060 <uartRxBufferProcess+0x228>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	4a58      	ldr	r2, [pc, #352]	; (8001064 <uartRxBufferProcess+0x22c>)
 8000f04:	4413      	add	r3, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	4857      	ldr	r0, [pc, #348]	; (8001068 <uartRxBufferProcess+0x230>)
 8000f0a:	f009 fe5d 	bl	800abc8 <strcpy>
          currentCommandPos = strlen((char*)currentCommand);
 8000f0e:	4856      	ldr	r0, [pc, #344]	; (8001068 <uartRxBufferProcess+0x230>)
 8000f10:	f7ff f940 	bl	8000194 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a51      	ldr	r2, [pc, #324]	; (800105c <uartRxBufferProcess+0x224>)
 8000f18:	6013      	str	r3, [r2, #0]
          uartTxLlAdd((char*)currentCommand);
 8000f1a:	4853      	ldr	r0, [pc, #332]	; (8001068 <uartRxBufferProcess+0x230>)
 8000f1c:	f000 f8b4 	bl	8001088 <uartTxLlAdd>
        }
        escape = -1;
 8000f20:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <uartRxBufferProcess+0x218>)
 8000f22:	22ff      	movs	r2, #255	; 0xff
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e072      	b.n	800100e <uartRxBufferProcess+0x1d6>
      }
    }
    else if ( last_char[0] == CHAR_DEL )  {
 8000f28:	793b      	ldrb	r3, [r7, #4]
 8000f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2c:	d10d      	bne.n	8000f4a <uartRxBufferProcess+0x112>
      if ( currentCommandPos > 0 ) {
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <uartRxBufferProcess+0x224>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d06b      	beq.n	800100e <uartRxBufferProcess+0x1d6>
        currentCommandPos--;
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <uartRxBufferProcess+0x224>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	4a47      	ldr	r2, [pc, #284]	; (800105c <uartRxBufferProcess+0x224>)
 8000f3e:	6013      	str	r3, [r2, #0]
        uartTxLlAdd(last_char);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f8a0 	bl	8001088 <uartTxLlAdd>
 8000f48:	e061      	b.n	800100e <uartRxBufferProcess+0x1d6>
      }
    }
    else if ( last_char[0] == CHAR_ESC )  {
 8000f4a:	793b      	ldrb	r3, [r7, #4]
 8000f4c:	2b1b      	cmp	r3, #27
 8000f4e:	d103      	bne.n	8000f58 <uartRxBufferProcess+0x120>
      escape = 0;
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <uartRxBufferProcess+0x218>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e05a      	b.n	800100e <uartRxBufferProcess+0x1d6>
    }
    else if ( last_char[0] == CHAR_CTRLC )  {
 8000f58:	793b      	ldrb	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d109      	bne.n	8000f72 <uartRxBufferProcess+0x13a>
      /* Just send a new prompt to wait for a new command */
      currentCommandPos = 0;
 8000f5e:	4b3f      	ldr	r3, [pc, #252]	; (800105c <uartRxBufferProcess+0x224>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
      uartTxLlAdd("\r\n");
 8000f64:	4842      	ldr	r0, [pc, #264]	; (8001070 <uartRxBufferProcess+0x238>)
 8000f66:	f000 f88f 	bl	8001088 <uartTxLlAdd>
      uartTxLlAdd(cliPrompt);
 8000f6a:	4842      	ldr	r0, [pc, #264]	; (8001074 <uartRxBufferProcess+0x23c>)
 8000f6c:	f000 f88c 	bl	8001088 <uartTxLlAdd>
 8000f70:	e04d      	b.n	800100e <uartRxBufferProcess+0x1d6>
    }
    else if ( ( last_char[0] == '\r' ) || ( last_char[0] == '\n' ))  {
 8000f72:	793b      	ldrb	r3, [r7, #4]
 8000f74:	2b0d      	cmp	r3, #13
 8000f76:	d002      	beq.n	8000f7e <uartRxBufferProcess+0x146>
 8000f78:	793b      	ldrb	r3, [r7, #4]
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d13b      	bne.n	8000ff6 <uartRxBufferProcess+0x1be>
      if (currentCommandPos == 0) {
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <uartRxBufferProcess+0x224>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <uartRxBufferProcess+0x15c>
        /* User just typed 'enter' without any command, so, just send a new prompt to wait for a new command */
        uartTxLlAdd("\r\n");
 8000f86:	483a      	ldr	r0, [pc, #232]	; (8001070 <uartRxBufferProcess+0x238>)
 8000f88:	f000 f87e 	bl	8001088 <uartTxLlAdd>
        uartTxLlAdd(cliPrompt);
 8000f8c:	4839      	ldr	r0, [pc, #228]	; (8001074 <uartRxBufferProcess+0x23c>)
 8000f8e:	f000 f87b 	bl	8001088 <uartTxLlAdd>
      if (currentCommandPos == 0) {
 8000f92:	e03c      	b.n	800100e <uartRxBufferProcess+0x1d6>
      } else {
        /* Do not accept new command from UART until this one is managed */
        rxCmdAllowed = 0;
 8000f94:	4b38      	ldr	r3, [pc, #224]	; (8001078 <uartRxBufferProcess+0x240>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
        
        /* Put a end of line in UART TX buffer to have the echo sent */
        uartTxLlAdd("\r\n");
 8000f9a:	4835      	ldr	r0, [pc, #212]	; (8001070 <uartRxBufferProcess+0x238>)
 8000f9c:	f000 f874 	bl	8001088 <uartTxLlAdd>
        /* add a \0 to indicate end of command to M0 and to have it in command history (needed to use strlen()) */
        currentCommand[currentCommandPos++] = 0;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <uartRxBufferProcess+0x224>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	492d      	ldr	r1, [pc, #180]	; (800105c <uartRxBufferProcess+0x224>)
 8000fa8:	600a      	str	r2, [r1, #0]
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <uartRxBufferProcess+0x230>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	54d1      	strb	r1, [r2, r3]
        
        /* Copy the current command in history buffer before to send it to M0 */
        memcpy(commandHistory[commandHistoryIdxSav],currentCommand,currentCommandPos);
 8000fb0:	4b32      	ldr	r3, [pc, #200]	; (800107c <uartRxBufferProcess+0x244>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	029b      	lsls	r3, r3, #10
 8000fb6:	4a2b      	ldr	r2, [pc, #172]	; (8001064 <uartRxBufferProcess+0x22c>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a28      	ldr	r2, [pc, #160]	; (800105c <uartRxBufferProcess+0x224>)
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	492a      	ldr	r1, [pc, #168]	; (8001068 <uartRxBufferProcess+0x230>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f009 fd7f 	bl	800aac4 <memcpy>
        commandHistoryIdxSav = (commandHistoryIdxSav+1) % CLI_CMD_HISTORY_LENGTH;
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <uartRxBufferProcess+0x244>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <uartRxBufferProcess+0x248>)
 8000fd0:	fba3 2301 	umull	r2, r3, r3, r1
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	1aca      	subs	r2, r1, r3
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <uartRxBufferProcess+0x244>)
 8000fe2:	601a      	str	r2, [r3, #0]
        commandHistoryIdx = commandHistoryIdxSav;
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <uartRxBufferProcess+0x244>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <uartRxBufferProcess+0x228>)
 8000fea:	6013      	str	r3, [r2, #0]
        
        /* UART task scheduling to send it to M0 */
        UTIL_SEQ_SetTask(1U << CFG_TASK_SEND_CLI_TO_M0, CFG_SCH_PRIO_0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f009 fc58 	bl	800a8a4 <UTIL_SEQ_SetTask>
      if (currentCommandPos == 0) {
 8000ff4:	e00b      	b.n	800100e <uartRxBufferProcess+0x1d6>
      }
    }
    else {
      /* Put the char in UART TX buffer to have the echo sent */
      uartTxLlAdd(last_char);
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f845 	bl	8001088 <uartTxLlAdd>
      /* Put the char in the current command buffer */
      currentCommand[currentCommandPos++] = last_char[0];
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <uartRxBufferProcess+0x224>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	4915      	ldr	r1, [pc, #84]	; (800105c <uartRxBufferProcess+0x224>)
 8001006:	600a      	str	r2, [r1, #0]
 8001008:	7939      	ldrb	r1, [r7, #4]
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <uartRxBufferProcess+0x230>)
 800100c:	54d1      	strb	r1, [r2, r3]
    }
    
    /* Increment read pointer index and manage buffer rollover */
    rxBuffer_rdPtr++;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <uartRxBufferProcess+0x210>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <uartRxBufferProcess+0x210>)
 8001016:	6013      	str	r3, [r2, #0]
    if(rxBuffer_rdPtr >= CLI_CMD_BUFFER_SIZE)
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <uartRxBufferProcess+0x210>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001020:	d302      	bcc.n	8001028 <uartRxBufferProcess+0x1f0>
      rxBuffer_rdPtr = 0;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <uartRxBufferProcess+0x210>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
  while (rxBuffer_rdPtr != rxBuffer_wrPtr ) {
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <uartRxBufferProcess+0x210>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <uartRxBufferProcess+0x24c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	f47f af07 	bne.w	8000e44 <uartRxBufferProcess+0xc>
  }
  
  /* Re-activate UART RX buffer processing task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_PROCESS_UART_RX_BUFFER, CFG_SCH_PRIO_0);
 8001036:	2100      	movs	r1, #0
 8001038:	2008      	movs	r0, #8
 800103a:	f009 fc33 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000150c 	.word	0x2000150c
 800104c:	20001108 	.word	0x20001108
 8001050:	2000002a 	.word	0x2000002a
 8001054:	20004124 	.word	0x20004124
 8001058:	0800c6c0 	.word	0x0800c6c0
 800105c:	20001910 	.word	0x20001910
 8001060:	20004114 	.word	0x20004114
 8001064:	20001914 	.word	0x20001914
 8001068:	20001510 	.word	0x20001510
 800106c:	0800c6c4 	.word	0x0800c6c4
 8001070:	0800c6c8 	.word	0x0800c6c8
 8001074:	2000000c 	.word	0x2000000c
 8001078:	200000f1 	.word	0x200000f1
 800107c:	20004118 	.word	0x20004118
 8001080:	cccccccd 	.word	0xcccccccd
 8001084:	20001508 	.word	0x20001508

08001088 <uartTxLlAdd>:

static void uartTxLlAdd(const char * str)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint16_t bytesToWrite = strlen(str);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f87f 	bl	8000194 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	81bb      	strh	r3, [r7, #12]
  
  if (bytesToWrite) {
 800109a:	89bb      	ldrh	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <uartTxLlAdd+0x40>
    uint16_t  remainingBytesToWrite = bytesToWrite;
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	81fb      	strh	r3, [r7, #14]
    
    while (remainingBytesToWrite > 0) {
 80010a4:	e00d      	b.n	80010c2 <uartTxLlAdd+0x3a>
      HW_UART_Transmit_LL(CFG_CLI_UART, str[bytesToWrite - remainingBytesToWrite]);
 80010a6:	89ba      	ldrh	r2, [r7, #12]
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	2000      	movs	r0, #0
 80010b8:	f001 f89e 	bl	80021f8 <HW_UART_Transmit_LL>
      remainingBytesToWrite--;
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	3b01      	subs	r3, #1
 80010c0:	81fb      	strh	r3, [r7, #14]
    while (remainingBytesToWrite > 0) {
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ee      	bne.n	80010a6 <uartTxLlAdd+0x1e>
    }
  }
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <uartTxBufferAdd>:

static void uartTxBufferAdd(const char * str)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint16_t bytesToWrite = strlen(str);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff f85b 	bl	8000194 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	82fb      	strh	r3, [r7, #22]
  uint32_t txBufferFull = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (bytesToWrite) {
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d067      	beq.n	80011bc <uartTxBufferAdd+0xec>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010ec:	f3ef 8310 	mrs	r3, PRIMASK
 80010f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80010f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_BEGIN();
 80010f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80010f6:	b672      	cpsid	i
}
 80010f8:	bf00      	nop
    {
      uint16_t  remainingBytesToWrite = bytesToWrite;
 80010fa:	8afb      	ldrh	r3, [r7, #22]
 80010fc:	847b      	strh	r3, [r7, #34]	; 0x22
      uint32_t  currentWrPtr  = txBuffer_wrPtr;
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <uartTxBufferAdd+0xf4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	61fb      	str	r3, [r7, #28]
      uint8_t * currentWrAddr = &txBuffer[txBuffer_wrPtr];
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <uartTxBufferAdd+0xf4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <uartTxBufferAdd+0xf8>)
 800110a:	4413      	add	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      
      while ((remainingBytesToWrite > 0) && (txBufferFull == 0)) {
 800110e:	e02a      	b.n	8001166 <uartTxBufferAdd+0x96>
        if ((txBuffer_rdPtr == (currentWrPtr + 1)) || ((txBuffer_rdPtr == 0) && (currentWrPtr == (UART_TX_BUFFER_SIZE - 1)))) {
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <uartTxBufferAdd+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d008      	beq.n	800112e <uartTxBufferAdd+0x5e>
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <uartTxBufferAdd+0xfc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <uartTxBufferAdd+0x64>
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f640 72ff 	movw	r2, #4095	; 0xfff
 800112a:	4293      	cmp	r3, r2
 800112c:	d102      	bne.n	8001134 <uartTxBufferAdd+0x64>
          /* If there is not enough place (i.e. write pointer is just behind read pointer in the circular buffer), 
             buffer is full, so do not consider new string */
          /* !! No trace here as it is under CRITICAL section */
          txBufferFull = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	e018      	b.n	8001166 <uartTxBufferAdd+0x96>
        } else {
          *currentWrAddr = str[bytesToWrite - remainingBytesToWrite];
 8001134:	8afa      	ldrh	r2, [r7, #22]
 8001136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	701a      	strb	r2, [r3, #0]
          remainingBytesToWrite--;
 8001146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001148:	3b01      	subs	r3, #1
 800114a:	847b      	strh	r3, [r7, #34]	; 0x22
          
          /* Increment write pointer index and manage buffer rollover */
          currentWrPtr++;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	3301      	adds	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
          if(currentWrPtr >= UART_TX_BUFFER_SIZE)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001158:	d301      	bcc.n	800115e <uartTxBufferAdd+0x8e>
            currentWrPtr = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
          currentWrAddr = &txBuffer[currentWrPtr];
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <uartTxBufferAdd+0xf8>)
 8001162:	4413      	add	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      while ((remainingBytesToWrite > 0) && (txBufferFull == 0)) {
 8001166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <uartTxBufferAdd+0xa2>
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0ce      	beq.n	8001110 <uartTxBufferAdd+0x40>
        }
      }
      
      if (txBufferFull == 0) {
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <uartTxBufferAdd+0xae>
        txBuffer_wrPtr = currentWrPtr;
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <uartTxBufferAdd+0xf4>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f383 8810 	msr	PRIMASK, r3
}
 8001188:	bf00      	nop
      }
    }
    CRITICAL_END();
    
    if (txBufferFull == 0) {
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <uartTxBufferAdd+0xd4>
      if (txBusy == 0) {
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <uartTxBufferAdd+0x100>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d111      	bne.n	80011bc <uartTxBufferAdd+0xec>
        txBusy = 1;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <uartTxBufferAdd+0x100>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
        uartTxCpltCallback();
 800119e:	f000 f81d 	bl	80011dc <uartTxCpltCallback>
    } else {
      txBufferFullCount++;
      APP_DBG((char *)"!! TX buffer full : %u", txBufferFullCount);
    }
  }
}
 80011a2:	e00b      	b.n	80011bc <uartTxBufferAdd+0xec>
      txBufferFullCount++;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <uartTxBufferAdd+0x104>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <uartTxBufferAdd+0x104>)
 80011ac:	6013      	str	r3, [r2, #0]
      APP_DBG((char *)"!! TX buffer full : %u", txBufferFullCount);
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <uartTxBufferAdd+0x104>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <uartTxBufferAdd+0x108>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	2000      	movs	r0, #0
 80011b8:	f002 fa5e 	bl	8003678 <logApplication>
}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200010f8 	.word	0x200010f8
 80011c8:	200000f4 	.word	0x200000f4
 80011cc:	200010fc 	.word	0x200010fc
 80011d0:	200000f0 	.word	0x200000f0
 80011d4:	20001104 	.word	0x20001104
 80011d8:	0800c6cc 	.word	0x0800c6cc

080011dc <uartTxCpltCallback>:

static void uartTxCpltCallback(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Prepare buffer to receive next character */
  if ( txBuffer_rdPtr != txBuffer_wrPtr ) {
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <uartTxCpltCallback+0x4c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <uartTxCpltCallback+0x50>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d017      	beq.n	800121c <uartTxCpltCallback+0x40>
    /* Re-put UART device in reception mode (not during IT to avoid locking the device while perhaps in transmit phase) */
    pTxBuff_currentWr = &txBuffer[txBuffer_rdPtr];
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <uartTxCpltCallback+0x4c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <uartTxCpltCallback+0x54>)
 80011f2:	4413      	add	r3, r2
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <uartTxCpltCallback+0x58>)
 80011f6:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << CFG_TASK_PROCESS_UART_TX_IT, CFG_SCH_PRIO_0);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2020      	movs	r0, #32
 80011fc:	f009 fb52 	bl	800a8a4 <UTIL_SEQ_SetTask>
    
    /* Increment write pointer index and manage buffer rollover */
    txBuffer_rdPtr++;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <uartTxCpltCallback+0x4c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <uartTxCpltCallback+0x4c>)
 8001208:	6013      	str	r3, [r2, #0]
    if(txBuffer_rdPtr >= UART_TX_BUFFER_SIZE)
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <uartTxCpltCallback+0x4c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001212:	d306      	bcc.n	8001222 <uartTxCpltCallback+0x46>
      txBuffer_rdPtr = 0;
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <uartTxCpltCallback+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
  } else {
    txBusy = 0;
  }
}
 800121a:	e002      	b.n	8001222 <uartTxCpltCallback+0x46>
    txBusy = 0;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <uartTxCpltCallback+0x5c>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200010fc 	.word	0x200010fc
 800122c:	200010f8 	.word	0x200010f8
 8001230:	200000f4 	.word	0x200000f4
 8001234:	20001100 	.word	0x20001100
 8001238:	200000f0 	.word	0x200000f0

0800123c <uartTxItProcess>:

static void uartTxItProcess(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Put the UART device in transmission mode and wait for interrupts :
       - 1 to write the data in TDR register 
       - 1 when char is sent
       - 1 to indicate end of transmit if several chars are to be transmitted */
  if (HW_UART_Transmit_IT(CFG_CLI_UART, pTxBuff_currentWr, 1, uartTxCpltCallback) != hw_uart_ok)
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <uartTxItProcess+0x28>)
 8001242:	6819      	ldr	r1, [r3, #0]
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <uartTxItProcess+0x2c>)
 8001246:	2201      	movs	r2, #1
 8001248:	2000      	movs	r0, #0
 800124a:	f000 ff77 	bl	800213c <HW_UART_Transmit_IT>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <uartTxItProcess+0x22>
    APP_DBG((char *)"!! HAL_UART_Transmit_IT error on M4 in uart TX callback !!");
 8001254:	4a05      	ldr	r2, [pc, #20]	; (800126c <uartTxItProcess+0x30>)
 8001256:	2101      	movs	r1, #1
 8001258:	2000      	movs	r0, #0
 800125a:	f002 fa0d 	bl	8003678 <logApplication>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20001100 	.word	0x20001100
 8001268:	080011dd 	.word	0x080011dd
 800126c:	0800c6e4 	.word	0x0800c6e4

08001270 <SendCliCmdToM0>:
 * @brief Process sends CLI command to M0.
 * @param  None
 * @retval None
 */
static void SendCliCmdToM0(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  BSP_LED_Off((LED_RED));
 8001274:	2002      	movs	r0, #2
 8001276:	f002 fbb7 	bl	80039e8 <BSP_LED_Off>
#endif
  memset(LldTestsCliCmdRspPacket.cmdserial.cmd.payload, 0x0U, 255U);
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	2100      	movs	r1, #0
 800127e:	480b      	ldr	r0, [pc, #44]	; (80012ac <SendCliCmdToM0+0x3c>)
 8001280:	f009 fc2e 	bl	800aae0 <memset>
  *(uint32_t *)LldTestsCliCmdRspPacket.cmdserial.cmd.payload = (uint32_t)currentCommand;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <SendCliCmdToM0+0x3c>)
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <SendCliCmdToM0+0x40>)
 8001288:	601a      	str	r2, [r3, #0]
  *(uint32_t *)&LldTestsCliCmdRspPacket.cmdserial.cmd.payload[4] = currentCommandPos;
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SendCliCmdToM0+0x44>)
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SendCliCmdToM0+0x48>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6013      	str	r3, [r2, #0]
  LldTestsCliCmdRspPacket.cmdserial.cmd.plen = 8;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <SendCliCmdToM0+0x4c>)
 8001294:	2208      	movs	r2, #8
 8001296:	72da      	strb	r2, [r3, #11]
  LldTestsCliCmdRspPacket.cmdserial.cmd.cmdcode = 0x0;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <SendCliCmdToM0+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	725a      	strb	r2, [r3, #9]
 800129e:	2200      	movs	r2, #0
 80012a0:	729a      	strb	r2, [r3, #10]
    APP_DBG((char *)"!! info command sent to M0 : txwr %u - txrd %u - full cnt %u - rxwr %u - rxrd %u", txBuffer_wrPtr, txBuffer_rdPtr, txBufferFullCount, rxBuffer_wrPtr, rxBuffer_rdPtr);
  if (strcmp((char *)currentCommand, "RX_get_LQI") == 0)
    APP_DBG((char *)"!! RX_get_LQI command sent to M0 : txwr %u - txrd %u - full cnt %u - rxwr %u - rxrd %u", txBuffer_wrPtr, txBuffer_rdPtr, txBufferFullCount, rxBuffer_wrPtr, rxBuffer_rdPtr);
#endif
  
  TL_LLDTESTS_SendCliCmd();
 80012a2:	f009 f823 	bl	800a2ec <TL_LLDTESTS_SendCliCmd>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200318fc 	.word	0x200318fc
 80012b0:	20001510 	.word	0x20001510
 80012b4:	20031900 	.word	0x20031900
 80012b8:	20001910 	.word	0x20001910
 80012bc:	200318f0 	.word	0x200318f0

080012c0 <APP_LLDTESTS_Init_TL>:
 * @brief Perform initialization of TL for LLD tests.
 * @param  None
 * @retval None
 */
void APP_LLDTESTS_Init_TL(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  LldTestsConfigBuffer.p_LldTestsCliCmdRspBuffer = (uint8_t*)&LldTestsCliCmdRspPacket;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <APP_LLDTESTS_Init_TL+0x1c>)
 80012c6:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <APP_LLDTESTS_Init_TL+0x20>)
 80012c8:	601a      	str	r2, [r3, #0]
  LldTestsConfigBuffer.p_LldTestsM0CmdBuffer = (uint8_t*)&LldTestsM0CmdPacket;
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <APP_LLDTESTS_Init_TL+0x1c>)
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <APP_LLDTESTS_Init_TL+0x24>)
 80012ce:	605a      	str	r2, [r3, #4]
  
  TL_LLDTESTS_Init( &LldTestsConfigBuffer );
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <APP_LLDTESTS_Init_TL+0x1c>)
 80012d2:	f008 fff3 	bl	800a2bc <TL_LLDTESTS_Init>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20030028 	.word	0x20030028
 80012e0:	200318f0 	.word	0x200318f0
 80012e4:	200317e4 	.word	0x200317e4

080012e8 <m0CmdProcess>:

static void m0CmdProcess(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  int8_t result, delta;

  switch (m0Cmd) {
 80012ee:	4b53      	ldr	r3, [pc, #332]	; (800143c <m0CmdProcess+0x154>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	f200 809d 	bhi.w	8001432 <m0CmdProcess+0x14a>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <m0CmdProcess+0x18>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001345 	.word	0x08001345
 8001304:	0800134d 	.word	0x0800134d
 8001308:	08001355 	.word	0x08001355
 800130c:	08001433 	.word	0x08001433
 8001310:	0800135d 	.word	0x0800135d
 8001314:	08001365 	.word	0x08001365
 8001318:	0800136d 	.word	0x0800136d
 800131c:	08001377 	.word	0x08001377
 8001320:	08001381 	.word	0x08001381
 8001324:	0800138b 	.word	0x0800138b
 8001328:	08001395 	.word	0x08001395
 800132c:	0800139d 	.word	0x0800139d
 8001330:	080013a5 	.word	0x080013a5
 8001334:	080013b9 	.word	0x080013b9
 8001338:	080013cd 	.word	0x080013cd
 800133c:	080013d9 	.word	0x080013d9
 8001340:	0800141d 	.word	0x0800141d
    case CMD_FROM_M0_STOP0_ON :
      m0CmdStopRequired(0);
 8001344:	2000      	movs	r0, #0
 8001346:	f000 f883 	bl	8001450 <m0CmdStopRequired>
      break;
 800134a:	e073      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_STOP1_ON :
      m0CmdStopRequired(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 f87f 	bl	8001450 <m0CmdStopRequired>
      break;
 8001352:	e06f      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_STOP2_ON :
      m0CmdStopRequired(2);
 8001354:	2002      	movs	r0, #2
 8001356:	f000 f87b 	bl	8001450 <m0CmdStopRequired>
      break;
 800135a:	e06b      	b.n	8001434 <m0CmdProcess+0x14c>
      // Nothing done here as the goal of this command is just to have an IPCC interrupt
      // that will make the M4 going out of STOP or WFI
      break;
    
    case CMD_FROM_M0_GO_IN_WFI :
      m0CmdStopRequired(3);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f877 	bl	8001450 <m0CmdStopRequired>
      break;
 8001362:	e067      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_GO_DIRECTLY_IN_WFI :
      m0CmdStopRequired(4);
 8001364:	2004      	movs	r0, #4
 8001366:	f000 f873 	bl	8001450 <m0CmdStopRequired>
      break;
 800136a:	e063      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_USE_MSI :
      SystemClock_Config_MSI(0, 1);
 800136c:	2101      	movs	r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	f001 fa5b 	bl	800282a <SystemClock_Config_MSI>
      break;
 8001374:	e05e      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_USE_MSI_HSE :
      SystemClock_Config_MSI(0, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2000      	movs	r0, #0
 800137a:	f001 fa56 	bl	800282a <SystemClock_Config_MSI>
      break;
 800137e:	e059      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_USE_MSI_PLL :
      SystemClock_Config_MSI(1, 1);
 8001380:	2101      	movs	r1, #1
 8001382:	2001      	movs	r0, #1
 8001384:	f001 fa51 	bl	800282a <SystemClock_Config_MSI>
      break;
 8001388:	e054      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_USE_MSI_PLL_HSE :
      SystemClock_Config_MSI(1, 0);
 800138a:	2100      	movs	r1, #0
 800138c:	2001      	movs	r0, #1
 800138e:	f001 fa4c 	bl	800282a <SystemClock_Config_MSI>
      break;
 8001392:	e04f      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_USE_HSE :
      SystemClock_Config_HSE(0);
 8001394:	2000      	movs	r0, #0
 8001396:	f001 f9b7 	bl	8002708 <SystemClock_Config_HSE>
      break;
 800139a:	e04b      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_USE_HSE_PLL :
      SystemClock_Config_HSE(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f001 f9b3 	bl	8002708 <SystemClock_Config_HSE>
      break;
 80013a2:	e047      	b.n	8001434 <m0CmdProcess+0x14c>
    
#if (CFG_HW_EXTPA_ENABLED == 1)
    case CMD_FROM_M0_EXT_PA_EN :
      gpio_lld_extPa_init();
 80013a4:	f000 fae6 	bl	8001974 <gpio_lld_extPa_init>
      // Indicate to M0 which GPIO must be managed
      SHCI_C2_ExtpaConfig((uint32_t)GPIO_EXT_PA_EN_PORT, GPIO_EXT_PA_EN_PIN, EXT_PA_ENABLED_HIGH, EXT_PA_ENABLED);
 80013a8:	2301      	movs	r3, #1
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <m0CmdProcess+0x158>)
 80013b2:	f007 ffba 	bl	800932a <SHCI_C2_ExtpaConfig>
      break;
 80013b6:	e03d      	b.n	8001434 <m0CmdProcess+0x14c>
    
    case CMD_FROM_M0_EXT_PA_DIS :
      gpio_lld_extPa_deInit();
 80013b8:	f000 fb06 	bl	80019c8 <gpio_lld_extPa_deInit>
      SHCI_C2_ExtpaConfig((uint32_t)GPIO_EXT_PA_EN_PORT, GPIO_EXT_PA_EN_PIN, EXT_PA_ENABLED_HIGH, EXT_PA_DISABLED);
 80013bc:	2300      	movs	r3, #0
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c4:	481e      	ldr	r0, [pc, #120]	; (8001440 <m0CmdProcess+0x158>)
 80013c6:	f007 ffb0 	bl	800932a <SHCI_C2_ExtpaConfig>
      break;
 80013ca:	e033      	b.n	8001434 <m0CmdProcess+0x14c>
#endif
    
    case CMD_FROM_M0_GENE_HARD_FAULT :
      {
        // Use this debug command to have a hard fault
        volatile uint32_t * badAddrPointer = (uint32_t *)0x20050000;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <m0CmdProcess+0x15c>)
 80013ce:	603b      	str	r3, [r7, #0]
        // No trace possible here as another task must be scheduled
        //APP_DBG("Hard fault generated on M4");
        //us_delay(1000);
        *badAddrPointer = 0xF;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	220f      	movs	r2, #15
 80013d4:	601a      	str	r2, [r3, #0]
      }
      break;
 80013d6:	e02d      	b.n	8001434 <m0CmdProcess+0x14c>
    case CMD_FROM_M0_HSE_TUNE :
      // Get current tuning value and delta
      delta = (int8_t)atol(CmdFromM0Array[1]);
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <m0CmdProcess+0x160>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4618      	mov	r0, r3
 80013de:	f009 fb43 	bl	800aa68 <atol>
 80013e2:	4603      	mov	r3, r0
 80013e4:	71bb      	strb	r3, [r7, #6]
      result = LL_RCC_HSE_GetCapacitorTuning() + delta;
 80013e6:	f7ff fabf 	bl	8000968 <LL_RCC_HSE_GetCapacitorTuning>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	4413      	add	r3, r2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	71fb      	strb	r3, [r7, #7]

      // Check out of range
      if (result > 63) {
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b3f      	cmp	r3, #63	; 0x3f
 80013fc:	dd02      	ble.n	8001404 <m0CmdProcess+0x11c>
        result = 63;
 80013fe:	233f      	movs	r3, #63	; 0x3f
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e005      	b.n	8001410 <m0CmdProcess+0x128>
      } else if (result < 0) {
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	da01      	bge.n	8001410 <m0CmdProcess+0x128>
        result = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	71fb      	strb	r3, [r7, #7]
      }

      LL_RCC_HSE_SetCapacitorTuning(result);
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fa89 	bl	800092c <LL_RCC_HSE_SetCapacitorTuning>
      break;
 800141a:	e00b      	b.n	8001434 <m0CmdProcess+0x14c>

    case CMD_FROM_M0_HSE_TUNE_DEF:
      // 7:0 contains the tuning value, bit 31 is flag for valid value
      Config_HSE_tuning( (uint32_t) (HSE_TRIM_VALID |
                                     (uint8_t) LL_RCC_HSE_GetCapacitorTuning() ));
 800141c:	f7ff faa4 	bl	8000968 <LL_RCC_HSE_GetCapacitorTuning>
 8001420:	4603      	mov	r3, r0
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
      Config_HSE_tuning( (uint32_t) (HSE_TRIM_VALID |
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <m0CmdProcess+0x164>)
 8001428:	4313      	orrs	r3, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fcae 	bl	8002d8c <Config_HSE_tuning>
      break;
 8001430:	e000      	b.n	8001434 <m0CmdProcess+0x14c>

    default:
      break;
 8001432:	bf00      	nop
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008
 8001440:	48000400 	.word	0x48000400
 8001444:	20050000 	.word	0x20050000
 8001448:	2000411c 	.word	0x2000411c
 800144c:	acce5500 	.word	0xacce5500

08001450 <m0CmdStopRequired>:

static void m0CmdStopRequired(uint32_t stopRequired)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  switch (stopRequired) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b04      	cmp	r3, #4
 800145c:	d86a      	bhi.n	8001534 <m0CmdStopRequired+0xe4>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <m0CmdStopRequired+0x14>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001479 	.word	0x08001479
 8001468:	080014a5 	.word	0x080014a5
 800146c:	080014d1 	.word	0x080014d1
 8001470:	080014fd 	.word	0x080014fd
 8001474:	08001527 	.word	0x08001527
    case 0:
      // flush IPC and trace before sleeping. Let time to M0 to set RF in sleep and to be in STOP if needed
      us_delay(DELAY_BEFORE_WFI_ON_M4);
 8001478:	200a      	movs	r0, #10
 800147a:	f7ff f86b 	bl	8000554 <us_delay_32m>
      
      // Stop UART and its GPIOs to reduce power consumption
      APP_LLDTESTS_DeInit_UART_CLI();
 800147e:	f7ff fc7d 	bl	8000d7c <APP_LLDTESTS_DeInit_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_DeInit();
 8001482:	f001 fab7 	bl	80029f4 <MX_LPUART1_UART_DeInit>
#endif
      
      M4_LPM_mode = LPM_STOP_0;
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <m0CmdStopRequired+0xf0>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
      UTIL_LPM_EnterLowPower();
 800148c:	f009 f8c8 	bl	800a620 <UTIL_LPM_EnterLowPower>
      
      // Restart UART before to go out of critical area to not have to send trace from M0 before to restart it
      APP_LLDTESTS_Init_UART_CLI();
 8001490:	f7ff fc54 	bl	8000d3c <APP_LLDTESTS_Init_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_Init();
 8001494:	f001 fa5e 	bl	8002954 <MX_LPUART1_UART_Init>
#endif
      
      APP_DBG("M4 back from STOP0");
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <m0CmdStopRequired+0xf4>)
 800149a:	2101      	movs	r1, #1
 800149c:	2000      	movs	r0, #0
 800149e:	f002 f8eb 	bl	8003678 <logApplication>
      break;
 80014a2:	e048      	b.n	8001536 <m0CmdStopRequired+0xe6>
    
    case 1:
      // flush IPC and trace before sleeping. Let time to M0 to set RF in sleep and to be in STOP if needed
      us_delay(DELAY_BEFORE_WFI_ON_M4);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f7ff f855 	bl	8000554 <us_delay_32m>
      
      // Stop UART and its GPIOs to reduce power consumption
      APP_LLDTESTS_DeInit_UART_CLI();
 80014aa:	f7ff fc67 	bl	8000d7c <APP_LLDTESTS_DeInit_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_DeInit();
 80014ae:	f001 faa1 	bl	80029f4 <MX_LPUART1_UART_DeInit>
#endif
      
      M4_LPM_mode = LPM_STOP_1;
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <m0CmdStopRequired+0xf0>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
      UTIL_LPM_EnterLowPower();
 80014b8:	f009 f8b2 	bl	800a620 <UTIL_LPM_EnterLowPower>
      
      // Restart UART before to go out of critical area to not have to send trace from M0 before to restart it
      APP_LLDTESTS_Init_UART_CLI();
 80014bc:	f7ff fc3e 	bl	8000d3c <APP_LLDTESTS_Init_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_Init();
 80014c0:	f001 fa48 	bl	8002954 <MX_LPUART1_UART_Init>
#endif
      
      APP_DBG("M4 back from STOP1");
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <m0CmdStopRequired+0xf8>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	2000      	movs	r0, #0
 80014ca:	f002 f8d5 	bl	8003678 <logApplication>
      break;
 80014ce:	e032      	b.n	8001536 <m0CmdStopRequired+0xe6>
    
    case 2:
      // flush IPC and trace before sleeping. Let time to M0 to set RF in sleep and to be in STOP if needed
      us_delay(DELAY_BEFORE_WFI_ON_M4);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f7ff f83f 	bl	8000554 <us_delay_32m>
      
      // Stop UART and its GPIOs to reduce power consumption
      APP_LLDTESTS_DeInit_UART_CLI();
 80014d6:	f7ff fc51 	bl	8000d7c <APP_LLDTESTS_DeInit_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_DeInit();
 80014da:	f001 fa8b 	bl	80029f4 <MX_LPUART1_UART_DeInit>
#endif
      
      M4_LPM_mode = LPM_STOP_2;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <m0CmdStopRequired+0xf0>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	701a      	strb	r2, [r3, #0]
      UTIL_LPM_EnterLowPower();
 80014e4:	f009 f89c 	bl	800a620 <UTIL_LPM_EnterLowPower>
      
      // Restart UART before to go out of critical area to not have to send trace from M0 before to restart it
      APP_LLDTESTS_Init_UART_CLI();
 80014e8:	f7ff fc28 	bl	8000d3c <APP_LLDTESTS_Init_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_Init();
 80014ec:	f001 fa32 	bl	8002954 <MX_LPUART1_UART_Init>
#endif
      
      APP_DBG("M4 back from STOP2");
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <m0CmdStopRequired+0xfc>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 f8bf 	bl	8003678 <logApplication>
      break;
 80014fa:	e01c      	b.n	8001536 <m0CmdStopRequired+0xe6>
    
    case 3:
      // flush IPC and trace before sleeping. Let time to M0 to set RF in sleep and to be in STOP if needed
      us_delay(DELAY_BEFORE_WFI_ON_M4);
 80014fc:	200a      	movs	r0, #10
 80014fe:	f7ff f829 	bl	8000554 <us_delay_32m>
      
      // Stop UART and its GPIOs to reduce power consumption
      APP_LLDTESTS_DeInit_UART_CLI();
 8001502:	f7ff fc3b 	bl	8000d7c <APP_LLDTESTS_DeInit_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_DeInit();
 8001506:	f001 fa75 	bl	80029f4 <MX_LPUART1_UART_DeInit>
#endif
      
      M4_LPM_mode = LPM_NO_STOP;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <m0CmdStopRequired+0xf0>)
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	701a      	strb	r2, [r3, #0]
      __WFI();
 8001510:	bf30      	wfi
      
      // Restart UART before to go out of critical area to not have to send trace from M0 before to restart it
      APP_LLDTESTS_Init_UART_CLI();
 8001512:	f7ff fc13 	bl	8000d3c <APP_LLDTESTS_Init_UART_CLI>
#if (CFG_HW_LPUART1_ENABLED == 1)
      MX_LPUART1_UART_Init();
 8001516:	f001 fa1d 	bl	8002954 <MX_LPUART1_UART_Init>
#endif
      
      APP_DBG("M4 back from WFI");
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <m0CmdStopRequired+0x100>)
 800151c:	2101      	movs	r1, #1
 800151e:	2000      	movs	r0, #0
 8001520:	f002 f8aa 	bl	8003678 <logApplication>
      break;
 8001524:	e007      	b.n	8001536 <m0CmdStopRequired+0xe6>
    case 4:
      // Put M4 in WFI without delay :
      //   - In some cases, it is recomanded to limit the M4 activity to avoid Flash access which can slow down the M0 which share it with M4
      //   - But, be carrefull as WFI can be blocking as there is no more interrupts
      //   - As example, if not used, SF timer test is failed.
      __WFI();
 8001526:	bf30      	wfi
      APP_DBG("M4 back from WFI (without delay)");
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <m0CmdStopRequired+0x104>)
 800152a:	2101      	movs	r1, #1
 800152c:	2000      	movs	r0, #0
 800152e:	f002 f8a3 	bl	8003678 <logApplication>
      break;
 8001532:	e000      	b.n	8001536 <m0CmdStopRequired+0xe6>
    
    default:
      break;
 8001534:	bf00      	nop
  }
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000002b 	.word	0x2000002b
 8001544:	0800c720 	.word	0x0800c720
 8001548:	0800c734 	.word	0x0800c734
 800154c:	0800c748 	.word	0x0800c748
 8001550:	0800c75c 	.word	0x0800c75c
 8001554:	0800c770 	.word	0x0800c770

08001558 <SendCliRspAckToM0>:
 * @brief Send Ack to M0 CLI Response channel.
 * @param  None
 * @retval None
 */
static void SendCliRspAckToM0(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Notify M0 that CLI notification has been taken into account */
  TL_LLDTESTS_SendCliRspAck();
 800155c:	f008 fee0 	bl	800a320 <TL_LLDTESTS_SendCliRspAck>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <TL_LLDTESTS_ReceiveCliRsp>:
 *
 * @param   Notbuffer : a pointer to TL_CmdPacket_t
 * @return  None
 */
void TL_LLDTESTS_ReceiveCliRsp( TL_CmdPacket_t * Notbuffer )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  TL_CmdPacket_t* l_CliBuffer = (TL_CmdPacket_t*)Notbuffer;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	617b      	str	r3, [r7, #20]
  uint8_t         l_size = l_CliBuffer->cmdserial.cmd.plen;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	7adb      	ldrb	r3, [r3, #11]
 8001574:	74fb      	strb	r3, [r7, #19]
  char *          sourceBuf = (char *)*(uint32_t *)l_CliBuffer->cmdserial.cmd.payload;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	330c      	adds	r3, #12
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  uint32_t        length = *(uint32_t *)&l_CliBuffer->cmdserial.cmd.payload[4];
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3310      	adds	r3, #16
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60bb      	str	r3, [r7, #8]
  
  if ((l_size > 0) && (length > 0))
 8001586:	7cfb      	ldrb	r3, [r7, #19]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01b      	beq.n	80015c4 <TL_LLDTESTS_ReceiveCliRsp+0x60>
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d018      	beq.n	80015c4 <TL_LLDTESTS_ReceiveCliRsp+0x60>
  {
    if (strncmp(sourceBuf, "CLI_Resp end", 12) == 0)
 8001592:	220c      	movs	r2, #12
 8001594:	4911      	ldr	r1, [pc, #68]	; (80015dc <TL_LLDTESTS_ReceiveCliRsp+0x78>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f009 fb1e 	bl	800abd8 <strncmp>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <TL_LLDTESTS_ReceiveCliRsp+0x58>
    {
      /* This is an answer to indicate that the CLI command has been completed */
#if (CFG_LED_SUPPORTED == 1U)
      BSP_LED_On(LED_RED);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f002 fa06 	bl	80039b4 <BSP_LED_On>
#endif
      /* Write a promp to UART and allow to receive a new command */
      uartTxBufferAdd(cliPrompt);
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <TL_LLDTESTS_ReceiveCliRsp+0x7c>)
 80015aa:	f7ff fd91 	bl	80010d0 <uartTxBufferAdd>
      
      currentCommandPos = 0;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <TL_LLDTESTS_ReceiveCliRsp+0x80>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
      rxCmdAllowed = 1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <TL_LLDTESTS_ReceiveCliRsp+0x84>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
    if (strncmp(sourceBuf, "CLI_Resp end", 12) == 0)
 80015ba:	e008      	b.n	80015ce <TL_LLDTESTS_ReceiveCliRsp+0x6a>
    }
    else
    {
      /* This is a test result or a test trace from M0 to write to CLI UART buffer */
      uartTxBufferAdd(sourceBuf);
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff fd87 	bl	80010d0 <uartTxBufferAdd>
    if (strncmp(sourceBuf, "CLI_Resp end", 12) == 0)
 80015c2:	e004      	b.n	80015ce <TL_LLDTESTS_ReceiveCliRsp+0x6a>
    }
  }
  else
  {
    APP_DBG((char *)"!! Empty M0 CLI response received by M4 !!");
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <TL_LLDTESTS_ReceiveCliRsp+0x88>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	2000      	movs	r0, #0
 80015ca:	f002 f855 	bl	8003678 <logApplication>
  }
  SendCliRspAckToM0();
 80015ce:	f7ff ffc3 	bl	8001558 <SendCliRspAckToM0>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	0800c794 	.word	0x0800c794
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20001910 	.word	0x20001910
 80015e8:	200000f1 	.word	0x200000f1
 80015ec:	0800c7a4 	.word	0x0800c7a4

080015f0 <SendM0CmdAckToM0>:
 * @brief Send Ack to M0 CLI Response channel.
 * @param  None
 * @retval None
 */
static void SendM0CmdAckToM0(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Notify M0 that CLI notification has been taken into account */
  TL_LLDTESTS_SendM0CmdAck();
 80015f4:	f008 fea6 	bl	800a344 <TL_LLDTESTS_SendM0CmdAck>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}

080015fc <TL_LLDTESTS_ReceiveM0Cmd>:
 *
 * @param   Notbuffer : a pointer to TL_CmdPacket_t
 * @return  None
 */
void TL_LLDTESTS_ReceiveM0Cmd( TL_CmdPacket_t * cmdBuffer )
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint8_t bufferSize = cmdBuffer->cmdserial.cmd.plen;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7adb      	ldrb	r3, [r3, #11]
 8001608:	73fb      	strb	r3, [r7, #15]
  char *cmdToken = strtok((char *)cmdBuffer->cmdserial.cmd.payload, " ");
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	330c      	adds	r3, #12
 800160e:	49b1      	ldr	r1, [pc, #708]	; (80018d4 <TL_LLDTESTS_ReceiveM0Cmd+0x2d8>)
 8001610:	4618      	mov	r0, r3
 8001612:	f009 faf5 	bl	800ac00 <strtok>
 8001616:	6138      	str	r0, [r7, #16]
  uint8_t cmdToken_index = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
  
  while (cmdToken != NULL) {
 800161c:	e00c      	b.n	8001638 <TL_LLDTESTS_ReceiveM0Cmd+0x3c>
    CmdFromM0Array[cmdToken_index++] = cmdToken;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	75fa      	strb	r2, [r7, #23]
 8001624:	4619      	mov	r1, r3
 8001626:	4aac      	ldr	r2, [pc, #688]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    cmdToken = strtok(NULL, " ");
 800162e:	49a9      	ldr	r1, [pc, #676]	; (80018d4 <TL_LLDTESTS_ReceiveM0Cmd+0x2d8>)
 8001630:	2000      	movs	r0, #0
 8001632:	f009 fae5 	bl	800ac00 <strtok>
 8001636:	6138      	str	r0, [r7, #16]
  while (cmdToken != NULL) {
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ef      	bne.n	800161e <TL_LLDTESTS_ReceiveM0Cmd+0x22>
  }

  if (bufferSize > 0)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 813b 	beq.w	80018bc <TL_LLDTESTS_ReceiveM0Cmd+0x2c0>
  {
    if (strncmp(CmdFromM0Array[0], "stop0_on", 8) == 0)
 8001646:	4ba4      	ldr	r3, [pc, #656]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2208      	movs	r2, #8
 800164c:	49a3      	ldr	r1, [pc, #652]	; (80018dc <TL_LLDTESTS_ReceiveM0Cmd+0x2e0>)
 800164e:	4618      	mov	r0, r3
 8001650:	f009 fac2 	bl	800abd8 <strncmp>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d107      	bne.n	800166a <TL_LLDTESTS_ReceiveM0Cmd+0x6e>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_STOP0_ON;
 800165a:	4ba1      	ldr	r3, [pc, #644]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001660:	2100      	movs	r1, #0
 8001662:	2001      	movs	r0, #1
 8001664:	f009 f91e 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001668:	e12d      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "stop1_on", 8) == 0)
 800166a:	4b9b      	ldr	r3, [pc, #620]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2208      	movs	r2, #8
 8001670:	499c      	ldr	r1, [pc, #624]	; (80018e4 <TL_LLDTESTS_ReceiveM0Cmd+0x2e8>)
 8001672:	4618      	mov	r0, r3
 8001674:	f009 fab0 	bl	800abd8 <strncmp>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d107      	bne.n	800168e <TL_LLDTESTS_ReceiveM0Cmd+0x92>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_STOP1_ON;
 800167e:	4b98      	ldr	r3, [pc, #608]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001684:	2100      	movs	r1, #0
 8001686:	2001      	movs	r0, #1
 8001688:	f009 f90c 	bl	800a8a4 <UTIL_SEQ_SetTask>
 800168c:	e11b      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "stop2_on", 8) == 0)
 800168e:	4b92      	ldr	r3, [pc, #584]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2208      	movs	r2, #8
 8001694:	4994      	ldr	r1, [pc, #592]	; (80018e8 <TL_LLDTESTS_ReceiveM0Cmd+0x2ec>)
 8001696:	4618      	mov	r0, r3
 8001698:	f009 fa9e 	bl	800abd8 <strncmp>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d107      	bne.n	80016b2 <TL_LLDTESTS_ReceiveM0Cmd+0xb6>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_STOP2_ON;
 80016a2:	4b8f      	ldr	r3, [pc, #572]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	2001      	movs	r0, #1
 80016ac:	f009 f8fa 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80016b0:	e109      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "stop_off", 8) == 0)
 80016b2:	4b89      	ldr	r3, [pc, #548]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2208      	movs	r2, #8
 80016b8:	498c      	ldr	r1, [pc, #560]	; (80018ec <TL_LLDTESTS_ReceiveM0Cmd+0x2f0>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f009 fa8c 	bl	800abd8 <strncmp>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <TL_LLDTESTS_ReceiveM0Cmd+0xda>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_STOP_OFF;
 80016c6:	4b86      	ldr	r3, [pc, #536]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	2001      	movs	r0, #1
 80016d0:	f009 f8e8 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80016d4:	e0f7      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "go_in_wfi", 9) == 0)
 80016d6:	4b80      	ldr	r3, [pc, #512]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2209      	movs	r2, #9
 80016dc:	4984      	ldr	r1, [pc, #528]	; (80018f0 <TL_LLDTESTS_ReceiveM0Cmd+0x2f4>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 fa7a 	bl	800abd8 <strncmp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <TL_LLDTESTS_ReceiveM0Cmd+0xfe>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_GO_IN_WFI;
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 80016ec:	2204      	movs	r2, #4
 80016ee:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80016f0:	2100      	movs	r1, #0
 80016f2:	2001      	movs	r0, #1
 80016f4:	f009 f8d6 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80016f8:	e0e5      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "go_directly_in_wfi", 18) == 0)
 80016fa:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2212      	movs	r2, #18
 8001700:	497c      	ldr	r1, [pc, #496]	; (80018f4 <TL_LLDTESTS_ReceiveM0Cmd+0x2f8>)
 8001702:	4618      	mov	r0, r3
 8001704:	f009 fa68 	bl	800abd8 <strncmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <TL_LLDTESTS_ReceiveM0Cmd+0x122>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_GO_DIRECTLY_IN_WFI;
 800170e:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001710:	2205      	movs	r2, #5
 8001712:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001714:	2100      	movs	r1, #0
 8001716:	2001      	movs	r0, #1
 8001718:	f009 f8c4 	bl	800a8a4 <UTIL_SEQ_SetTask>
 800171c:	e0d3      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "use_msi_no_pll_hse_off", 22) == 0)
 800171e:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2216      	movs	r2, #22
 8001724:	4974      	ldr	r1, [pc, #464]	; (80018f8 <TL_LLDTESTS_ReceiveM0Cmd+0x2fc>)
 8001726:	4618      	mov	r0, r3
 8001728:	f009 fa56 	bl	800abd8 <strncmp>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d107      	bne.n	8001742 <TL_LLDTESTS_ReceiveM0Cmd+0x146>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_USE_MSI;
 8001732:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001734:	2206      	movs	r2, #6
 8001736:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001738:	2100      	movs	r1, #0
 800173a:	2001      	movs	r0, #1
 800173c:	f009 f8b2 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001740:	e0c1      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "use_msi_no_pll_hse_on", 21) == 0)
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2215      	movs	r2, #21
 8001748:	496c      	ldr	r1, [pc, #432]	; (80018fc <TL_LLDTESTS_ReceiveM0Cmd+0x300>)
 800174a:	4618      	mov	r0, r3
 800174c:	f009 fa44 	bl	800abd8 <strncmp>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d107      	bne.n	8001766 <TL_LLDTESTS_ReceiveM0Cmd+0x16a>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_USE_MSI_HSE;
 8001756:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001758:	2207      	movs	r2, #7
 800175a:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800175c:	2100      	movs	r1, #0
 800175e:	2001      	movs	r0, #1
 8001760:	f009 f8a0 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001764:	e0af      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "use_msi_pll_hse_off", 19) == 0)
 8001766:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2213      	movs	r2, #19
 800176c:	4964      	ldr	r1, [pc, #400]	; (8001900 <TL_LLDTESTS_ReceiveM0Cmd+0x304>)
 800176e:	4618      	mov	r0, r3
 8001770:	f009 fa32 	bl	800abd8 <strncmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <TL_LLDTESTS_ReceiveM0Cmd+0x18e>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_USE_MSI_PLL;
 800177a:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 800177c:	2208      	movs	r2, #8
 800177e:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001780:	2100      	movs	r1, #0
 8001782:	2001      	movs	r0, #1
 8001784:	f009 f88e 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001788:	e09d      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "use_msi_pll_hse_on", 18) == 0)
 800178a:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2212      	movs	r2, #18
 8001790:	495c      	ldr	r1, [pc, #368]	; (8001904 <TL_LLDTESTS_ReceiveM0Cmd+0x308>)
 8001792:	4618      	mov	r0, r3
 8001794:	f009 fa20 	bl	800abd8 <strncmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <TL_LLDTESTS_ReceiveM0Cmd+0x1b2>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_USE_MSI_PLL_HSE;
 800179e:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 80017a0:	2209      	movs	r2, #9
 80017a2:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80017a4:	2100      	movs	r1, #0
 80017a6:	2001      	movs	r0, #1
 80017a8:	f009 f87c 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80017ac:	e08b      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "use_hse_no_pll", 14) == 0)
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	220e      	movs	r2, #14
 80017b4:	4954      	ldr	r1, [pc, #336]	; (8001908 <TL_LLDTESTS_ReceiveM0Cmd+0x30c>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f009 fa0e 	bl	800abd8 <strncmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <TL_LLDTESTS_ReceiveM0Cmd+0x1d6>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_USE_HSE;
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 80017c4:	220a      	movs	r2, #10
 80017c6:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2001      	movs	r0, #1
 80017cc:	f009 f86a 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80017d0:	e079      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "use_hse_pll", 11) == 0)
 80017d2:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	220b      	movs	r2, #11
 80017d8:	494c      	ldr	r1, [pc, #304]	; (800190c <TL_LLDTESTS_ReceiveM0Cmd+0x310>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f009 f9fc 	bl	800abd8 <strncmp>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <TL_LLDTESTS_ReceiveM0Cmd+0x1fa>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_USE_HSE_PLL;
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 80017e8:	220b      	movs	r2, #11
 80017ea:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80017ec:	2100      	movs	r1, #0
 80017ee:	2001      	movs	r0, #1
 80017f0:	f009 f858 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80017f4:	e067      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "ext_pa_enable", 13) == 0)
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	220d      	movs	r2, #13
 80017fc:	4944      	ldr	r1, [pc, #272]	; (8001910 <TL_LLDTESTS_ReceiveM0Cmd+0x314>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 f9ea 	bl	800abd8 <strncmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d107      	bne.n	800181a <TL_LLDTESTS_ReceiveM0Cmd+0x21e>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_EXT_PA_EN;
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 800180c:	220c      	movs	r2, #12
 800180e:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001810:	2100      	movs	r1, #0
 8001812:	2001      	movs	r0, #1
 8001814:	f009 f846 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001818:	e055      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "ext_pa_disable", 14) == 0)
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	220e      	movs	r2, #14
 8001820:	493c      	ldr	r1, [pc, #240]	; (8001914 <TL_LLDTESTS_ReceiveM0Cmd+0x318>)
 8001822:	4618      	mov	r0, r3
 8001824:	f009 f9d8 	bl	800abd8 <strncmp>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d107      	bne.n	800183e <TL_LLDTESTS_ReceiveM0Cmd+0x242>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_EXT_PA_DIS;
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001830:	220d      	movs	r2, #13
 8001832:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001834:	2100      	movs	r1, #0
 8001836:	2001      	movs	r0, #1
 8001838:	f009 f834 	bl	800a8a4 <UTIL_SEQ_SetTask>
 800183c:	e043      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "generate_hard_fault", 19) == 0)
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2213      	movs	r2, #19
 8001844:	4934      	ldr	r1, [pc, #208]	; (8001918 <TL_LLDTESTS_ReceiveM0Cmd+0x31c>)
 8001846:	4618      	mov	r0, r3
 8001848:	f009 f9c6 	bl	800abd8 <strncmp>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <TL_LLDTESTS_ReceiveM0Cmd+0x266>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_GENE_HARD_FAULT;
 8001852:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001854:	220e      	movs	r2, #14
 8001856:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8001858:	2100      	movs	r1, #0
 800185a:	2001      	movs	r0, #1
 800185c:	f009 f822 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001860:	e031      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "hse_tune_def", 12) == 0)
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	220c      	movs	r2, #12
 8001868:	492c      	ldr	r1, [pc, #176]	; (800191c <TL_LLDTESTS_ReceiveM0Cmd+0x320>)
 800186a:	4618      	mov	r0, r3
 800186c:	f009 f9b4 	bl	800abd8 <strncmp>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <TL_LLDTESTS_ReceiveM0Cmd+0x28a>
    {
      m0Cmd = CMD_FROM_M0_HSE_TUNE_DEF;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 8001878:	2210      	movs	r2, #16
 800187a:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command
      UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800187c:	2100      	movs	r1, #0
 800187e:	2001      	movs	r0, #1
 8001880:	f009 f810 	bl	800a8a4 <UTIL_SEQ_SetTask>
 8001884:	e01f      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
    else if (strncmp(CmdFromM0Array[0], "hse_tune", 8) == 0)
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <TL_LLDTESTS_ReceiveM0Cmd+0x2dc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2208      	movs	r2, #8
 800188c:	4924      	ldr	r1, [pc, #144]	; (8001920 <TL_LLDTESTS_ReceiveM0Cmd+0x324>)
 800188e:	4618      	mov	r0, r3
 8001890:	f009 f9a2 	bl	800abd8 <strncmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10a      	bne.n	80018b0 <TL_LLDTESTS_ReceiveM0Cmd+0x2b4>
    {
      // Save the command
      m0Cmd = CMD_FROM_M0_HSE_TUNE;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <TL_LLDTESTS_ReceiveM0Cmd+0x2e4>)
 800189c:	220f      	movs	r2, #15
 800189e:	701a      	strb	r2, [r3, #0]
      // Set the task to process the command, if all parameters have been given
      if (cmdToken_index == 2) {
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d10f      	bne.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
          UTIL_SEQ_SetTask(1U << CFG_TASK_CMD_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 80018a6:	2100      	movs	r1, #0
 80018a8:	2001      	movs	r0, #1
 80018aa:	f008 fffb 	bl	800a8a4 <UTIL_SEQ_SetTask>
 80018ae:	e00a      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
      }
    }
    else
    {
      APP_DBG((char *)"!! Unknown M0 command received by M4 !!");
 80018b0:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <TL_LLDTESTS_ReceiveM0Cmd+0x328>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	2000      	movs	r0, #0
 80018b6:	f001 fedf 	bl	8003678 <logApplication>
 80018ba:	e004      	b.n	80018c6 <TL_LLDTESTS_ReceiveM0Cmd+0x2ca>
    }
  }
  else
  {
    APP_DBG((char *)"!! Empty M0 command received by M4 !!");
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <TL_LLDTESTS_ReceiveM0Cmd+0x32c>)
 80018be:	2101      	movs	r1, #1
 80018c0:	2000      	movs	r0, #0
 80018c2:	f001 fed9 	bl	8003678 <logApplication>
  }
  SendM0CmdAckToM0();
 80018c6:	f7ff fe93 	bl	80015f0 <SendM0CmdAckToM0>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0800c7d0 	.word	0x0800c7d0
 80018d8:	2000411c 	.word	0x2000411c
 80018dc:	0800c7d4 	.word	0x0800c7d4
 80018e0:	20000008 	.word	0x20000008
 80018e4:	0800c7e0 	.word	0x0800c7e0
 80018e8:	0800c7ec 	.word	0x0800c7ec
 80018ec:	0800c7f8 	.word	0x0800c7f8
 80018f0:	0800c804 	.word	0x0800c804
 80018f4:	0800c810 	.word	0x0800c810
 80018f8:	0800c824 	.word	0x0800c824
 80018fc:	0800c83c 	.word	0x0800c83c
 8001900:	0800c854 	.word	0x0800c854
 8001904:	0800c868 	.word	0x0800c868
 8001908:	0800c87c 	.word	0x0800c87c
 800190c:	0800c88c 	.word	0x0800c88c
 8001910:	0800c898 	.word	0x0800c898
 8001914:	0800c8a8 	.word	0x0800c8a8
 8001918:	0800c8b8 	.word	0x0800c8b8
 800191c:	0800c8cc 	.word	0x0800c8cc
 8001920:	0800c8dc 	.word	0x0800c8dc
 8001924:	0800c8e8 	.word	0x0800c8e8
 8001928:	0800c910 	.word	0x0800c910

0800192c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800193a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <gpio_lld_phy_gpioHardFault_up>:
void gpio_lld_phy_gpioTx_down(void) {
  HAL_GPIO_WritePin(GPIO_TX_PORT, GPIO_TX_PIN, GPIO_PIN_RESET);
}

/* Set PHY GPIO_HARD_FAULT to '1' */
void gpio_lld_phy_gpioHardFault_up(void) {
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIO_HARD_FAULT_PORT, GPIO_HARD_FAULT_PIN, GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2110      	movs	r1, #16
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f003 fad7 	bl	8004f1c <HAL_GPIO_WritePin>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <gpio_lld_extPa_init>:
  //HAL_RCC_MCOConfig(RCC_MCO3, RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1);
  LL_RCC_ConfigMCO(RCC_MCO1SOURCE_NOCLOCK, RCC_MCODIV_1);
}

/* Initialize GPIOs for external PA use */
void gpio_lld_extPa_init(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable clock(s) for GPIOs */
#ifdef CORE_CM4
  // Enable GPIO clocks for M4 use
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2002      	movs	r0, #2
 800197c:	f7ff ffd6 	bl	800192c <LL_AHB2_GRP1_EnableClock>
  // Enable GPIO clocks for M0 use
  __HAL_RCC_C2GPIOB_CLK_ENABLE();
#endif
  
  // configure the GPIO PB0 in AF6 to be used as RF_TX_MOD_EXT_PA
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_DTB0;
 800198c:	2306      	movs	r3, #6
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pin       = GPIO_EXT_PA_TX_PIN;
 8001990:	2301      	movs	r3, #1
 8001992:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIO_EXT_PA_TX_PORT, &GPIO_InitStruct);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	480a      	ldr	r0, [pc, #40]	; (80019c4 <gpio_lld_extPa_init+0x50>)
 800199a:	f003 f871 	bl	8004a80 <HAL_GPIO_Init>
  
  // configure the GPIO which will be managed by M0 stack to enable Ext PA
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pin   = GPIO_EXT_PA_EN_PIN;
 80019aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ae:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIO_EXT_PA_EN_PORT, &GPIO_InitStruct);
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <gpio_lld_extPa_init+0x50>)
 80019b6:	f003 f863 	bl	8004a80 <HAL_GPIO_Init>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	48000400 	.word	0x48000400

080019c8 <gpio_lld_extPa_deInit>:

/* De-initialize GPIOs for external PA use */
void gpio_lld_extPa_deInit(void) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(GPIO_EXT_PA_TX_PORT, GPIO_EXT_PA_TX_PIN);
 80019cc:	2101      	movs	r1, #1
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <gpio_lld_extPa_deInit+0x1c>)
 80019d0:	f003 f9c6 	bl	8004d60 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIO_EXT_PA_EN_PORT, GPIO_EXT_PA_EN_PIN);
 80019d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <gpio_lld_extPa_deInit+0x1c>)
 80019da:	f003 f9c1 	bl	8004d60 <HAL_GPIO_DeInit>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	48000400 	.word	0x48000400

080019e8 <gpio_lld_usart_init>:
// No GPIO to initialize in DORY slave
}
#endif

/* Initialize GPIOs used by USART */
void gpio_lld_usart_init(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
  __HAL_RCC_C2GPIOA_CLK_ENABLE();
#endif
#else
#ifdef CORE_CM4
  // Enable GPIO clocks for M4 use
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2002      	movs	r0, #2
 80019f0:	f7ff ff9c 	bl	800192c <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#else
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f4:	23c0      	movs	r3, #192	; 0xc0
 80019f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a04:	2307      	movs	r3, #7
 8001a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <gpio_lld_usart_init+0x34>)
 8001a0e:	f003 f837 	bl	8004a80 <HAL_GPIO_Init>
#endif
}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	48000400 	.word	0x48000400

08001a20 <gpio_lld_usart_deInit>:

/* De-initialize GPIOs used by USART */
void gpio_lld_usart_deInit(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  */
#if USE_NEW_SET_OF_GPIO_FOR_USART
  HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
  HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
#else
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	4804      	ldr	r0, [pc, #16]	; (8001a38 <gpio_lld_usart_deInit+0x18>)
 8001a28:	f003 f99a 	bl	8004d60 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001a2c:	2180      	movs	r1, #128	; 0x80
 8001a2e:	4802      	ldr	r0, [pc, #8]	; (8001a38 <gpio_lld_usart_deInit+0x18>)
 8001a30:	f003 f996 	bl	8004d60 <HAL_GPIO_DeInit>
#endif
  
  /* Do not disable clocks as they could be used by others GPIOs and it seems to not need power in STOP mode */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	48000400 	.word	0x48000400

08001a3c <gpio_lld_lpuart_init>:

/* Initialize GPIOs used by LPUART */
void gpio_lld_lpuart_init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
  __HAL_RCC_C2GPIOB_CLK_ENABLE();
#endif
#else
#ifdef CORE_CM4
  // Enable GPIO clocks for M4 use
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2004      	movs	r0, #4
 8001a44:	f7ff ff72 	bl	800192c <LL_AHB2_GRP1_EnableClock>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
#else
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <gpio_lld_lpuart_init+0x34>)
 8001a62:	f003 f80d 	bl	8004a80 <HAL_GPIO_Init>
#endif
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	48000800 	.word	0x48000800

08001a74 <gpio_lld_lpuart_deInit>:

/* De-initialize GPIOs used by LPUART */
void gpio_lld_lpuart_deInit(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  */
#ifdef STM32WB35xx
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5);
#else
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0 | GPIO_PIN_1);
 8001a78:	2103      	movs	r1, #3
 8001a7a:	4802      	ldr	r0, [pc, #8]	; (8001a84 <gpio_lld_lpuart_deInit+0x10>)
 8001a7c:	f003 f970 	bl	8004d60 <HAL_GPIO_DeInit>
#endif
  /* Do not disable clocks as they could be used by others GPIOs and it seems to not need power in STOP mode */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	48000800 	.word	0x48000800

08001a88 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <LL_PWR_EnableBootC2+0x1c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <LL_PWR_EnableBootC2+0x1c>)
 8001a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	58000400 	.word	0x58000400

08001aa8 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001ab2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	58000800 	.word	0x58000800

08001ad0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	4904      	ldr	r1, [pc, #16]	; (8001af0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	620b      	str	r3, [r1, #32]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	58000800 	.word	0x58000800

08001af4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b50:	68fb      	ldr	r3, [r7, #12]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f043 0201 	orr.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	601a      	str	r2, [r3, #0]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	605a      	str	r2, [r3, #4]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	605a      	str	r2, [r3, #4]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	609a      	str	r2, [r3, #8]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	041a      	lsls	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d101      	bne.n	8001c84 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69da      	ldr	r2, [r3, #28]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d101      	bne.n	8001cae <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	482a      	ldr	r0, [pc, #168]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001cc4:	f7ff ffe5 	bl	8001c92 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HW_IPCC_Rx_Handler+0x26>
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001cdc:	f000 f8e8 	bl	8001eb0 <HW_IPCC_SYS_EvtHandler>
 8001ce0:	e041      	b.n	8001d66 <HW_IPCC_Rx_Handler+0xaa>
  {
    HW_IPCC_THREAD_CliNotEvtHandler();
  }
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_LLDTESTS_CLI_RSP_CHANNEL ))
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	4821      	ldr	r0, [pc, #132]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001ce6:	f7ff ffd4 	bl	8001c92 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HW_IPCC_Rx_Handler+0x48>
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HW_IPCC_Rx_Handler+0x48>
  {
    HW_IPCC_LLDTESTS_ReceiveCliRspHandler();
 8001cfe:	f000 f8fb 	bl	8001ef8 <HW_IPCC_LLDTESTS_ReceiveCliRspHandler>
 8001d02:	e030      	b.n	8001d66 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_LLDTESTS_M0_CMD_CHANNEL ))
 8001d04:	2104      	movs	r1, #4
 8001d06:	4819      	ldr	r0, [pc, #100]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001d08:	f7ff ffc3 	bl	8001c92 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HW_IPCC_Rx_Handler+0x6a>
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HW_IPCC_Rx_Handler+0x6a>
  {
    HW_IPCC_LLDTESTS_ReceiveM0CmdHandler();
 8001d20:	f000 f904 	bl	8001f2c <HW_IPCC_LLDTESTS_ReceiveM0CmdHandler>
 8001d24:	e01f      	b.n	8001d66 <HW_IPCC_Rx_Handler+0xaa>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8001d26:	2101      	movs	r1, #1
 8001d28:	4810      	ldr	r0, [pc, #64]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001d2a:	f7ff ffb2 	bl	8001c92 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HW_IPCC_Rx_Handler+0x8a>
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <HW_IPCC_Rx_Handler+0x8a>
  {
    HW_IPCC_BLE_EvtHandler();
 8001d40:	f000 f87a 	bl	8001e38 <HW_IPCC_BLE_EvtHandler>
 8001d44:	e00f      	b.n	8001d66 <HW_IPCC_Rx_Handler+0xaa>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8001d46:	2108      	movs	r1, #8
 8001d48:	4808      	ldr	r0, [pc, #32]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001d4a:	f7ff ffa2 	bl	8001c92 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <HW_IPCC_Rx_Handler+0xac>
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HW_IPCC_Rx_Handler+0xb0>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HW_IPCC_Rx_Handler+0xac>
  {
    HW_IPCC_TRACES_EvtHandler();
 8001d62:	f000 f93d 	bl	8001fe0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
}
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	58000c00 	.word	0x58000c00

08001d70 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8001d74:	2102      	movs	r1, #2
 8001d76:	481a      	ldr	r0, [pc, #104]	; (8001de0 <HW_IPCC_Tx_Handler+0x70>)
 8001d78:	f7ff ff76 	bl	8001c68 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HW_IPCC_Tx_Handler+0x26>
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HW_IPCC_Tx_Handler+0x70>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001d90:	f000 f882 	bl	8001e98 <HW_IPCC_SYS_CmdEvtHandler>
 8001d94:	e020      	b.n	8001dd8 <HW_IPCC_Tx_Handler+0x68>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */

  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8001d96:	2108      	movs	r1, #8
 8001d98:	4811      	ldr	r0, [pc, #68]	; (8001de0 <HW_IPCC_Tx_Handler+0x70>)
 8001d9a:	f7ff ff65 	bl	8001c68 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HW_IPCC_Tx_Handler+0x48>
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HW_IPCC_Tx_Handler+0x70>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001db2:	f000 f8f7 	bl	8001fa4 <HW_IPCC_MM_FreeBufHandler>
 8001db6:	e00f      	b.n	8001dd8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8001db8:	2120      	movs	r1, #32
 8001dba:	4809      	ldr	r0, [pc, #36]	; (8001de0 <HW_IPCC_Tx_Handler+0x70>)
 8001dbc:	f7ff ff54 	bl	8001c68 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HW_IPCC_Tx_Handler+0x6a>
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HW_IPCC_Tx_Handler+0x70>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8001dd4:	f000 f83c 	bl	8001e50 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
}
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	58000c00 	.word	0x58000c00

08001de4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8001de8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001dec:	f7ff fe9b 	bl	8001b26 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001df0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001df4:	f7ff fe58 	bl	8001aa8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8001df8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dfc:	f7ff fe68 	bl	8001ad0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001e00:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001e02:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001e04:	f7ff fe40 	bl	8001a88 <LL_PWR_EnableBootC2>

  return;
 8001e08:	bf00      	nop
}
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001e10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e14:	f7ff fe6e 	bl	8001af4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HW_IPCC_Init+0x28>)
 8001e1a:	f7ff feb0 	bl	8001b7e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <HW_IPCC_Init+0x28>)
 8001e20:	f7ff fe9d 	bl	8001b5e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e24:	202c      	movs	r0, #44	; 0x2c
 8001e26:	f002 f847 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e2a:	202d      	movs	r0, #45	; 0x2d
 8001e2c:	f002 f844 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

  return;
 8001e30:	bf00      	nop
}
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	58000c00 	.word	0x58000c00

08001e38 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8001e3c:	f008 f986 	bl	800a14c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8001e40:	2101      	movs	r1, #1
 8001e42:	4802      	ldr	r0, [pc, #8]	; (8001e4c <HW_IPCC_BLE_EvtHandler+0x14>)
 8001e44:	f7ff fef3 	bl	8001c2e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001e48:	bf00      	nop
}
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	58000c00 	.word	0x58000c00

08001e50 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8001e54:	2120      	movs	r1, #32
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8001e58:	f7ff feb4 	bl	8001bc4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8001e5c:	f008 f9a6 	bl	800a1ac <HW_IPCC_BLE_AclDataAckNot>

  return;
 8001e60:	bf00      	nop
}
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	58000c00 	.word	0x58000c00

08001e68 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <HW_IPCC_SYS_Init+0x10>)
 8001e70:	f7ff feba 	bl	8001be8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001e74:	bf00      	nop
}
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	58000c00 	.word	0x58000c00

08001e7c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001e80:	2102      	movs	r1, #2
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <HW_IPCC_SYS_SendCmd+0x18>)
 8001e84:	f7ff fee1 	bl	8001c4a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001e88:	2102      	movs	r1, #2
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <HW_IPCC_SYS_SendCmd+0x18>)
 8001e8c:	f7ff fe87 	bl	8001b9e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001e90:	bf00      	nop
}
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	58000c00 	.word	0x58000c00

08001e98 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4803      	ldr	r0, [pc, #12]	; (8001eac <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001ea0:	f7ff fe90 	bl	8001bc4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001ea4:	f008 f9d2 	bl	800a24c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001ea8:	bf00      	nop
}
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	58000c00 	.word	0x58000c00

08001eb0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001eb4:	f008 f9e0 	bl	800a278 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001ebc:	f7ff feb7 	bl	8001c2e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ec0:	bf00      	nop
}
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	58000c00 	.word	0x58000c00

08001ec8 <HW_IPCC_LLDTESTS_Init>:
/******************************************************************************
 * LLD TESTS
 ******************************************************************************/
#ifdef LLD_TESTS_WB
void HW_IPCC_LLDTESTS_Init( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_LLDTESTS_CLI_RSP_CHANNEL );
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <HW_IPCC_LLDTESTS_Init+0x18>)
 8001ed0:	f7ff fe8a 	bl	8001be8 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_LLDTESTS_M0_CMD_CHANNEL );
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <HW_IPCC_LLDTESTS_Init+0x18>)
 8001ed8:	f7ff fe86 	bl	8001be8 <LL_C1_IPCC_EnableReceiveChannel>
  return;
 8001edc:	bf00      	nop
}
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58000c00 	.word	0x58000c00

08001ee4 <HW_IPCC_LLDTESTS_SendCliCmd>:

void HW_IPCC_LLDTESTS_SendCliCmd( void )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_LLDTESTS_CLI_CMD_CHANNEL );
 8001ee8:	2110      	movs	r1, #16
 8001eea:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <HW_IPCC_LLDTESTS_SendCliCmd+0x10>)
 8001eec:	f7ff fead 	bl	8001c4a <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001ef0:	bf00      	nop
}
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	58000c00 	.word	0x58000c00

08001ef8 <HW_IPCC_LLDTESTS_ReceiveCliRspHandler>:

static void HW_IPCC_LLDTESTS_ReceiveCliRspHandler( void )
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_LLDTESTS_CLI_RSP_CHANNEL );
 8001efc:	2110      	movs	r1, #16
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <HW_IPCC_LLDTESTS_ReceiveCliRspHandler+0x14>)
 8001f00:	f7ff fe84 	bl	8001c0c <LL_C1_IPCC_DisableReceiveChannel>
  HW_IPCC_LLDTESTS_ReceiveCliRsp();
 8001f04:	f008 fa00 	bl	800a308 <HW_IPCC_LLDTESTS_ReceiveCliRsp>
  return;
 8001f08:	bf00      	nop
}
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58000c00 	.word	0x58000c00

08001f10 <HW_IPCC_LLDTESTS_SendCliRspAck>:

void HW_IPCC_LLDTESTS_SendCliRspAck( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_LLDTESTS_CLI_RSP_CHANNEL );
 8001f14:	2110      	movs	r1, #16
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <HW_IPCC_LLDTESTS_SendCliRspAck+0x18>)
 8001f18:	f7ff fe89 	bl	8001c2e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_LLDTESTS_CLI_RSP_CHANNEL );
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	4802      	ldr	r0, [pc, #8]	; (8001f28 <HW_IPCC_LLDTESTS_SendCliRspAck+0x18>)
 8001f20:	f7ff fe62 	bl	8001be8 <LL_C1_IPCC_EnableReceiveChannel>
  return;
 8001f24:	bf00      	nop
}
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	58000c00 	.word	0x58000c00

08001f2c <HW_IPCC_LLDTESTS_ReceiveM0CmdHandler>:

static void HW_IPCC_LLDTESTS_ReceiveM0CmdHandler( void )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_LLDTESTS_M0_CMD_CHANNEL );
 8001f30:	2104      	movs	r1, #4
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <HW_IPCC_LLDTESTS_ReceiveM0CmdHandler+0x14>)
 8001f34:	f7ff fe6a 	bl	8001c0c <LL_C1_IPCC_DisableReceiveChannel>
  HW_IPCC_LLDTESTS_ReceiveM0Cmd();
 8001f38:	f008 f9f8 	bl	800a32c <HW_IPCC_LLDTESTS_ReceiveM0Cmd>
  return;
 8001f3c:	bf00      	nop
}
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	58000c00 	.word	0x58000c00

08001f44 <HW_IPCC_LLDTESTS_SendM0CmdAck>:


void HW_IPCC_LLDTESTS_SendM0CmdAck( void )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_LLDTESTS_M0_CMD_CHANNEL );
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4804      	ldr	r0, [pc, #16]	; (8001f5c <HW_IPCC_LLDTESTS_SendM0CmdAck+0x18>)
 8001f4c:	f7ff fe6f 	bl	8001c2e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_LLDTESTS_M0_CMD_CHANNEL );
 8001f50:	2104      	movs	r1, #4
 8001f52:	4802      	ldr	r0, [pc, #8]	; (8001f5c <HW_IPCC_LLDTESTS_SendM0CmdAck+0x18>)
 8001f54:	f7ff fe48 	bl	8001be8 <LL_C1_IPCC_EnableReceiveChannel>
  return;
 8001f58:	bf00      	nop
}
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	58000c00 	.word	0x58000c00

08001f60 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001f68:	2108      	movs	r1, #8
 8001f6a:	480c      	ldr	r0, [pc, #48]	; (8001f9c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001f6c:	f7ff fe7c 	bl	8001c68 <LL_C1_IPCC_IsActiveFlag_CHx>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001f80:	f7ff fe0d 	bl	8001b9e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001f84:	e006      	b.n	8001f94 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001f8a:	2108      	movs	r1, #8
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001f8e:	f7ff fe5c 	bl	8001c4a <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001f92:	bf00      	nop
}
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	58000c00 	.word	0x58000c00
 8001fa0:	20004128 	.word	0x20004128

08001fa4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001fa8:	2108      	movs	r1, #8
 8001faa:	4806      	ldr	r0, [pc, #24]	; (8001fc4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001fac:	f7ff fe0a 	bl	8001bc4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001fba:	f7ff fe46 	bl	8001c4a <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001fbe:	bf00      	nop
}
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	58000c00 	.word	0x58000c00
 8001fc8:	20004128 	.word	0x20004128

08001fcc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <HW_IPCC_TRACES_Init+0x10>)
 8001fd4:	f7ff fe08 	bl	8001be8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001fd8:	bf00      	nop
}
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58000c00 	.word	0x58000c00

08001fe0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001fe4:	f008 fa3a 	bl	800a45c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001fe8:	2108      	movs	r1, #8
 8001fea:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001fec:	f7ff fe1f 	bl	8001c2e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001ff0:	bf00      	nop
}
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	58000c00 	.word	0x58000c00

08001ff8 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1U : 0U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d101      	bne.n	8002010 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d101      	bne.n	8002054 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1TxCb)(void);
#endif

/* Functions Definition ------------------------------------------------------*/
hw_status_t HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	4613      	mov	r3, r2
 8002090:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002096:	2300      	movs	r3, #0
 8002098:	75bb      	strb	r3, [r7, #22]
    
    switch (hw_uart_id)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HW_UART_Receive_IT+0x26>
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d00f      	beq.n	80020c4 <HW_UART_Receive_IT+0x44>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80020a4:	e01d      	b.n	80020e2 <HW_UART_Receive_IT+0x62>
            HW_UART_RX_IT(huart1, USART1);
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HW_UART_Receive_IT+0xa4>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HW_UART_Receive_IT+0xa8>)
 80020ae:	4a1f      	ldr	r2, [pc, #124]	; (800212c <HW_UART_Receive_IT+0xac>)
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	89bb      	ldrh	r3, [r7, #12]
 80020b4:	461a      	mov	r2, r3
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	481b      	ldr	r0, [pc, #108]	; (8002128 <HW_UART_Receive_IT+0xa8>)
 80020ba:	f004 fe9b 	bl	8006df4 <HAL_UART_Receive_IT>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]
            break;
 80020c2:	e00e      	b.n	80020e2 <HW_UART_Receive_IT+0x62>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80020c4:	4a1a      	ldr	r2, [pc, #104]	; (8002130 <HW_UART_Receive_IT+0xb0>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HW_UART_Receive_IT+0xb4>)
 80020cc:	4a1a      	ldr	r2, [pc, #104]	; (8002138 <HW_UART_Receive_IT+0xb8>)
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	4817      	ldr	r0, [pc, #92]	; (8002134 <HW_UART_Receive_IT+0xb4>)
 80020d8:	f004 fe8c 	bl	8006df4 <HAL_UART_Receive_IT>
 80020dc:	4603      	mov	r3, r0
 80020de:	75fb      	strb	r3, [r7, #23]
            break;
 80020e0:	bf00      	nop
    }

    switch (hal_status)
 80020e2:	7dfb      	ldrb	r3, [r7, #23]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d817      	bhi.n	8002118 <HW_UART_Receive_IT+0x98>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HW_UART_Receive_IT+0x70>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002107 	.word	0x08002107
 80020f8:	0800210d 	.word	0x0800210d
 80020fc:	08002113 	.word	0x08002113
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002100:	2300      	movs	r3, #0
 8002102:	75bb      	strb	r3, [r7, #22]
            break;
 8002104:	e009      	b.n	800211a <HW_UART_Receive_IT+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002106:	2301      	movs	r3, #1
 8002108:	75bb      	strb	r3, [r7, #22]
            break;
 800210a:	e006      	b.n	800211a <HW_UART_Receive_IT+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800210c:	2302      	movs	r3, #2
 800210e:	75bb      	strb	r3, [r7, #22]
            break;
 8002110:	e003      	b.n	800211a <HW_UART_Receive_IT+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002112:	2303      	movs	r3, #3
 8002114:	75bb      	strb	r3, [r7, #22]
            break;
 8002116:	e000      	b.n	800211a <HW_UART_Receive_IT+0x9a>

        default:
            break;
 8002118:	bf00      	nop
    }

    return hw_status;
 800211a:	7dbb      	ldrb	r3, [r7, #22]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	2000412c 	.word	0x2000412c
 8002128:	20004230 	.word	0x20004230
 800212c:	40013800 	.word	0x40013800
 8002130:	20004134 	.word	0x20004134
 8002134:	20004140 	.word	0x20004140
 8002138:	40008000 	.word	0x40008000

0800213c <HW_UART_Transmit_IT>:

hw_status_t HW_UART_Transmit_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size,  void (*cb)(void))
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	4613      	mov	r3, r2
 800214c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002152:	2300      	movs	r3, #0
 8002154:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HW_UART_Transmit_IT+0x26>
 800215c:	2b02      	cmp	r3, #2
 800215e:	d00f      	beq.n	8002180 <HW_UART_Transmit_IT+0x44>
            HW_UART_TX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002160:	e01d      	b.n	800219e <HW_UART_Transmit_IT+0x62>
            HW_UART_TX_IT(huart1, USART1);
 8002162:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HW_UART_Transmit_IT+0xa4>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HW_UART_Transmit_IT+0xa8>)
 800216a:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <HW_UART_Transmit_IT+0xac>)
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	89bb      	ldrh	r3, [r7, #12]
 8002170:	461a      	mov	r2, r3
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	481b      	ldr	r0, [pc, #108]	; (80021e4 <HW_UART_Transmit_IT+0xa8>)
 8002176:	f004 fd95 	bl	8006ca4 <HAL_UART_Transmit_IT>
 800217a:	4603      	mov	r3, r0
 800217c:	75fb      	strb	r3, [r7, #23]
            break;
 800217e:	e00e      	b.n	800219e <HW_UART_Transmit_IT+0x62>
            HW_UART_TX_IT(hlpuart1, LPUART1);
 8002180:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HW_UART_Transmit_IT+0xb0>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HW_UART_Transmit_IT+0xb4>)
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HW_UART_Transmit_IT+0xb8>)
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	89bb      	ldrh	r3, [r7, #12]
 800218e:	461a      	mov	r2, r3
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4817      	ldr	r0, [pc, #92]	; (80021f0 <HW_UART_Transmit_IT+0xb4>)
 8002194:	f004 fd86 	bl	8006ca4 <HAL_UART_Transmit_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	75fb      	strb	r3, [r7, #23]
            break;
 800219c:	bf00      	nop
    }

    switch (hal_status)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d817      	bhi.n	80021d4 <HW_UART_Transmit_IT+0x98>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <HW_UART_Transmit_IT+0x70>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021bd 	.word	0x080021bd
 80021b0:	080021c3 	.word	0x080021c3
 80021b4:	080021c9 	.word	0x080021c9
 80021b8:	080021cf 	.word	0x080021cf
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80021bc:	2300      	movs	r3, #0
 80021be:	75bb      	strb	r3, [r7, #22]
            break;
 80021c0:	e009      	b.n	80021d6 <HW_UART_Transmit_IT+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80021c2:	2301      	movs	r3, #1
 80021c4:	75bb      	strb	r3, [r7, #22]
            break;
 80021c6:	e006      	b.n	80021d6 <HW_UART_Transmit_IT+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80021c8:	2302      	movs	r3, #2
 80021ca:	75bb      	strb	r3, [r7, #22]
            break;
 80021cc:	e003      	b.n	80021d6 <HW_UART_Transmit_IT+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80021ce:	2303      	movs	r3, #3
 80021d0:	75bb      	strb	r3, [r7, #22]
            break;
 80021d2:	e000      	b.n	80021d6 <HW_UART_Transmit_IT+0x9a>

        default:
            break;
 80021d4:	bf00      	nop
    }

    return hw_status;
 80021d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20004130 	.word	0x20004130
 80021e4:	20004230 	.word	0x20004230
 80021e8:	40013800 	.word	0x40013800
 80021ec:	20004138 	.word	0x20004138
 80021f0:	20004140 	.word	0x20004140
 80021f4:	40008000 	.word	0x40008000

080021f8 <HW_UART_Transmit_LL>:
    return hw_status;
}

// To be use carrefuly as it must only be used when the UART is not used by another task or interrupt context
hw_status_t HW_UART_Transmit_LL(hw_uart_id_t hw_uart_id, uint8_t data)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	460a      	mov	r2, r1
 8002202:	71fb      	strb	r3, [r7, #7]
 8002204:	4613      	mov	r3, r2
 8002206:	71bb      	strb	r3, [r7, #6]
    hw_status_t hw_status = hw_uart_ok;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]

    switch (hw_uart_id)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HW_UART_Transmit_LL+0x20>
 8002212:	2b02      	cmp	r3, #2
 8002214:	d00d      	beq.n	8002232 <HW_UART_Transmit_LL+0x3a>
            LL_LPUART_TransmitData8(LPUART1, data);
            break;
#endif

        default:
            break;
 8002216:	e019      	b.n	800224c <HW_UART_Transmit_LL+0x54>
            while (!(LL_USART_IsActiveFlag_TXE_TXFNF(USART1))) {};
 8002218:	bf00      	nop
 800221a:	480f      	ldr	r0, [pc, #60]	; (8002258 <HW_UART_Transmit_LL+0x60>)
 800221c:	f7ff feec 	bl	8001ff8 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f9      	beq.n	800221a <HW_UART_Transmit_LL+0x22>
            LL_USART_TransmitData8(USART1, data);
 8002226:	79bb      	ldrb	r3, [r7, #6]
 8002228:	4619      	mov	r1, r3
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <HW_UART_Transmit_LL+0x60>)
 800222c:	f7ff fef7 	bl	800201e <LL_USART_TransmitData8>
            break;
 8002230:	e00c      	b.n	800224c <HW_UART_Transmit_LL+0x54>
            while (!(LL_LPUART_IsActiveFlag_TXE_TXFNF(LPUART1))) {};
 8002232:	bf00      	nop
 8002234:	4809      	ldr	r0, [pc, #36]	; (800225c <HW_UART_Transmit_LL+0x64>)
 8002236:	f7ff ff01 	bl	800203c <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f9      	beq.n	8002234 <HW_UART_Transmit_LL+0x3c>
            LL_LPUART_TransmitData8(LPUART1, data);
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <HW_UART_Transmit_LL+0x64>)
 8002246:	f7ff ff0c 	bl	8002062 <LL_LPUART_TransmitData8>
            break;
 800224a:	bf00      	nop
    }

    return hw_status;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40013800 	.word	0x40013800
 800225c:	40008000 	.word	0x40008000

08002260 <HW_UART_Transmit_DMA>:

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4603      	mov	r3, r0
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	4613      	mov	r3, r2
 8002270:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002276:	2300      	movs	r3, #0
 8002278:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HW_UART_Transmit_DMA+0x26>
 8002280:	2b02      	cmp	r3, #2
 8002282:	d00f      	beq.n	80022a4 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002284:	e01d      	b.n	80022c2 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HW_UART_Transmit_DMA+0xa4>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HW_UART_Transmit_DMA+0xa8>)
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HW_UART_Transmit_DMA+0xac>)
 8002290:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	481b      	ldr	r0, [pc, #108]	; (8002308 <HW_UART_Transmit_DMA+0xa8>)
 800229a:	f004 fe01 	bl	8006ea0 <HAL_UART_Transmit_DMA>
 800229e:	4603      	mov	r3, r0
 80022a0:	75fb      	strb	r3, [r7, #23]
            break;
 80022a2:	e00e      	b.n	80022c2 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HW_UART_Transmit_DMA+0xb0>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HW_UART_Transmit_DMA+0xb4>)
 80022ac:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HW_UART_Transmit_DMA+0xb8>)
 80022ae:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80022b0:	89bb      	ldrh	r3, [r7, #12]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	4817      	ldr	r0, [pc, #92]	; (8002314 <HW_UART_Transmit_DMA+0xb4>)
 80022b8:	f004 fdf2 	bl	8006ea0 <HAL_UART_Transmit_DMA>
 80022bc:	4603      	mov	r3, r0
 80022be:	75fb      	strb	r3, [r7, #23]
            break;
 80022c0:	bf00      	nop
    }

    switch (hal_status)
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d817      	bhi.n	80022f8 <HW_UART_Transmit_DMA+0x98>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <HW_UART_Transmit_DMA+0x70>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022e7 	.word	0x080022e7
 80022d8:	080022ed 	.word	0x080022ed
 80022dc:	080022f3 	.word	0x080022f3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80022e0:	2300      	movs	r3, #0
 80022e2:	75bb      	strb	r3, [r7, #22]
            break;
 80022e4:	e009      	b.n	80022fa <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75bb      	strb	r3, [r7, #22]
            break;
 80022ea:	e006      	b.n	80022fa <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80022ec:	2302      	movs	r3, #2
 80022ee:	75bb      	strb	r3, [r7, #22]
            break;
 80022f0:	e003      	b.n	80022fa <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80022f2:	2303      	movs	r3, #3
 80022f4:	75bb      	strb	r3, [r7, #22]
            break;
 80022f6:	e000      	b.n	80022fa <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80022f8:	bf00      	nop
    }

    return hw_status;
 80022fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20004130 	.word	0x20004130
 8002308:	20004230 	.word	0x20004230
 800230c:	40013800 	.word	0x40013800
 8002310:	20004138 	.word	0x20004138
 8002314:	20004140 	.word	0x20004140
 8002318:	40008000 	.word	0x40008000

0800231c <HAL_UART_RxCpltCallback>:
    return;
}
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <HAL_UART_RxCpltCallback+0x4c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00a      	beq.n	8002344 <HAL_UART_RxCpltCallback+0x28>
 800232e:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_UART_RxCpltCallback+0x50>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10f      	bne.n	8002354 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_UART_RxCpltCallback+0x54>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_UART_RxCpltCallback+0x54>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4798      	blx	r3
            }
            break;
 8002342:	e009      	b.n	8002358 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_UART_RxCpltCallback+0x58>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_UART_RxCpltCallback+0x58>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4798      	blx	r3
            }
            break;
 8002352:	e003      	b.n	800235c <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8002354:	bf00      	nop
 8002356:	e002      	b.n	800235e <HAL_UART_RxCpltCallback+0x42>
            break;
 8002358:	bf00      	nop
 800235a:	e000      	b.n	800235e <HAL_UART_RxCpltCallback+0x42>
            break;
 800235c:	bf00      	nop
    }

    return;
 800235e:	bf00      	nop
}
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40008000 	.word	0x40008000
 800236c:	40013800 	.word	0x40013800
 8002370:	2000412c 	.word	0x2000412c
 8002374:	20004134 	.word	0x20004134

08002378 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <HAL_UART_TxCpltCallback+0x4c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00a      	beq.n	80023a0 <HAL_UART_TxCpltCallback+0x28>
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <HAL_UART_TxCpltCallback+0x50>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_UART_TxCpltCallback+0x54>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_UART_TxCpltCallback+0x54>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4798      	blx	r3
            }
            break;
 800239e:	e009      	b.n	80023b4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_UART_TxCpltCallback+0x58>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_UART_TxCpltCallback+0x58>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4798      	blx	r3
            }
            break;
 80023ae:	e003      	b.n	80023b8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80023b0:	bf00      	nop
 80023b2:	e002      	b.n	80023ba <HAL_UART_TxCpltCallback+0x42>
            break;
 80023b4:	bf00      	nop
 80023b6:	e000      	b.n	80023ba <HAL_UART_TxCpltCallback+0x42>
            break;
 80023b8:	bf00      	nop
    }

    return;
 80023ba:	bf00      	nop
}
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40008000 	.word	0x40008000
 80023c8:	40013800 	.word	0x40013800
 80023cc:	20004130 	.word	0x20004130
 80023d0:	20004138 	.word	0x20004138

080023d4 <LL_EXTI_DisableIT_0_31>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <LL_EXTI_DisableIT_0_31+0x28>)
 80023de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4905      	ldr	r1, [pc, #20]	; (80023fc <LL_EXTI_DisableIT_0_31+0x28>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	58000800 	.word	0x58000800

08002400 <LL_EXTI_DisableIT_32_63>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <LL_EXTI_DisableIT_32_63+0x28>)
 800240a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	43db      	mvns	r3, r3
 8002412:	4905      	ldr	r1, [pc, #20]	; (8002428 <LL_EXTI_DisableIT_32_63+0x28>)
 8002414:	4013      	ands	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	58000800 	.word	0x58000800

0800242c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800243a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002446:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	cafecafe 	.word	0xcafecafe

08002468 <LL_RCC_LSE_SetDriveCapability>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f023 0218 	bic.w	r2, r3, #24
 800247c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ec:	d101      	bne.n	80024f2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002512:	d101      	bne.n	8002518 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_AHB1_GRP1_EnableClock>:
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002548:	68fb      	ldr	r3, [r7, #12]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_AHB3_GRP1_EnableClock>:
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4013      	ands	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_C1_IPCC_DisableReceiveChannel>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <LL_C2_IPCC_DisableTransmitChannel>:
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	615a      	str	r2, [r3, #20]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_C2_IPCC_DisableReceiveChannel>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	615a      	str	r2, [r3, #20]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	609a      	str	r2, [r3, #8]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	619a      	str	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <main+0x38>)
 8002652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002656:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002658:	f001 faec 	bl	8003c34 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800265c:	f000 fb18 	bl	8002c90 <Reset_Device>

#if 0
  // Remove tuning done to HSE, reset to default state (i.e. HSE tuning done from OTP)
  Config_HSE_tuning(0xFFFFFFFF);
#endif
  Config_HSE();
 8002660:	f000 faf0 	bl	8002c44 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002664:	f000 f810 	bl	8002688 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8002668:	f000 faca 	bl	8002c00 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 800266c:	f000 fb51 	bl	8002d12 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8002670:	f000 fa7c 	bl	8002b6c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8002674:	f7fe f802 	bl	800067c <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f008 f806 	bl	800a68c <UTIL_SEQ_Run>
 8002680:	e7fa      	b.n	8002678 <main+0x2c>
 8002682:	bf00      	nop
 8002684:	58004000 	.word	0x58004000

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b094      	sub	sp, #80	; 0x50
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 0308 	add.w	r3, r7, #8
 8002692:	2248      	movs	r2, #72	; 0x48
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f008 fa22 	bl	800aae0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800269c:	f002 fc70 	bl	8004f80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff fee1 	bl	8002468 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <SystemClock_Config+0x7c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <SystemClock_Config+0x7c>)
 80026b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <SystemClock_Config+0x7c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
    * Assuming that MSI is enabled by default after boot, lets go to HSE without using PLL
  */
  SystemClock_Config_HSE(0);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f000 f820 	bl	8002708 <SystemClock_Config_HSE>
  /* Configure Others clocks */
  RCC_OscInitStruct.OscillatorType       = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48 | 
 80026c8:	2356      	movs	r3, #86	; 0x56
 80026ca:	60bb      	str	r3, [r7, #8]
                                           RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI2;
  RCC_OscInitStruct.LSEState             = RCC_LSE_ON;
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSIState             = RCC_HSI_OFF;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue  = RCC_HSICALIBRATION_DEFAULT;
 80026d4:	2340      	movs	r3, #64	; 0x40
 80026d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState             = RCC_LSI_OFF;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSI2CalibrationValue = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State           = RCC_HSI48_OFF;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_NONE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 ffdb 	bl	80056a8 <HAL_RCC_OscConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80026f8:	f000 fb40 	bl	8002d7c <Error_Handler>
  }
}
 80026fc:	bf00      	nop
 80026fe:	3750      	adds	r7, #80	; 0x50
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58000400 	.word	0x58000400

08002708 <SystemClock_Config_HSE>:
           SystemClock_Config_HSE() must be called once just after boot (to go from default MSI to HSE).
           Then application user can call both SystemClock_Config_HSE() and SystemClock_Config_MSI() at any time.
  * @retval None
  */
void SystemClock_Config_HSE(uint32_t usePLL)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b09c      	sub	sp, #112	; 0x70
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002710:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002714:	2248      	movs	r2, #72	; 0x48
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f008 f9e1 	bl	800aae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]
 8002730:	619a      	str	r2, [r3, #24]
  
  /* First, just set MSI ON (with the 32Mhz range) in case it was OFF, without any update on PLL */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8002732:	2320      	movs	r3, #32
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8002736:	2301      	movs	r3, #1
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_10;
 800273a:	23a0      	movs	r3, #160	; 0xa0
 800273c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800273e:	2300      	movs	r3, #0
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 8002742:	2300      	movs	r3, #0
 8002744:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800274a:	4618      	mov	r0, r3
 800274c:	f002 ffac 	bl	80056a8 <HAL_RCC_OscConfig>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config_HSE+0x52>
  {
    /* Initialization Error */
    Error_Handler();
 8002756:	f000 fb11 	bl	8002d7c <Error_Handler>
  }
  /* Select MSI as system clock in order to be able to update HSE and PLL configuration */
  RCC_ClkInitStruct.ClockType    = RCC_CLOCKTYPE_SYSCLK;
 800275a:	2301      	movs	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fb2b 	bl	8005dc4 <HAL_RCC_ClockConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config_HSE+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 8002774:	f000 fb02 	bl	8002d7c <Error_Handler>
  }
  
  /* Configure HSE and PLL if needed*/
  RCC_OscInitStruct.OscillatorType       = RCC_OSCILLATORTYPE_HSE;
 8002778:	2301      	movs	r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState             = RCC_HSE_ON;
 800277c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource        = RCC_PLLSOURCE_HSE;
 8002782:	2303      	movs	r3, #3
 8002784:	65bb      	str	r3, [r7, #88]	; 0x58
  if (usePLL == 1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d102      	bne.n	8002792 <SystemClock_Config_HSE+0x8a>
    RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_ON;
 800278c:	2302      	movs	r3, #2
 800278e:	657b      	str	r3, [r7, #84]	; 0x54
 8002790:	e001      	b.n	8002796 <SystemClock_Config_HSE+0x8e>
  else
    RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_OFF;
 8002792:	2301      	movs	r3, #1
 8002794:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM             = RCC_PLLM_DIV2;
 8002796:	2310      	movs	r3, #16
 8002798:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN             = 8;
 800279a:	2308      	movs	r3, #8
 800279c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP             = RCC_PLLP_DIV4;
 800279e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ             = RCC_PLLQ_DIV4;
 80027a4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR             = RCC_PLLR_DIV4;
 80027aa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80027ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 ff77 	bl	80056a8 <HAL_RCC_OscConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <SystemClock_Config_HSE+0xbc>
  {
    Error_Handler();
 80027c0:	f000 fadc 	bl	8002d7c <Error_Handler>
  }
  
  /* Configure the system clock source and the dividers according to the fact that system clock source is 32Mhz */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | 
 80027c4:	236f      	movs	r3, #111	; 0x6f
 80027c6:	60fb      	str	r3, [r7, #12]
                                     RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  if (usePLL == 1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d102      	bne.n	80027d4 <SystemClock_Config_HSE+0xcc>
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ce:	2303      	movs	r3, #3
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e001      	b.n	80027d8 <SystemClock_Config_HSE+0xd0>
  else
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80027d4:	2302      	movs	r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fae6 	bl	8005dc4 <HAL_RCC_ClockConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config_HSE+0xfa>
  {
    Error_Handler();
 80027fe:	f000 fabd 	bl	8002d7c <Error_Handler>
  
  // Note that function UTILS_SetFlashLatency() could be used to set the correct Flash latency
  // (with 32Mhz, 2WS are needed if the range is changed to 1V instead of 1.2V)
  
  /* Disable MSI Oscillator as the MSI is no more needed by the application */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_MSI;
 8002802:	2320      	movs	r3, #32
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState        = RCC_MSI_OFF;
 8002806:	2300      	movs	r3, #0
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_NONE;  /* No update on PLL */
 800280a:	2300      	movs	r3, #0
 800280c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800280e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002812:	4618      	mov	r0, r3
 8002814:	f002 ff48 	bl	80056a8 <HAL_RCC_OscConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <SystemClock_Config_HSE+0x11a>
  {
    /* Initialization Error */
    Error_Handler();
 800281e:	f000 faad 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002822:	bf00      	nop
 8002824:	3770      	adds	r7, #112	; 0x70
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <SystemClock_Config_MSI>:
           SystemClock_Config_HSE() must be called once just after boot (to go from default MSI to HSE).
           Then application user can call both SystemClock_Config_HSE() and SystemClock_Config_MSI() at any time.
  * @retval None
  */
void SystemClock_Config_MSI(uint32_t usePLL, uint32_t stopHSE)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b09c      	sub	sp, #112	; 0x70
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002838:	2248      	movs	r2, #72	; 0x48
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f008 f94f 	bl	800aae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	615a      	str	r2, [r3, #20]
 8002854:	619a      	str	r2, [r3, #24]
  
  /* First, just set HSE ON (with the 32Mhz range) in case it was OFF, without any update on PLL */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 8002856:	2301      	movs	r3, #1
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState        = RCC_HSE_ON;
 800285a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_NONE;
 8002860:	2300      	movs	r3, #0
 8002862:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002868:	4618      	mov	r0, r3
 800286a:	f002 ff1d 	bl	80056a8 <HAL_RCC_OscConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config_MSI+0x4e>
  {
    /* Initialization Error */
    Error_Handler();
 8002874:	f000 fa82 	bl	8002d7c <Error_Handler>
  }
  /* Select HSE as system clock in order to be able to update MSI and PLL configuration */
  RCC_ClkInitStruct.ClockType    = RCC_CLOCKTYPE_SYSCLK;
 8002878:	2301      	movs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800287c:	2302      	movs	r3, #2
 800287e:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002880:	f107 030c 	add.w	r3, r7, #12
 8002884:	2101      	movs	r1, #1
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fa9c 	bl	8005dc4 <HAL_RCC_ClockConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <SystemClock_Config_MSI+0x6c>
  {
    /* Initialization Error */
    Error_Handler();
 8002892:	f000 fa73 	bl	8002d7c <Error_Handler>
  }
  
  /* Configure MSI and PLL if needed*/
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8002896:	2320      	movs	r3, #32
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 800289a:	2301      	movs	r3, #1
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_10;
 800289e:	23a0      	movs	r3, #160	; 0xa0
 80028a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80028a2:	2300      	movs	r3, #0
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80028a6:	2301      	movs	r3, #1
 80028a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (usePLL == 1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d102      	bne.n	80028b6 <SystemClock_Config_MSI+0x8c>
    RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_ON;
 80028b0:	2302      	movs	r3, #2
 80028b2:	657b      	str	r3, [r7, #84]	; 0x54
 80028b4:	e001      	b.n	80028ba <SystemClock_Config_MSI+0x90>
  else
    RCC_OscInitStruct.PLL.PLLState         = RCC_PLL_OFF;
 80028b6:	2301      	movs	r3, #1
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM            = RCC_PLLM_DIV2;
 80028ba:	2310      	movs	r3, #16
 80028bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN            = 8;
 80028be:	2308      	movs	r3, #8
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP            = RCC_PLLP_DIV4;
 80028c2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80028c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ            = RCC_PLLQ_DIV4;
 80028c8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80028cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR            = RCC_PLLR_DIV4;
 80028ce:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80028d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fee5 	bl	80056a8 <HAL_RCC_OscConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <SystemClock_Config_MSI+0xbe>
  {
    /* Initialization Error */
    Error_Handler();
 80028e4:	f000 fa4a 	bl	8002d7c <Error_Handler>
  }
  
  /* Configure the system clock source and the dividers according to the fact that system clock source is 32Mhz */
  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | 
 80028e8:	236f      	movs	r3, #111	; 0x6f
 80028ea:	60fb      	str	r3, [r7, #12]
                                     RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  if (usePLL == 1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <SystemClock_Config_MSI+0xce>
  {
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f2:	2303      	movs	r3, #3
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	e001      	b.n	80028fc <SystemClock_Config_MSI+0xd2>
  }
  else
  {
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  }
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f003 fa54 	bl	8005dc4 <HAL_RCC_ClockConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <SystemClock_Config_MSI+0xfc>
  {
    Error_Handler();
 8002922:	f000 fa2b 	bl	8002d7c <Error_Handler>
  }
  
  if (stopHSE == 1) {
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10f      	bne.n	800294c <SystemClock_Config_MSI+0x122>
    /* Disable HSE Oscillator as the HSE is no more needed by the application */
    RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 800292c:	2301      	movs	r3, #1
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSEState        = RCC_HSE_OFF;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_NONE;  /* No update on PLL */
 8002934:	2300      	movs	r3, #0
 8002936:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800293c:	4618      	mov	r0, r3
 800293e:	f002 feb3 	bl	80056a8 <HAL_RCC_OscConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <SystemClock_Config_MSI+0x122>
    {
      /* Initialization Error */
      Error_Handler();
 8002948:	f000 fa18 	bl	8002d7c <Error_Handler>
    }
  }
}
 800294c:	bf00      	nop
 800294e:	3770      	adds	r7, #112	; 0x70
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 800295a:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <MX_LPUART1_UART_Init+0x9c>)
 800295c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002964:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800296c:	4b1f      	ldr	r3, [pc, #124]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002978:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 800297a:	220c      	movs	r2, #12
 800297c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 800299e:	2200      	movs	r2, #0
 80029a0:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029a2:	4812      	ldr	r0, [pc, #72]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 80029a4:	f004 f8f2 	bl	8006b8c <HAL_UART_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 80029ae:	f000 f9e5 	bl	8002d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029b2:	2100      	movs	r1, #0
 80029b4:	480d      	ldr	r0, [pc, #52]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 80029b6:	f006 faf8 	bl	8008faa <HAL_UARTEx_SetTxFifoThreshold>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 80029c0:	f000 f9dc 	bl	8002d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c4:	2100      	movs	r1, #0
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 80029c8:	f006 fb2d 	bl	8009026 <HAL_UARTEx_SetRxFifoThreshold>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_LPUART1_UART_Init+0x82>
  {
    Error_Handler();
 80029d2:	f000 f9d3 	bl	8002d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_LPUART1_UART_Init+0x98>)
 80029d8:	f006 faae 	bl	8008f38 <HAL_UARTEx_DisableFifoMode>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_LPUART1_UART_Init+0x92>
  {
    Error_Handler();
 80029e2:	f000 f9cb 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20004140 	.word	0x20004140
 80029f0:	40008000 	.word	0x40008000

080029f4 <MX_LPUART1_UART_DeInit>:

void MX_LPUART1_UART_DeInit(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  hlpuart1.Instance = LPUART1;
 80029f8:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <MX_LPUART1_UART_DeInit+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_DeInit(&hlpuart1) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_LPUART1_UART_DeInit+0x64>)
 8002a44:	f004 f8f2 	bl	8006c2c <HAL_UART_DeInit>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_LPUART1_UART_DeInit+0x5e>
  {
    Error_Handler();
 8002a4e:	f000 f995 	bl	8002d7c <Error_Handler>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20004140 	.word	0x20004140
 8002a5c:	40008000 	.word	0x40008000

08002a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a66:	4a25      	ldr	r2, [pc, #148]	; (8002afc <MX_USART1_UART_Init+0x9c>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002ab0:	f004 f86c 	bl	8006b8c <HAL_UART_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8002aba:	f000 f95f 	bl	8002d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002abe:	2100      	movs	r1, #0
 8002ac0:	480d      	ldr	r0, [pc, #52]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002ac2:	f006 fa72 	bl	8008faa <HAL_UARTEx_SetTxFifoThreshold>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8002acc:	f000 f956 	bl	8002d7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4809      	ldr	r0, [pc, #36]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002ad4:	f006 faa7 	bl	8009026 <HAL_UARTEx_SetRxFifoThreshold>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8002ade:	f000 f94d 	bl	8002d7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_USART1_UART_Init+0x98>)
 8002ae4:	f006 fa28 	bl	8008f38 <HAL_UARTEx_DisableFifoMode>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8002aee:	f000 f945 	bl	8002d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20004230 	.word	0x20004230
 8002afc:	40013800 	.word	0x40013800

08002b00 <MX_USART1_UART_DeInit>:

void MX_USART1_UART_DeInit(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <MX_USART1_UART_DeInit+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b26:	220c      	movs	r2, #12
 8002b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_DeInit(&huart1) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_USART1_UART_DeInit+0x64>)
 8002b50:	f004 f86c 	bl	8006c2c <HAL_UART_DeInit>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_USART1_UART_DeInit+0x5e>
  {
    Error_Handler();
 8002b5a:	f000 f90f 	bl	8002d7c <Error_Handler>
  }
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20004230 	.word	0x20004230
 8002b68:	40013800 	.word	0x40013800

08002b6c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b70:	2004      	movs	r0, #4
 8002b72:	f7ff fcd7 	bl	8002524 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b76:	2001      	movs	r0, #1
 8002b78:	f7ff fcd4 	bl	8002524 <LL_AHB1_GRP1_EnableClock>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
#else
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	200b      	movs	r0, #11
 8002b82:	f001 f97f 	bl	8003e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b86:	200b      	movs	r0, #11
 8002b88:	f001 f996 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	200c      	movs	r0, #12
 8002b92:	f001 f977 	bl	8003e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002b96:	200c      	movs	r0, #12
 8002b98:	f001 f98e 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
#endif
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <EraseUserFlash>:

static void EraseUserFlash(uint32_t address ) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  FLASH_EraseInitTypeDef EraseInit;
  uint32_t page_error;

  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	60fb      	str	r3, [r7, #12]
  EraseInit.Page      = (address- FLASH_BASE) / FLASH_PAGE_SIZE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002bb2:	0b1b      	lsrs	r3, r3, #12
 8002bb4:	613b      	str	r3, [r7, #16]
  EraseInit.NbPages   = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]

  // Sometime it seems the erase fails retry once
  if (HAL_FLASHEx_Erase(&EraseInit, &page_error) != HAL_OK)
 8002bba:	f107 0208 	add.w	r2, r7, #8
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fe97 	bl	80048f8 <HAL_FLASHEx_Erase>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <EraseUserFlash+0x52>
  {
    if (HAL_FLASHEx_Erase(&EraseInit, &page_error) != HAL_OK)
 8002bd0:	f107 0208 	add.w	r2, r7, #8
 8002bd4:	f107 030c 	add.w	r3, r7, #12
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fe8c 	bl	80048f8 <HAL_FLASHEx_Erase>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <EraseUserFlash+0x52>
    {
      APP_DBG("Flash erase operation failed, page error 0x%x", page_error);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <EraseUserFlash+0x5c>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2000      	movs	r0, #0
 8002bee:	f000 fd43 	bl	8003678 <logApplication>
    }
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	0800c938 	.word	0x0800c938

08002c00 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
static void PeriphClock_Config(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b094      	sub	sp, #80	; 0x50
 8002c04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c06:	463b      	mov	r3, r7
 8002c08:	2250      	movs	r2, #80	; 0x50
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f007 ff67 	bl	800aae0 <memset>
  /* Initialize SMPS here like in BLE applis */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#else
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_RFWAKEUP | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_LPUART1;
 8002c12:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c16:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.Usart1ClockSelection   = RCC_USART1CLKSOURCE_PCLK2;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Lpuart1ClockSelection  = RCC_LPUART1CLKSOURCE_PCLK1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c26:	463b      	mov	r3, r7
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 fd08 	bl	800663e <HAL_RCCEx_PeriphCLKConfig>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <PeriphClock_Config+0x3a>
  {
    Error_Handler();
 8002c34:	f000 f8a2 	bl	8002d7c <Error_Handler>
  }
#endif

  return;
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
}
 8002c3c:	3750      	adds	r7, #80	; 0x50
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  OTP_ID0_t * p_otp;

  if ( (HSETuningInfo & HSE_TRIM_VALID_MSK) == HSE_TRIM_VALID)
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <Config_HSE+0x44>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c52:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <Config_HSE+0x48>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d106      	bne.n	8002c66 <Config_HSE+0x22>
  {
    /* Read HSE_Tuning from Flash */
    LL_RCC_HSE_SetCapacitorTuning( (uint8_t) (HSETuningInfo & 0xFF));
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <Config_HSE+0x44>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fbe4 	bl	800242c <LL_RCC_HSE_SetCapacitorTuning>
    {
      LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
    }
  }

  return;
 8002c64:	e00c      	b.n	8002c80 <Config_HSE+0x3c>
    p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f006 fb20 	bl	80092ac <OTP_Read>
 8002c6c:	6078      	str	r0, [r7, #4]
    if (p_otp)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <Config_HSE+0x3c>
      LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	799b      	ldrb	r3, [r3, #6]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fbd7 	bl	800242c <LL_RCC_HSE_SetCapacitorTuning>
  return;
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
}
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200000bc 	.word	0x200000bc
 8002c8c:	acce5500 	.word	0xacce5500

08002c90 <Reset_Device>:


static void Reset_Device( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8002c94:	f000 f826 	bl	8002ce4 <Reset_BackupDomain>

  Reset_IPCC();
 8002c98:	f000 f802 	bl	8002ca0 <Reset_IPCC>
#endif

  return;
 8002c9c:	bf00      	nop
}
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002ca4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ca8:	f7ff fc55 	bl	8002556 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002cac:	213f      	movs	r1, #63	; 0x3f
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <Reset_IPCC+0x40>)
 8002cb0:	f7ff fcb0 	bl	8002614 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8002cb4:	213f      	movs	r1, #63	; 0x3f
 8002cb6:	480a      	ldr	r0, [pc, #40]	; (8002ce0 <Reset_IPCC+0x40>)
 8002cb8:	f7ff fcba 	bl	8002630 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002cbc:	213f      	movs	r1, #63	; 0x3f
 8002cbe:	4808      	ldr	r0, [pc, #32]	; (8002ce0 <Reset_IPCC+0x40>)
 8002cc0:	f7ff fc62 	bl	8002588 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8002cc4:	213f      	movs	r1, #63	; 0x3f
 8002cc6:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <Reset_IPCC+0x40>)
 8002cc8:	f7ff fc81 	bl	80025ce <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002ccc:	213f      	movs	r1, #63	; 0x3f
 8002cce:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <Reset_IPCC+0x40>)
 8002cd0:	f7ff fc6c 	bl	80025ac <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8002cd4:	213f      	movs	r1, #63	; 0x3f
 8002cd6:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <Reset_IPCC+0x40>)
 8002cd8:	f7ff fc8b 	bl	80025f2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8002cdc:	bf00      	nop
}
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	58000c00 	.word	0x58000c00

08002ce4 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002ce8:	f7ff fbf6 	bl	80024d8 <LL_RCC_IsActiveFlag_PINRST>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <Reset_BackupDomain+0x2a>
 8002cf2:	f7ff fc04 	bl	80024fe <LL_RCC_IsActiveFlag_SFTRST>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002cfc:	f002 f940 	bl	8004f80 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8002d00:	f002 f93e 	bl	8004f80 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8002d04:	f7ff fbc6 	bl	8002494 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002d08:	f7ff fbd5 	bl	80024b6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
}
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <Init_Exti>:

static void Init_Exti( void )
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except LPUART(25), IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31( (~0) & (~(LL_EXTI_LINE_25)) );
 8002d16:	f06f 7000 	mvn.w	r0, #33554432	; 0x2000000
 8002d1a:	f7ff fb5b 	bl	80023d4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8002d1e:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8002d22:	f7ff fb6d 	bl	8002400 <LL_EXTI_DisableIT_32_63>
  
  return;
 8002d26:	bf00      	nop
}
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_Delay>:
/**
 * @brief As the default systick is not used, declare here, at least, an empty function to 
 * over-write the default one as it declared as WEAK in HAL.
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  us_delay(Delay*1000);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d38:	fb02 f303 	mul.w	r3, r2, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fc09 	bl	8000554 <us_delay_32m>
  return;
 8002d42:	bf00      	nop
}
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_InitTick>:
 * This is the way to avoid systick use which is initialized by default in HAL_Init() and suspended or resumed in LPM.
 *
 * @param None
 */
HAL_StatusTypeDef HAL_InitTick( uint32_t TickPriority )
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  return (HAL_OK);
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_SuspendTick>:

void HAL_SuspendTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_ResumeTick>:

void HAL_ResumeTick(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <Config_HSE_tuning>:
  *         instead uses RTC Backup register
  * @param  hse_tuning: New HSE tuning value (0..63)
  * @retval None
  */
void Config_HSE_tuning(const uint32_t hse_tuning)
{
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  pHSETuningInfo = (volatile uint32_t*)&HSETuningInfo;
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <Config_HSE_tuning+0x60>)
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <Config_HSE_tuning+0x64>)
 8002d98:	601a      	str	r2, [r3, #0]

  /* Unlock the Flash to enable the flash control register access *************/
  if (HAL_FLASH_Unlock() != HAL_OK)
 8002d9a:	f001 fcf5 	bl	8004788 <HAL_FLASH_Unlock>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <Config_HSE_tuning+0x24>
  {
    APP_DBG("Unlock of flash failed");
 8002da4:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <Config_HSE_tuning+0x68>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2000      	movs	r0, #0
 8002daa:	f000 fc65 	bl	8003678 <logApplication>
    return;
 8002dae:	e01a      	b.n	8002de6 <Config_HSE_tuning+0x5a>
  }

  /* Erase flash beforehand */
  EraseUserFlash( (uint32_t) pHSETuningInfo);
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <Config_HSE_tuning+0x60>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fef3 	bl	8002ba0 <EraseUserFlash>

  /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <Config_HSE_tuning+0x6c>)
 8002dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dc0:	611a      	str	r2, [r3, #16]
  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)&HSETuningInfo,
 8002dc2:	490b      	ldr	r1, [pc, #44]	; (8002df0 <Config_HSE_tuning+0x64>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	461c      	mov	r4, r3
 8002dca:	4615      	mov	r5, r2
 8002dcc:	4622      	mov	r2, r4
 8002dce:	462b      	mov	r3, r5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f001 fc95 	bl	8004700 <HAL_FLASH_Program>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <Config_HSE_tuning+0x5a>
                        (uint64_t) hse_tuning) != HAL_OK)
  {
    APP_DBG("New HSE tuning operation failed");
 8002ddc:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <Config_HSE_tuning+0x70>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2000      	movs	r0, #0
 8002de2:	f000 fc49 	bl	8003678 <logApplication>
  }
}
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bdb0      	pop	{r4, r5, r7, pc}
 8002dec:	2000413c 	.word	0x2000413c
 8002df0:	200000bc 	.word	0x200000bc
 8002df4:	0800c968 	.word	0x0800c968
 8002df8:	58004000 	.word	0x58004000
 8002dfc:	0800c980 	.word	0x0800c980

08002e00 <LL_PWR_SetPowerMode>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <LL_PWR_SetPowerMode+0x24>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 0207 	bic.w	r2, r3, #7
 8002e10:	4904      	ldr	r1, [pc, #16]	; (8002e24 <LL_PWR_SetPowerMode+0x24>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	58000400 	.word	0x58000400

08002e28 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <LL_PWR_ClearFlag_WU+0x14>)
 8002e2e:	221f      	movs	r2, #31
 8002e30:	619a      	str	r2, [r3, #24]
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	58000400 	.word	0x58000400

08002e40 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d101      	bne.n	8002e58 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	58000400 	.word	0x58000400

08002e68 <LL_RCC_HSE_Enable>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_RCC_HSE_IsReady>:
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e98:	d101      	bne.n	8002e9e <LL_RCC_HSE_IsReady+0x18>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <LL_RCC_HSE_IsReady+0x1a>
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_RCC_HSI_Enable>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_HSI_IsReady>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d101      	bne.n	8002ee0 <LL_RCC_HSI_IsReady+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_RCC_HSI_IsReady+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_SetSysClkSource>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_RCC_GetSysClkSource>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_SetSMPSClockSource>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	f023 0203 	bic.w	r2, r3, #3
 8002f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <LL_LPM_EnableSleep+0x1c>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <LL_LPM_EnableSleep+0x1c>)
 8002f5e:	f023 0304 	bic.w	r3, r3, #4
 8002f62:	6113      	str	r3, [r2, #16]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <LL_LPM_EnableDeepSleep+0x1c>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <LL_LPM_EnableDeepSleep+0x1c>)
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	6113      	str	r3, [r2, #16]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	3220      	adds	r2, #32
 8002fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa8:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <LL_HSEM_1StepLock+0x2c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d001      	beq.n	8002fb2 <LL_HSEM_1StepLock+0x1e>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <LL_HSEM_1StepLock+0x20>
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	80000400 	.word	0x80000400

08002fc4 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterOffMode */
  M4_LPM_mode = LPM_STAND_BY;
 8002ff0:	4b07      	ldr	r3, [pc, #28]	; (8003010 <PWR_EnterOffMode+0x24>)
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	701a      	strb	r2, [r3, #0]

  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8002ff6:	f7ff feb3 	bl	8002d60 <HAL_SuspendTick>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8002ffa:	f7ff ff15 	bl	8002e28 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8002ffe:	2003      	movs	r0, #3
 8003000:	f7ff fefe 	bl	8002e00 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003004:	f7ff ffb6 	bl	8002f74 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 8003008:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2000002b 	.word	0x2000002b

08003014 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */
  M4_LPM_mode = LPM_NO_STOP;
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <PWR_ExitOffMode+0x14>)
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	701a      	strb	r2, [r3, #0]

  HAL_ResumeTick();
 800301e:	f7ff fea6 	bl	8002d6e <HAL_ResumeTick>

/* USER CODE END PWR_ExitOffMode */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000002b 	.word	0x2000002b

0800302c <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 8003030:	f7ff fe96 	bl	8002d60 <HAL_SuspendTick>

  Enter_Low_Power();
 8003034:	f000 f844 	bl	80030c0 <Enter_Low_Power>
#endif

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  if ((M4_LPM_mode != LPM_STOP_0) && (M4_LPM_mode != LPM_STOP_1) && (M4_LPM_mode != LPM_STOP_2)) {
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <PWR_EnterStopMode+0x40>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <PWR_EnterStopMode+0x2a>
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <PWR_EnterStopMode+0x40>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d006      	beq.n	8003056 <PWR_EnterStopMode+0x2a>
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <PWR_EnterStopMode+0x40>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d002      	beq.n	8003056 <PWR_EnterStopMode+0x2a>
    M4_LPM_mode = LPM_STOP_2;
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <PWR_EnterStopMode+0x40>)
 8003052:	2202      	movs	r2, #2
 8003054:	701a      	strb	r2, [r3, #0]
  }
  LL_PWR_SetPowerMode( (uint32_t) M4_LPM_mode );
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <PWR_EnterStopMode+0x40>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fed0 	bl	8002e00 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8003060:	f7ff ff88 	bl	8002f74 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8003064:	bf30      	wfi

#ifdef COMMON_RF_DBG_GPIO
  gpio_lld_phy_pa0_down();
#endif
/* USER CODE END PWR_EnterStopMode */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000002b 	.word	0x2000002b

08003070 <PWR_ExitStopMode>:
  * @brief Exits Low Power Stop Mode
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitStopMode */
#ifdef COMMON_RF_DBG_GPIO
  gpio_lld_phy_pa0_up();
#endif

  M4_LPM_mode = LPM_NO_STOP;
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <PWR_ExitStopMode+0x18>)
 8003076:	22ff      	movs	r2, #255	; 0xff
 8003078:	701a      	strb	r2, [r3, #0]

  Exit_Low_Power();
 800307a:	f000 f84b 	bl	8003114 <Exit_Low_Power>

  HAL_ResumeTick();
 800307e:	f7ff fe76 	bl	8002d6e <HAL_ResumeTick>

#ifdef COMMON_RF_DBG_GPIO
  gpio_lld_phy_pa0_down();
#endif
/* USER CODE END PWR_ExitStopMode */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000002b 	.word	0x2000002b

0800308c <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */
  M4_LPM_mode = LPM_NO_STOP;
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <PWR_EnterSleepMode+0x18>)
 8003092:	22ff      	movs	r2, #255	; 0xff
 8003094:	701a      	strb	r2, [r3, #0]

  HAL_SuspendTick();
 8003096:	f7ff fe63 	bl	8002d60 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800309a:	f7ff ff5b 	bl	8002f54 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 800309e:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000002b 	.word	0x2000002b

080030a8 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */
  M4_LPM_mode = LPM_NO_STOP;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <PWR_ExitSleepMode+0x14>)
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	701a      	strb	r2, [r3, #0]

  HAL_ResumeTick();
 80030b2:	f7ff fe5c 	bl	8002d6e <HAL_ResumeTick>

/* USER CODE END PWR_ExitSleepMode */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000002b 	.word	0x2000002b

080030c0 <Enter_Low_Power>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Enter_Low_Power( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 80030c4:	bf00      	nop
 80030c6:	2103      	movs	r1, #3
 80030c8:	4811      	ldr	r0, [pc, #68]	; (8003110 <Enter_Low_Power+0x50>)
 80030ca:	f7ff ff63 	bl	8002f94 <LL_HSEM_1StepLock>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f8      	bne.n	80030c6 <Enter_Low_Power+0x6>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 80030d4:	2104      	movs	r1, #4
 80030d6:	480e      	ldr	r0, [pc, #56]	; (8003110 <Enter_Low_Power+0x50>)
 80030d8:	f7ff ff5c 	bl	8002f94 <LL_HSEM_1StepLock>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <Enter_Low_Power+0x3c>
  {
    if( LL_PWR_IsActiveFlag_C2DS() )
 80030e2:	f7ff fead 	bl	8002e40 <LL_PWR_IsActiveFlag_C2DS>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <Enter_Low_Power+0x40>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 80030ec:	2200      	movs	r2, #0
 80030ee:	2104      	movs	r1, #4
 80030f0:	4807      	ldr	r0, [pc, #28]	; (8003110 <Enter_Low_Power+0x50>)
 80030f2:	f7ff ff67 	bl	8002fc4 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 80030f6:	f000 f83b 	bl	8003170 <Switch_On_HSI>
 80030fa:	e001      	b.n	8003100 <Enter_Low_Power+0x40>
    }
  }
  else
  {
    Switch_On_HSI();
 80030fc:	f000 f838 	bl	8003170 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8003100:	2200      	movs	r2, #0
 8003102:	2103      	movs	r1, #3
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <Enter_Low_Power+0x50>)
 8003106:	f7ff ff5d 	bl	8002fc4 <LL_HSEM_ReleaseLock>
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	58001400 	.word	0x58001400

08003114 <Exit_Low_Power>:

static void Exit_Low_Power( void )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8003118:	2200      	movs	r2, #0
 800311a:	2104      	movs	r1, #4
 800311c:	4813      	ldr	r0, [pc, #76]	; (800316c <Exit_Low_Power+0x58>)
 800311e:	f7ff ff51 	bl	8002fc4 <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8003122:	bf00      	nop
 8003124:	2103      	movs	r1, #3
 8003126:	4811      	ldr	r0, [pc, #68]	; (800316c <Exit_Low_Power+0x58>)
 8003128:	f7ff ff34 	bl	8002f94 <LL_HSEM_1StepLock>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f8      	bne.n	8003124 <Exit_Low_Power+0x10>

  if(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8003132:	f7ff feef 	bl	8002f14 <LL_RCC_GetSysClkSource>
 8003136:	4603      	mov	r3, r0
 8003138:	2b08      	cmp	r3, #8
 800313a:	d010      	beq.n	800315e <Exit_Low_Power+0x4a>
  {
    LL_RCC_HSE_Enable();
 800313c:	f7ff fe94 	bl	8002e68 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady());
 8003140:	bf00      	nop
 8003142:	f7ff fea0 	bl	8002e86 <LL_RCC_HSE_IsReady>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0fa      	beq.n	8003142 <Exit_Low_Power+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 800314c:	2002      	movs	r0, #2
 800314e:	f7ff fecd 	bl	8002eec <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8003152:	bf00      	nop
 8003154:	f7ff fede 	bl	8002f14 <LL_RCC_GetSysClkSource>
 8003158:	4603      	mov	r3, r0
 800315a:	2b08      	cmp	r3, #8
 800315c:	d1fa      	bne.n	8003154 <Exit_Low_Power+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 800315e:	2200      	movs	r2, #0
 8003160:	2103      	movs	r1, #3
 8003162:	4802      	ldr	r0, [pc, #8]	; (800316c <Exit_Low_Power+0x58>)
 8003164:	f7ff ff2e 	bl	8002fc4 <LL_HSEM_ReleaseLock>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	58001400 	.word	0x58001400

08003170 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8003174:	f7ff fe99 	bl	8002eaa <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8003178:	bf00      	nop
 800317a:	f7ff fea5 	bl	8002ec8 <LL_RCC_HSI_IsReady>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0fa      	beq.n	800317a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8003184:	2001      	movs	r0, #1
 8003186:	f7ff feb1 	bl	8002eec <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800318a:	2000      	movs	r0, #0
 800318c:	f7ff fece 	bl	8002f2c <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8003190:	bf00      	nop
 8003192:	f7ff febf 	bl	8002f14 <LL_RCC_GetSysClkSource>
 8003196:	4603      	mov	r3, r0
 8003198:	2b04      	cmp	r3, #4
 800319a:	d1fa      	bne.n	8003192 <Switch_On_HSI+0x22>
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <LL_AHB3_GRP1_EnableClock>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	b085      	sub	sp, #20
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80031ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4013      	ands	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_APB1_GRP2_EnableClock>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4013      	ands	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031f8:	68fb      	ldr	r3, [r7, #12]
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_APB1_GRP2_DisableClock>:
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	43db      	mvns	r3, r3
 8003218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321c:	4013      	ands	r3, r2
 800321e:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_APB2_GRP1_EnableClock>:
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800323a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4313      	orrs	r3, r2
 8003242:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4013      	ands	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003250:	68fb      	ldr	r3, [r7, #12]
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_APB2_GRP1_DisableClock>:
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	43db      	mvns	r3, r3
 8003270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003274:	4013      	ands	r3, r2
 8003276:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003288:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800328c:	f7ff ff89 	bl	80031a2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	202e      	movs	r0, #46	; 0x2e
 8003296:	f000 fdf5 	bl	8003e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800329a:	202e      	movs	r0, #46	; 0x2e
 800329c:	f000 fe0c 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  
#if (CFG_HW_LPUART1_ENABLED == 1)
  if(huart->Instance==LPUART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a47      	ldr	r2, [pc, #284]	; (80033d0 <HAL_UART_MspInit+0x12c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d14b      	bne.n	800334e <HAL_UART_MspInit+0xaa>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80032b6:	2001      	movs	r0, #1
 80032b8:	f7ff ff8c 	bl	80031d4 <LL_APB1_GRP2_EnableClock>
  
    /**LPUART1 GPIO Configuration    
    */
    gpio_lld_lpuart_init();
 80032bc:	f7fe fbbe 	bl	8001a3c <gpio_lld_lpuart_init>
    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
#ifdef STM32WB35xx
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
#else
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80032c0:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032c2:	4a45      	ldr	r2, [pc, #276]	; (80033d8 <HAL_UART_MspInit+0x134>)
 80032c4:	601a      	str	r2, [r3, #0]
#endif
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032c8:	2211      	movs	r2, #17
 80032ca:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032ce:	2210      	movs	r2, #16
 80032d0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032d8:	4b3e      	ldr	r3, [pc, #248]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80032ea:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032f0:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80032f6:	4837      	ldr	r0, [pc, #220]	; (80033d4 <HAL_UART_MspInit+0x130>)
 80032f8:	f000 fdfa 	bl	8003ef0 <HAL_DMA_Init>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_UART_MspInit+0x62>
    {
      Error_Handler();
 8003302:	f7ff fd3b 	bl	8002d7c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8003306:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800330a:	60bb      	str	r3, [r7, #8]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncEnable = DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	743b      	strb	r3, [r7, #16]
    pSyncConfig.EventEnable = DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	747b      	strb	r3, [r7, #17]
    pSyncConfig.RequestNumber = 1;
 8003318:	2301      	movs	r3, #1
 800331a:	617b      	str	r3, [r7, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800331c:	f107 0308 	add.w	r3, r7, #8
 8003320:	4619      	mov	r1, r3
 8003322:	482c      	ldr	r0, [pc, #176]	; (80033d4 <HAL_UART_MspInit+0x130>)
 8003324:	f001 f9ac 	bl	8004680 <HAL_DMAEx_ConfigMuxSync>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 800332e:	f7ff fd25 	bl	8002d7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <HAL_UART_MspInit+0x130>)
 8003336:	679a      	str	r2, [r3, #120]	; 0x78
 8003338:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <HAL_UART_MspInit+0x130>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	2025      	movs	r0, #37	; 0x25
 8003344:	f000 fd9e 	bl	8003e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003348:	2025      	movs	r0, #37	; 0x25
 800334a:	f000 fdb5 	bl	8003eb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */
  }
#endif
#if (CFG_HW_USART1_ENABLED == 1)
  if(huart->Instance==USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_UART_MspInit+0x138>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d136      	bne.n	80033c6 <HAL_UART_MspInit+0x122>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003358:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800335c:	f7ff ff66 	bl	800322c <LL_APB2_GRP1_EnableClock>
  
    /**USART1 GPIO Configuration    
    */
    gpio_lld_usart_init();
 8003360:	f7fe fb42 	bl	80019e8 <gpio_lld_usart_init>
    /* USART1 DMA Init */
    /* USART1_TX Init */
#ifdef STM32WB35xx
    hdma_usart1_tx.Instance = DMA2_Channel4;
#else
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_UART_MspInit+0x140>)
 8003368:	601a      	str	r2, [r3, #0]
#endif
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 800336c:	220f      	movs	r2, #15
 800336e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 8003372:	2210      	movs	r2, #16
 8003374:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 8003378:	2200      	movs	r2, #0
 800337a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 8003384:	2200      	movs	r2, #0
 8003386:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 8003390:	2200      	movs	r2, #0
 8003392:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 8003396:	2200      	movs	r2, #0
 8003398:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800339a:	4811      	ldr	r0, [pc, #68]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 800339c:	f000 fda8 	bl	8003ef0 <HAL_DMA_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 80033a6:	f7ff fce9 	bl	8002d7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 80033ae:	679a      	str	r2, [r3, #120]	; 0x78
 80033b0:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <HAL_UART_MspInit+0x13c>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2100      	movs	r1, #0
 80033ba:	2024      	movs	r0, #36	; 0x24
 80033bc:	f000 fd62 	bl	8003e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033c0:	2024      	movs	r0, #36	; 0x24
 80033c2:	f000 fd79 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
#endif
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40008000 	.word	0x40008000
 80033d4:	200041d0 	.word	0x200041d0
 80033d8:	40020008 	.word	0x40020008
 80033dc:	40013800 	.word	0x40013800
 80033e0:	200042c0 	.word	0x200042c0
 80033e4:	4002001c 	.word	0x4002001c

080033e8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
#if (CFG_HW_LPUART1_ENABLED == 1)
  if(huart->Instance==LPUART1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_UART_MspDeInit+0x5c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10c      	bne.n	8003414 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80033fa:	2001      	movs	r0, #1
 80033fc:	f7ff ff03 	bl	8003206 <LL_APB1_GRP2_DisableClock>
  
    /**LPUART1 GPIO Configuration    
    */
    gpio_lld_lpuart_deInit();
 8003400:	f7fe fb38 	bl	8001a74 <gpio_lld_lpuart_deInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fe19 	bl	8004040 <HAL_DMA_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800340e:	2025      	movs	r0, #37	; 0x25
 8003410:	f000 fd60 	bl	8003ed4 <HAL_NVIC_DisableIRQ>

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
#endif
#if (CFG_HW_USART1_ENABLED == 1)
  if(huart->Instance==USART1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <HAL_UART_MspDeInit+0x60>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10d      	bne.n	800343a <HAL_UART_MspDeInit+0x52>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800341e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003422:	f7ff ff1c 	bl	800325e <LL_APB2_GRP1_DisableClock>
  
    /**USART1 GPIO Configuration    
    */
    gpio_lld_usart_deInit();
 8003426:	f7fe fafb 	bl	8001a20 <gpio_lld_usart_deInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fe06 	bl	8004040 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003434:	2024      	movs	r0, #36	; 0x24
 8003436:	f000 fd4d 	bl	8003ed4 <HAL_NVIC_DisableIRQ>

  /* USER CODE END USART1_MspDeInit 1 */
  }
#endif

}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40008000 	.word	0x40008000
 8003448:	40013800 	.word	0x40013800

0800344c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  gpio_lld_phy_gpioHardFault_up();
 800345e:	f7fe fa7e 	bl	800195e <gpio_lld_phy_gpioHardFault_up>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003462:	e7fe      	b.n	8003462 <HardFault_Handler+0x8>

08003464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <MemManage_Handler+0x4>

0800346a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346e:	e7fe      	b.n	800346e <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <UsageFault_Handler+0x4>

08003476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  HAL_IncTick();
#endif
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <DMA1_Channel1_IRQHandler>:
#else
/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
#if (CFG_HW_LPUART1_ENABLED == 1)
#if (CFG_HW_LPUART1_DMA_TX_SUPPORTED == 1)
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <DMA1_Channel1_IRQHandler+0x10>)
 80034b6:	f000 ff92 	bl	80043de <HAL_DMA_IRQHandler>
#endif
#endif
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200041d0 	.word	0x200041d0

080034c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
#if (CFG_HW_USART1_ENABLED == 1)
#if (CFG_HW_USART1_DMA_TX_SUPPORTED == 1)
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <DMA1_Channel2_IRQHandler+0x10>)
 80034ca:	f000 ff88 	bl	80043de <HAL_DMA_IRQHandler>
#endif
#endif
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200042c0 	.word	0x200042c0

080034d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
#if (CFG_HW_USART1_ENABLED == 1)
  HAL_UART_IRQHandler(&huart1);
 80034dc:	4802      	ldr	r0, [pc, #8]	; (80034e8 <USART1_IRQHandler+0x10>)
 80034de:	f003 fd71 	bl	8006fc4 <HAL_UART_IRQHandler>
#endif
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20004230 	.word	0x20004230

080034ec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
#if (CFG_HW_LPUART1_ENABLED == 1)
  HAL_UART_IRQHandler(&hlpuart1);
 80034f0:	4802      	ldr	r0, [pc, #8]	; (80034fc <LPUART1_IRQHandler+0x10>)
 80034f2:	f003 fd67 	bl	8006fc4 <HAL_UART_IRQHandler>
#endif
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20004140 	.word	0x20004140

08003500 <IPCC_C1_TX_IRQHandler>:
  HW_TS_RTC_Wakeup_Handler();
}
#endif /* Not needed for LLD tests : removed to use less power */

void IPCC_C1_TX_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8003504:	f7fe fc34 	bl	8001d70 <HW_IPCC_Tx_Handler>

  return;
 8003508:	bf00      	nop
}
 800350a:	bd80      	pop	{r7, pc}

0800350c <IPCC_C1_RX_IRQHandler>:
void IPCC_C1_RX_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8003510:	f7fe fbd4 	bl	8001cbc <HW_IPCC_Rx_Handler>
  return;
 8003514:	bf00      	nop
}
 8003516:	bd80      	pop	{r7, pc}

08003518 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	807b      	strh	r3, [r7, #2]
 8003524:	4613      	mov	r3, r2
 8003526:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8003528:	787b      	ldrb	r3, [r7, #1]
 800352a:	3b01      	subs	r3, #1
 800352c:	2b04      	cmp	r3, #4
 800352e:	d83e      	bhi.n	80035ae <logRegion+0x96>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <logRegion+0x20>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800354d 	.word	0x0800354d
 800353c:	08003561 	.word	0x08003561
 8003540:	08003575 	.word	0x08003575
 8003544:	08003587 	.word	0x08003587
 8003548:	0800359b 	.word	0x0800359b
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	4a22      	ldr	r2, [pc, #136]	; (80035dc <logRegion+0xc4>)
 8003552:	461c      	mov	r4, r3
 8003554:	4615      	mov	r5, r2
 8003556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800355a:	682b      	ldr	r3, [r5, #0]
 800355c:	7023      	strb	r3, [r4, #0]
      break;
 800355e:	e02f      	b.n	80035c0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OPENTHREAD_API:
      strcpy(logRegionString, "[M4 OPENTHREAD API]");
 8003560:	f107 0308 	add.w	r3, r7, #8
 8003564:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <logRegion+0xc8>)
 8003566:	461c      	mov	r4, r3
 8003568:	4615      	mov	r5, r2
 800356a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800356c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	6023      	str	r3, [r4, #0]
      break;
 8003572:	e025      	b.n	80035c0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_LINK:
      strcpy(logRegionString, "[M4 LINK API]");
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <logRegion+0xcc>)
 800357a:	461c      	mov	r4, r3
 800357c:	4613      	mov	r3, r2
 800357e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003580:	c407      	stmia	r4!, {r0, r1, r2}
 8003582:	8023      	strh	r3, [r4, #0]
      break;
 8003584:	e01c      	b.n	80035c0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_INSTANCE:
      strcpy(logRegionString, "[M4 INSTANCE API]");
 8003586:	f107 0308 	add.w	r3, r7, #8
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <logRegion+0xd0>)
 800358c:	461c      	mov	r4, r3
 800358e:	4615      	mov	r5, r2
 8003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	8023      	strh	r3, [r4, #0]
      break;
 8003598:	e012      	b.n	80035c0 <logRegion+0xa8>
    case APPLI_LOG_REGION_OT_API_MESSAGE:
      strcpy(logRegionString, "[M4 MESSAGE API]");
 800359a:	f107 0308 	add.w	r3, r7, #8
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <logRegion+0xd4>)
 80035a0:	461c      	mov	r4, r3
 80035a2:	4615      	mov	r5, r2
 80035a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a8:	682b      	ldr	r3, [r5, #0]
 80035aa:	7023      	strb	r3, [r4, #0]
      break;
 80035ac:	e008      	b.n	80035c0 <logRegion+0xa8>
    default:
      strcpy(logRegionString, "[M4]");
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <logRegion+0xd8>)
 80035b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035b8:	6018      	str	r0, [r3, #0]
 80035ba:	3304      	adds	r3, #4
 80035bc:	7019      	strb	r1, [r3, #0]
      break;
 80035be:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80035c0:	8879      	ldrh	r1, [r7, #2]
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <logRegion+0xdc>)
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f007 faa9 	bl	800ab20 <sniprintf>
 80035ce:	4603      	mov	r3, r0
 80035d0:	b29b      	uxth	r3, r3
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3728      	adds	r7, #40	; 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdb0      	pop	{r4, r5, r7, pc}
 80035da:	bf00      	nop
 80035dc:	0800c9a0 	.word	0x0800c9a0
 80035e0:	0800c9b4 	.word	0x0800c9b4
 80035e4:	0800c9c8 	.word	0x0800c9c8
 80035e8:	0800c9d8 	.word	0x0800c9d8
 80035ec:	0800c9ec 	.word	0x0800c9ec
 80035f0:	0800ca00 	.word	0x0800ca00
 80035f4:	0800ca08 	.word	0x0800ca08

080035f8 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d00a      	beq.n	800361e <levelToString+0x26>
 8003608:	2b03      	cmp	r3, #3
 800360a:	dc0a      	bgt.n	8003622 <levelToString+0x2a>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <levelToString+0x1e>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d002      	beq.n	800361a <levelToString+0x22>
 8003614:	e005      	b.n	8003622 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <levelToString+0x38>)
 8003618:	e004      	b.n	8003624 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <levelToString+0x3c>)
 800361c:	e002      	b.n	8003624 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <levelToString+0x40>)
 8003620:	e000      	b.n	8003624 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <levelToString+0x44>)
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	0800ca0c 	.word	0x0800ca0c
 8003634:	0800ca14 	.word	0x0800ca14
 8003638:	0800ca1c 	.word	0x0800ca1c
 800363c:	0800ca24 	.word	0x0800ca24

08003640 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
 800364c:	4613      	mov	r3, r2
 800364e:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8003650:	887c      	ldrh	r4, [r7, #2]
 8003652:	787b      	ldrb	r3, [r7, #1]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ffcf 	bl	80035f8 <levelToString>
 800365a:	4603      	mov	r3, r0
 800365c:	4a05      	ldr	r2, [pc, #20]	; (8003674 <logLevel+0x34>)
 800365e:	4621      	mov	r1, r4
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f007 fa5d 	bl	800ab20 <sniprintf>
 8003666:	4603      	mov	r3, r0
 8003668:	b29b      	uxth	r3, r3
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	0800ca2c 	.word	0x0800ca2c

08003678 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8003678:	b40c      	push	{r2, r3}
 800367a:	b580      	push	{r7, lr}
 800367c:	b0c4      	sub	sp, #272	; 0x110
 800367e:	af00      	add	r7, sp, #0
 8003680:	4602      	mov	r2, r0
 8003682:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003686:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003690:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003694:	460a      	mov	r2, r1
 8003696:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800369e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036a2:	f107 020c 	add.w	r2, r7, #12
 80036a6:	18d0      	adds	r0, r2, r3
 80036a8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036b0:	b299      	uxth	r1, r3
 80036b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	f7ff ffbf 	bl	8003640 <logLevel>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036ca:	4413      	add	r3, r2
 80036cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80036d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036d4:	f107 020c 	add.w	r2, r7, #12
 80036d8:	18d0      	adds	r0, r2, r3
 80036da:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036e2:	b299      	uxth	r1, r3
 80036e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036e8:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f7ff ff12 	bl	8003518 <logRegion>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80036fc:	4413      	add	r3, r2
 80036fe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8003702:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8003706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800370a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800370e:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8003710:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003714:	f107 020c 	add.w	r2, r7, #12
 8003718:	18d0      	adds	r0, r2, r3
 800371a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800371e:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8003722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003730:	f007 fb7a 	bl	800ae28 <vsniprintf>
 8003734:	4603      	mov	r3, r0
 8003736:	b29a      	uxth	r2, r3
 8003738:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800373c:	4413      	add	r3, r2
 800373e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8003742:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800374c:	461a      	mov	r2, r3
 800374e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003756:	210d      	movs	r1, #13
 8003758:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 800375a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 8003764:	461a      	mov	r2, r3
 8003766:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800376a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800376e:	210a      	movs	r1, #10
 8003770:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8003772:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	f8a7 210e 	strh.w	r2, [r7, #270]	; 0x10e
 800377c:	461a      	mov	r2, r3
 800377e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800378a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800378e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b03      	cmp	r3, #3
 8003796:	d805      	bhi.n	80037a4 <logApplication+0x12c>
  {
    printf("%s", logString);
 8003798:	f107 030c 	add.w	r3, r7, #12
 800379c:	4619      	mov	r1, r3
 800379e:	4805      	ldr	r0, [pc, #20]	; (80037b4 <logApplication+0x13c>)
 80037a0:	f007 f9a6 	bl	800aaf0 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 80037a4:	bf00      	nop
 80037a6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80037aa:	46bd      	mov	sp, r7
 80037ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037b0:	b002      	add	sp, #8
 80037b2:	4770      	bx	lr
 80037b4:	0800ca2c 	.word	0x0800ca2c

080037b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
	return 1;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_kill>:

int _kill(int pid, int sig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037d2:	f007 f94d 	bl	800aa70 <__errno>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2216      	movs	r2, #22
 80037da:	601a      	str	r2, [r3, #0]
	return -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <_exit>:

void _exit (int status)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ffe7 	bl	80037c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037fa:	e7fe      	b.n	80037fa <_exit+0x12>

080037fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e00a      	b.n	8003824 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800380e:	f3af 8000 	nop.w
 8003812:	4601      	mov	r1, r0
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	60ba      	str	r2, [r7, #8]
 800381a:	b2ca      	uxtb	r2, r1
 800381c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3301      	adds	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	dbf0      	blt.n	800380e <_read+0x12>
	}

return len;
 800382c:	687b      	ldr	r3, [r7, #4]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
	return -1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800385e:	605a      	str	r2, [r3, #4]
	return 0;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <_isatty>:

int _isatty(int file)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
	return 1;
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
	return 0;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <_sbrk+0x5c>)
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <_sbrk+0x60>)
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <_sbrk+0x64>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <_sbrk+0x64>)
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <_sbrk+0x68>)
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <_sbrk+0x64>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d0:	f007 f8ce 	bl	800aa70 <__errno>
 80038d4:	4603      	mov	r3, r0
 80038d6:	220c      	movs	r2, #12
 80038d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	e009      	b.n	80038f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e0:	4b08      	ldr	r3, [pc, #32]	; (8003904 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	4a05      	ldr	r2, [pc, #20]	; (8003904 <_sbrk+0x64>)
 80038f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20030000 	.word	0x20030000
 8003900:	00001000 	.word	0x00001000
 8003904:	20004320 	.word	0x20004320
 8003908:	20005458 	.word	0x20005458

0800390c <LL_AHB2_GRP1_EnableClock>:
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800391a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4313      	orrs	r3, r2
 8003922:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003930:	68fb      	ldr	r3, [r7, #12]
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800395a:	2002      	movs	r0, #2
 800395c:	f7ff ffd6 	bl	800390c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <BSP_LED_Init+0x6c>)
 8003964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003968:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396a:	2301      	movs	r3, #1
 800396c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003972:	2302      	movs	r3, #2
 8003974:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <BSP_LED_Init+0x70>)
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	f107 020c 	add.w	r2, r7, #12
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f001 f87b 	bl	8004a80 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <BSP_LED_Init+0x70>)
 800398e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <BSP_LED_Init+0x6c>)
 8003996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800399a:	2200      	movs	r2, #0
 800399c:	4619      	mov	r1, r3
 800399e:	f001 fabd 	bl	8004f1c <HAL_GPIO_WritePin>
}
 80039a2:	bf00      	nop
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	0800ca74 	.word	0x0800ca74
 80039b0:	2000002c 	.word	0x2000002c

080039b4 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <BSP_LED_On+0x2c>)
 80039c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <BSP_LED_On+0x30>)
 80039ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ce:	2201      	movs	r2, #1
 80039d0:	4619      	mov	r1, r3
 80039d2:	f001 faa3 	bl	8004f1c <HAL_GPIO_WritePin>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000002c 	.word	0x2000002c
 80039e4:	0800ca74 	.word	0x0800ca74

080039e8 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <BSP_LED_Off+0x2c>)
 80039f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	4a06      	ldr	r2, [pc, #24]	; (8003a18 <BSP_LED_Off+0x30>)
 80039fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a02:	2200      	movs	r2, #0
 8003a04:	4619      	mov	r1, r3
 8003a06:	f001 fa89 	bl	8004f1c <HAL_GPIO_WritePin>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000002c 	.word	0x2000002c
 8003a18:	0800ca74 	.word	0x0800ca74

08003a1c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <BSP_LED_Toggle+0x2c>)
 8003a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4906      	ldr	r1, [pc, #24]	; (8003a4c <BSP_LED_Toggle+0x30>)
 8003a32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f001 fa87 	bl	8004f4c <HAL_GPIO_TogglePin>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000002c 	.word	0x2000002c
 8003a4c:	0800ca74 	.word	0x0800ca74

08003a50 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	460a      	mov	r2, r1
 8003a5a:	71fb      	strb	r3, [r7, #7]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <BSP_PB_Init+0x2e>
 8003a76:	2004      	movs	r0, #4
 8003a78:	f7ff ff48 	bl	800390c <LL_AHB2_GRP1_EnableClock>
 8003a7c:	e00c      	b.n	8003a98 <BSP_PB_Init+0x48>
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d103      	bne.n	8003a8c <BSP_PB_Init+0x3c>
 8003a84:	2008      	movs	r0, #8
 8003a86:	f7ff ff41 	bl	800390c <LL_AHB2_GRP1_EnableClock>
 8003a8a:	e005      	b.n	8003a98 <BSP_PB_Init+0x48>
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d102      	bne.n	8003a98 <BSP_PB_Init+0x48>
 8003a92:	2008      	movs	r0, #8
 8003a94:	f7ff ff3a 	bl	800390c <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003a98:	79bb      	ldrb	r3, [r7, #6]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d117      	bne.n	8003ace <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <BSP_PB_Init+0xd4>)
 8003aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <BSP_PB_Init+0xd8>)
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	f107 020c 	add.w	r2, r7, #12
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 ffdc 	bl	8004a80 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7ff f92e 	bl	8002d2a <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003ace:	79bb      	ldrb	r3, [r7, #6]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d123      	bne.n	8003b1c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <BSP_PB_Init+0xd4>)
 8003ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003adc:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003ae2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ae6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	4a0f      	ldr	r2, [pc, #60]	; (8003b28 <BSP_PB_Init+0xd8>)
 8003aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af0:	f107 020c 	add.w	r2, r7, #12
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ffc2 	bl	8004a80 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <BSP_PB_Init+0xdc>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	210f      	movs	r1, #15
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f9bb 	bl	8003e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	4a06      	ldr	r2, [pc, #24]	; (8003b2c <BSP_PB_Init+0xdc>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	b25b      	sxtb	r3, r3
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f9ce 	bl	8003eb8 <HAL_NVIC_EnableIRQ>
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0800ca7c 	.word	0x0800ca7c
 8003b28:	20000038 	.word	0x20000038
 8003b2c:	0800ca84 	.word	0x0800ca84

08003b30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003b34:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <SystemInit+0xa0>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <SystemInit+0xa0>)
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	4a23      	ldr	r2, [pc, #140]	; (8003bd0 <SystemInit+0xa0>)
 8003b42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003b62:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <SystemInit+0xa4>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b80:	f023 0305 	bic.w	r3, r3, #5
 8003b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <SystemInit+0xa8>)
 8003ba2:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <SystemInit+0xa8>)
 8003baa:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000ed00 	.word	0xe000ed00
 8003bd4:	faf6fefb 	.word	0xfaf6fefb
 8003bd8:	22041000 	.word	0x22041000

08003bdc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <LL_DBGMCU_GetDeviceID+0x18>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e0042000 	.word	0xe0042000

08003bf8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <LL_DBGMCU_GetRevisionID+0x18>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	b29b      	uxth	r3, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e0042000 	.word	0xe0042000

08003c14 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6053      	str	r3, [r2, #4]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e0042000 	.word	0xe0042000

08003c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <HAL_Init+0x3c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <HAL_Init+0x3c>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c4a:	2003      	movs	r0, #3
 8003c4c:	f000 f90f 	bl	8003e6e <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c50:	200f      	movs	r0, #15
 8003c52:	f7ff f87a 	bl	8002d4a <HAL_InitTick>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	71fb      	strb	r3, [r7, #7]
 8003c60:	e001      	b.n	8003c66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c62:	f7ff fb0f 	bl	8003284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	58004000 	.word	0x58004000

08003c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_GetTick+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20004324 	.word	0x20004324

08003c8c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_GetTickPrio+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	20000048 	.word	0x20000048

08003ca4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
   return(LL_DBGMCU_GetRevisionID());
 8003ca8:	f7ff ffa6 	bl	8003bf8 <LL_DBGMCU_GetRevisionID>
 8003cac:	4603      	mov	r3, r0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	af00      	add	r7, sp, #0
   return(LL_DBGMCU_GetDeviceID());
 8003cb6:	f7ff ff91 	bl	8003bdc <LL_DBGMCU_GetDeviceID>
 8003cba:	4603      	mov	r3, r0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003cc4:	f7ff ffa6 	bl	8003c14 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	60d3      	str	r3, [r2, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <__NVIC_GetPriorityGrouping+0x18>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	f003 0307 	and.w	r3, r3, #7
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db0b      	blt.n	8003d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4907      	ldr	r1, [pc, #28]	; (8003d68 <__NVIC_EnableIRQ+0x38>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2001      	movs	r0, #1
 8003d52:	fa00 f202 	lsl.w	r2, r0, r2
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	e000e100 	.word	0xe000e100

08003d6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db12      	blt.n	8003da4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	490a      	ldr	r1, [pc, #40]	; (8003db0 <__NVIC_DisableIRQ+0x44>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d92:	3320      	adds	r3, #32
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d98:	f3bf 8f4f 	dsb	sy
}
 8003d9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d9e:	f3bf 8f6f 	isb	sy
}
 8003da2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000e100 	.word	0xe000e100

08003db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	490c      	ldr	r1, [pc, #48]	; (8003e00 <__NVIC_SetPriority+0x4c>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ddc:	e00a      	b.n	8003df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <__NVIC_SetPriority+0x50>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	3b04      	subs	r3, #4
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	440b      	add	r3, r1
 8003df2:	761a      	strb	r2, [r3, #24]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f1c3 0307 	rsb	r3, r3, #7
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	bf28      	it	cs
 8003e26:	2304      	movcs	r3, #4
 8003e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d902      	bls.n	8003e38 <NVIC_EncodePriority+0x30>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3b03      	subs	r3, #3
 8003e36:	e000      	b.n	8003e3a <NVIC_EncodePriority+0x32>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e50:	f04f 31ff 	mov.w	r1, #4294967295
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	43d9      	mvns	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e60:	4313      	orrs	r3, r2
         );
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ff28 	bl	8003ccc <__NVIC_SetPriorityGrouping>
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e92:	f7ff ff3f 	bl	8003d14 <__NVIC_GetPriorityGrouping>
 8003e96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	f7ff ffb3 	bl	8003e08 <NVIC_EncodePriority>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff ff82 	bl	8003db4 <__NVIC_SetPriority>
}
 8003eb0:	bf00      	nop
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff32 	bl	8003d30 <__NVIC_EnableIRQ>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff42 	bl	8003d6c <__NVIC_DisableIRQ>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e08e      	b.n	8004020 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_DMA_Init+0x138>)
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d80f      	bhi.n	8003f2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b45      	ldr	r3, [pc, #276]	; (800402c <HAL_DMA_Init+0x13c>)
 8003f16:	4413      	add	r3, r2
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <HAL_DMA_Init+0x140>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a42      	ldr	r2, [pc, #264]	; (8004034 <HAL_DMA_Init+0x144>)
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f2c:	e00e      	b.n	8003f4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	4b40      	ldr	r3, [pc, #256]	; (8004038 <HAL_DMA_Init+0x148>)
 8003f36:	4413      	add	r3, r2
 8003f38:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <HAL_DMA_Init+0x140>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	009a      	lsls	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a3c      	ldr	r2, [pc, #240]	; (800403c <HAL_DMA_Init+0x14c>)
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fb0a 	bl	80045b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fac:	d102      	bne.n	8003fb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003fc0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_DMA_Init+0x106>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d80c      	bhi.n	8003ff6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fb29 	bl	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	e008      	b.n	8004008 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40020407 	.word	0x40020407
 800402c:	bffdfff8 	.word	0xbffdfff8
 8004030:	cccccccd 	.word	0xcccccccd
 8004034:	40020000 	.word	0x40020000
 8004038:	bffdfbf8 	.word	0xbffdfbf8
 800403c:	40020400 	.word	0x40020400

08004040 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07b      	b.n	800414a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <HAL_DMA_DeInit+0x114>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d80f      	bhi.n	800408e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_DMA_DeInit+0x118>)
 8004076:	4413      	add	r3, r2
 8004078:	4a38      	ldr	r2, [pc, #224]	; (800415c <HAL_DMA_DeInit+0x11c>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	009a      	lsls	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a35      	ldr	r2, [pc, #212]	; (8004160 <HAL_DMA_DeInit+0x120>)
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
 800408c:	e00e      	b.n	80040ac <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	4b33      	ldr	r3, [pc, #204]	; (8004164 <HAL_DMA_DeInit+0x124>)
 8004096:	4413      	add	r3, r2
 8004098:	4a30      	ldr	r2, [pc, #192]	; (800415c <HAL_DMA_DeInit+0x11c>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <HAL_DMA_DeInit+0x128>)
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f003 021c 	and.w	r2, r3, #28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2101      	movs	r1, #1
 80040c2:	fa01 f202 	lsl.w	r2, r1, r2
 80040c6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fa75 	bl	80045b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040de:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00f      	beq.n	8004108 <HAL_DMA_DeInit+0xc8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d80b      	bhi.n	8004108 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fa9f 	bl	8004634 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004106:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40020407 	.word	0x40020407
 8004158:	bffdfff8 	.word	0xbffdfff8
 800415c:	cccccccd 	.word	0xcccccccd
 8004160:	40020000 	.word	0x40020000
 8004164:	bffdfbf8 	.word	0xbffdfbf8
 8004168:	40020400 	.word	0x40020400

0800416c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_DMA_Start_IT+0x20>
 8004188:	2302      	movs	r3, #2
 800418a:	e066      	b.n	800425a <HAL_DMA_Start_IT+0xee>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d155      	bne.n	800424c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f9b9 	bl	800453c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 020e 	orr.w	r2, r2, #14
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e00f      	b.n	8004204 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0204 	bic.w	r2, r2, #4
 80041f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 020a 	orr.w	r2, r2, #10
 8004202:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004220:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e005      	b.n	8004258 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004258:	7dfb      	ldrb	r3, [r7, #23]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e04f      	b.n	8004314 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d008      	beq.n	8004292 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e040      	b.n	8004314 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 020e 	bic.w	r2, r2, #14
 80042a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f003 021c 	and.w	r2, r3, #28
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2101      	movs	r1, #1
 80042d0:	fa01 f202 	lsl.w	r2, r1, r2
 80042d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004300:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d005      	beq.n	8004344 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2204      	movs	r2, #4
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	e047      	b.n	80043d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 020e 	bic.w	r2, r2, #14
 8004352:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f003 021c 	and.w	r2, r3, #28
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2101      	movs	r1, #1
 8004382:	fa01 f202 	lsl.w	r2, r1, r2
 8004386:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004390:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
    }
  }
  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 031c 	and.w	r3, r3, #28
 80043fe:	2204      	movs	r2, #4
 8004400:	409a      	lsls	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d026      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7a>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d021      	beq.n	8004458 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f003 021c 	and.w	r2, r3, #28
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2104      	movs	r1, #4
 8004440:	fa01 f202 	lsl.w	r2, r1, r2
 8004444:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d071      	beq.n	8004532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004456:	e06c      	b.n	8004532 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f003 031c 	and.w	r3, r3, #28
 8004460:	2202      	movs	r2, #2
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d02e      	beq.n	80044ca <HAL_DMA_IRQHandler+0xec>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d029      	beq.n	80044ca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0320 	and.w	r3, r3, #32
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 020a 	bic.w	r2, r2, #10
 8004492:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f003 021c 	and.w	r2, r3, #28
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2102      	movs	r1, #2
 80044aa:	fa01 f202 	lsl.w	r2, r1, r2
 80044ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d038      	beq.n	8004532 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044c8:	e033      	b.n	8004532 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f003 031c 	and.w	r3, r3, #28
 80044d2:	2208      	movs	r2, #8
 80044d4:	409a      	lsls	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02a      	beq.n	8004534 <HAL_DMA_IRQHandler+0x156>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d025      	beq.n	8004534 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 020e 	bic.w	r2, r2, #14
 80044f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fc:	f003 021c 	and.w	r2, r3, #28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2101      	movs	r1, #1
 8004506:	fa01 f202 	lsl.w	r2, r1, r2
 800450a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	2b00      	cmp	r3, #0
 8004528:	d004      	beq.n	8004534 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004532:	bf00      	nop
 8004534:	bf00      	nop
}
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004552:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f003 021c 	and.w	r2, r3, #28
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b10      	cmp	r3, #16
 8004588:	d108      	bne.n	800459c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800459a:	e007      	b.n	80045ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b17      	ldr	r3, [pc, #92]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d80a      	bhi.n	80045e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6493      	str	r3, [r2, #72]	; 0x48
 80045e0:	e007      	b.n	80045f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	009a      	lsls	r2, r3, #2
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045ec:	4413      	add	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	3b08      	subs	r3, #8
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004608:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40020407 	.word	0x40020407
 8004628:	4002081c 	.word	0x4002081c
 800462c:	cccccccd 	.word	0xcccccccd
 8004630:	40020880 	.word	0x40020880

08004634 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004644:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004658:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b01      	subs	r3, #1
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2201      	movs	r2, #1
 8004664:	409a      	lsls	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	1000823f 	.word	0x1000823f
 800467c:	40020940 	.word	0x40020940

08004680 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d12b      	bne.n	80046ee <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_DMAEx_ConfigMuxSync+0x24>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e025      	b.n	80046f0 <HAL_DMAEx_ConfigMuxSync+0x70>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_DMAEx_ConfigMuxSync+0x7c>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	68d2      	ldr	r2, [r2, #12]
 80046be:	3a01      	subs	r2, #1
 80046c0:	04d2      	lsls	r2, r2, #19
 80046c2:	4311      	orrs	r1, r2
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	6852      	ldr	r2, [r2, #4]
 80046c8:	4311      	orrs	r1, r2
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	7a12      	ldrb	r2, [r2, #8]
 80046ce:	0412      	lsls	r2, r2, #16
 80046d0:	4311      	orrs	r1, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	7a52      	ldrb	r2, [r2, #9]
 80046d6:	0252      	lsls	r2, r2, #9
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046de:	430b      	orrs	r3, r1
 80046e0:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000fdff 	.word	0xe000fdff

08004700 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800470e:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <HAL_FLASH_Program+0x80>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_FLASH_Program+0x1a>
 8004716:	2302      	movs	r3, #2
 8004718:	e02d      	b.n	8004776 <HAL_FLASH_Program+0x76>
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_FLASH_Program+0x80>)
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004720:	4b17      	ldr	r3, [pc, #92]	; (8004780 <HAL_FLASH_Program+0x80>)
 8004722:	2200      	movs	r2, #0
 8004724:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800472a:	f000 f84f 	bl	80047cc <FLASH_WaitForLastOperation>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11a      	bne.n	800476e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800473e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004742:	68b8      	ldr	r0, [r7, #8]
 8004744:	f000 f8b2 	bl	80048ac <FLASH_Program_DoubleWord>
 8004748:	e004      	b.n	8004754 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	68b8      	ldr	r0, [r7, #8]
 8004750:	f007 fd2c 	bl	800c1ac <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004758:	f000 f838 	bl	80047cc <FLASH_WaitForLastOperation>
 800475c:	4603      	mov	r3, r0
 800475e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_FLASH_Program+0x84>)
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	43db      	mvns	r3, r3
 8004768:	4906      	ldr	r1, [pc, #24]	; (8004784 <HAL_FLASH_Program+0x84>)
 800476a:	4013      	ands	r3, r2
 800476c:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <HAL_FLASH_Program+0x80>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20004328 	.word	0x20004328
 8004784:	58004000 	.word	0x58004000

08004788 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004792:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_FLASH_Unlock+0x38>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	da0b      	bge.n	80047b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <HAL_FLASH_Unlock+0x38>)
 800479c:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <HAL_FLASH_Unlock+0x3c>)
 800479e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_FLASH_Unlock+0x38>)
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_FLASH_Unlock+0x40>)
 80047a4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_FLASH_Unlock+0x38>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da01      	bge.n	80047b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80047b2:	79fb      	ldrb	r3, [r7, #7]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	58004000 	.word	0x58004000
 80047c4:	45670123 	.word	0x45670123
 80047c8:	cdef89ab 	.word	0xcdef89ab

080047cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80047d4:	f7ff fa4e 	bl	8003c74 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80047da:	e009      	b.n	80047f0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80047dc:	f7ff fa4a 	bl	8003c74 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d801      	bhi.n	80047f0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e054      	b.n	800489a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fc:	d0ee      	beq.n	80047dc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80047fe:	4b29      	ldr	r3, [pc, #164]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800480e:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 8004810:	2201      	movs	r2, #1
 8004812:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 8004820:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004824:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800482c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004834:	4013      	ands	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <FLASH_WaitForLastOperation+0x86>
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800484c:	4915      	ldr	r1, [pc, #84]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	618b      	str	r3, [r1, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <FLASH_WaitForLastOperation+0x9a>
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004864:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <FLASH_WaitForLastOperation+0xdc>)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e011      	b.n	800489a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004876:	f7ff f9fd 	bl	8003c74 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	d801      	bhi.n	800488a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e007      	b.n	800489a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <FLASH_WaitForLastOperation+0xd8>)
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004896:	d0ee      	beq.n	8004876 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	58004000 	.word	0x58004000
 80048a8:	20004328 	.word	0x20004328

080048ac <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <FLASH_Program_DoubleWord+0x48>)
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <FLASH_Program_DoubleWord+0x48>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80048ca:	f3bf 8f6f 	isb	sy
}
 80048ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80048d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	000a      	movs	r2, r1
 80048de:	2300      	movs	r3, #0
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	3104      	adds	r1, #4
 80048e4:	4613      	mov	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	58004000 	.word	0x58004000

080048f8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_FLASHEx_Erase+0x9c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d101      	bne.n	800490e <HAL_FLASHEx_Erase+0x16>
 800490a:	2302      	movs	r3, #2
 800490c:	e03d      	b.n	800498a <HAL_FLASHEx_Erase+0x92>
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_FLASHEx_Erase+0x9c>)
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004914:	4b1f      	ldr	r3, [pc, #124]	; (8004994 <HAL_FLASHEx_Erase+0x9c>)
 8004916:	2200      	movs	r2, #0
 8004918:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800491a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800491e:	f7ff ff55 	bl	80047cc <FLASH_WaitForLastOperation>
 8004922:	4603      	mov	r3, r0
 8004924:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d12a      	bne.n	8004982 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d124      	bne.n	800497e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	e012      	b.n	800496a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f000 f827 	bl	8004998 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800494a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800494e:	f7ff ff3d 	bl	80047cc <FLASH_WaitForLastOperation>
 8004952:	4603      	mov	r3, r0
 8004954:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	601a      	str	r2, [r3, #0]
          break;
 8004962:	e00a      	b.n	800497a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3301      	adds	r3, #1
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4413      	add	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	d3e4      	bcc.n	8004944 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800497a:	f000 f86f 	bl	8004a5c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800497e:	f000 f825 	bl	80049cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004982:	4b04      	ldr	r3, [pc, #16]	; (8004994 <HAL_FLASHEx_Erase+0x9c>)
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]

  return status;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20004328 	.word	0x20004328

08004998 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <FLASH_PageErase+0x30>)
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4313      	orrs	r3, r2
 80049ae:	4a06      	ldr	r2, [pc, #24]	; (80049c8 <FLASH_PageErase+0x30>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6153      	str	r3, [r2, #20]
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	58004000 	.word	0x58004000

080049cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049dc:	d117      	bne.n	8004a0e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80049de:	4b1e      	ldr	r3, [pc, #120]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e8:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80049ea:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1a      	ldr	r2, [pc, #104]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 80049fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a00:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a0c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8004a0e:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1a:	d117      	bne.n	8004a4c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0d      	ldr	r2, [pc, #52]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a26:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a07      	ldr	r2, [pc, #28]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <FLASH_FlushCaches+0x8c>)
 8004a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4a:	6013      	str	r3, [r2, #0]
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	58004000 	.word	0x58004000

08004a5c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <FLASH_AcknowledgePageErase+0x20>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <FLASH_AcknowledgePageErase+0x20>)
 8004a66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a6a:	f023 0302 	bic.w	r3, r3, #2
 8004a6e:	6153      	str	r3, [r2, #20]
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	58004000 	.word	0x58004000

08004a80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8e:	e14c      	b.n	8004d2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2101      	movs	r1, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 813e 	beq.w	8004d24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d005      	beq.n	8004ac0 <HAL_GPIO_Init+0x40>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d130      	bne.n	8004b22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004af6:	2201      	movs	r2, #1
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0201 	and.w	r2, r3, #1
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d017      	beq.n	8004b5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	2203      	movs	r2, #3
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d123      	bne.n	8004bb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	08da      	lsrs	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3208      	adds	r2, #8
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	220f      	movs	r2, #15
 8004b82:	fa02 f303 	lsl.w	r3, r2, r3
 8004b86:	43db      	mvns	r3, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	08da      	lsrs	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3208      	adds	r2, #8
 8004bac:	6939      	ldr	r1, [r7, #16]
 8004bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 8098 	beq.w	8004d24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004bf4:	4a54      	ldr	r2, [pc, #336]	; (8004d48 <HAL_GPIO_Init+0x2c8>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c1e:	d019      	beq.n	8004c54 <HAL_GPIO_Init+0x1d4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <HAL_GPIO_Init+0x2cc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d013      	beq.n	8004c50 <HAL_GPIO_Init+0x1d0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a49      	ldr	r2, [pc, #292]	; (8004d50 <HAL_GPIO_Init+0x2d0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00d      	beq.n	8004c4c <HAL_GPIO_Init+0x1cc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a48      	ldr	r2, [pc, #288]	; (8004d54 <HAL_GPIO_Init+0x2d4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <HAL_GPIO_Init+0x1c8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <HAL_GPIO_Init+0x2d8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d101      	bne.n	8004c44 <HAL_GPIO_Init+0x1c4>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e008      	b.n	8004c56 <HAL_GPIO_Init+0x1d6>
 8004c44:	2307      	movs	r3, #7
 8004c46:	e006      	b.n	8004c56 <HAL_GPIO_Init+0x1d6>
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e004      	b.n	8004c56 <HAL_GPIO_Init+0x1d6>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e002      	b.n	8004c56 <HAL_GPIO_Init+0x1d6>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <HAL_GPIO_Init+0x1d6>
 8004c54:	2300      	movs	r3, #0
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	f002 0203 	and.w	r2, r2, #3
 8004c5c:	0092      	lsls	r2, r2, #2
 8004c5e:	4093      	lsls	r3, r2
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c66:	4938      	ldr	r1, [pc, #224]	; (8004d48 <HAL_GPIO_Init+0x2c8>)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	089b      	lsrs	r3, r3, #2
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c74:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c9e:	4b2f      	ldr	r3, [pc, #188]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4013      	ands	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cc8:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	43db      	mvns	r3, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d1c:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <HAL_GPIO_Init+0x2dc>)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3301      	adds	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f47f aeab 	bne.w	8004a90 <HAL_GPIO_Init+0x10>
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	48000400 	.word	0x48000400
 8004d50:	48000800 	.word	0x48000800
 8004d54:	48000c00 	.word	0x48000c00
 8004d58:	48001000 	.word	0x48001000
 8004d5c:	58000800 	.word	0x58000800

08004d60 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d6e:	e0bb      	b.n	8004ee8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d70:	2201      	movs	r2, #1
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80ae 	beq.w	8004ee2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004d86:	4a5f      	ldr	r2, [pc, #380]	; (8004f04 <HAL_GPIO_DeInit+0x1a4>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	220f      	movs	r2, #15
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dae:	d019      	beq.n	8004de4 <HAL_GPIO_DeInit+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a55      	ldr	r2, [pc, #340]	; (8004f08 <HAL_GPIO_DeInit+0x1a8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_GPIO_DeInit+0x80>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a54      	ldr	r2, [pc, #336]	; (8004f0c <HAL_GPIO_DeInit+0x1ac>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00d      	beq.n	8004ddc <HAL_GPIO_DeInit+0x7c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a53      	ldr	r2, [pc, #332]	; (8004f10 <HAL_GPIO_DeInit+0x1b0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d007      	beq.n	8004dd8 <HAL_GPIO_DeInit+0x78>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <HAL_GPIO_DeInit+0x1b4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <HAL_GPIO_DeInit+0x74>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	e008      	b.n	8004de6 <HAL_GPIO_DeInit+0x86>
 8004dd4:	2307      	movs	r3, #7
 8004dd6:	e006      	b.n	8004de6 <HAL_GPIO_DeInit+0x86>
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e004      	b.n	8004de6 <HAL_GPIO_DeInit+0x86>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e002      	b.n	8004de6 <HAL_GPIO_DeInit+0x86>
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_GPIO_DeInit+0x86>
 8004de4:	2300      	movs	r3, #0
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	f002 0203 	and.w	r2, r2, #3
 8004dec:	0092      	lsls	r2, r2, #2
 8004dee:	4093      	lsls	r3, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d136      	bne.n	8004e64 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004df6:	4b48      	ldr	r3, [pc, #288]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004df8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	4945      	ldr	r1, [pc, #276]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004e08:	4b43      	ldr	r3, [pc, #268]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	4941      	ldr	r1, [pc, #260]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	493d      	ldr	r1, [pc, #244]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e28:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	4939      	ldr	r1, [pc, #228]	; (8004f18 <HAL_GPIO_DeInit+0x1b8>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	220f      	movs	r2, #15
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e46:	4a2f      	ldr	r2, [pc, #188]	; (8004f04 <HAL_GPIO_DeInit+0x1a4>)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	43da      	mvns	r2, r3
 8004e56:	482b      	ldr	r0, [pc, #172]	; (8004f04 <HAL_GPIO_DeInit+0x1a4>)
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	3302      	adds	r3, #2
 8004e60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	2103      	movs	r1, #3
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	08da      	lsrs	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3208      	adds	r2, #8
 8004e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	08d2      	lsrs	r2, r2, #3
 8004e98:	4019      	ands	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3208      	adds	r2, #8
 8004e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2103      	movs	r1, #3
 8004eac:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	401a      	ands	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f47f af3d 	bne.w	8004d70 <HAL_GPIO_DeInit+0x10>
  }
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40010000 	.word	0x40010000
 8004f08:	48000400 	.word	0x48000400
 8004f0c:	48000800 	.word	0x48000800
 8004f10:	48000c00 	.word	0x48000c00
 8004f14:	48001000 	.word	0x48001000
 8004f18:	58000800 	.word	0x58000800

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f38:	e002      	b.n	8004f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4013      	ands	r3, r2
 8004f64:	041a      	lsls	r2, r3, #16
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	43d9      	mvns	r1, r3
 8004f6a:	887b      	ldrh	r3, [r7, #2]
 8004f6c:	400b      	ands	r3, r1
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8e:	6013      	str	r3, [r2, #0]
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	58000400 	.word	0x58000400

08004fa0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004fa4:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	58000400 	.word	0x58000400

08004fbc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fce:	d101      	bne.n	8004fd4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_HSE_Enable>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	6013      	str	r3, [r2, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_HSE_Disable>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800500c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
}
 8005012:	bf00      	nop
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <LL_RCC_HSE_IsReady>:
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800502e:	d101      	bne.n	8005034 <LL_RCC_HSE_IsReady+0x18>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <LL_RCC_HSE_IsReady+0x1a>
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_RCC_HSI_Enable>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_RCC_HSI_Disable>:
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005070:	6013      	str	r3, [r2, #0]
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_RCC_HSI_IsReady>:
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508e:	d101      	bne.n	8005094 <LL_RCC_HSI_IsReady+0x18>
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <LL_RCC_HSI_IsReady+0x1a>
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	061b      	lsls	r3, r3, #24
 80050b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <LL_RCC_HSI48_Enable>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80050e2:	bf00      	nop
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_HSI48_Disable>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <LL_RCC_HSI48_IsReady>:
{
 800510e:	b480      	push	{r7}
 8005110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d101      	bne.n	8005126 <LL_RCC_HSI48_IsReady+0x18>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <LL_RCC_HSI48_IsReady+0x1a>
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <LL_RCC_LSE_Enable>:
{
 8005132:	b480      	push	{r7}
 8005134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800514a:	bf00      	nop
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_RCC_LSE_Disable>:
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800516c:	bf00      	nop
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_RCC_LSE_EnableBypass>:
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005186:	f043 0304 	orr.w	r3, r3, #4
 800518a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800518e:	bf00      	nop
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <LL_RCC_LSE_DisableBypass>:
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a8:	f023 0304 	bic.w	r3, r3, #4
 80051ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_LSE_IsReady>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d101      	bne.n	80051d2 <LL_RCC_LSE_IsReady+0x18>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <LL_RCC_LSE_IsReady+0x1a>
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_RCC_LSI1_Enable>:
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_LSI1_Disable>:
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_RCC_LSI1_IsReady>:
{
 8005222:	b480      	push	{r7}
 8005224:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	d101      	bne.n	800523a <LL_RCC_LSI1_IsReady+0x18>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <LL_RCC_LSI1_IsReady+0x1a>
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <LL_RCC_LSI2_Enable>:
{
 8005246:	b480      	push	{r7}
 8005248:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005256:	f043 0304 	orr.w	r3, r3, #4
 800525a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_RCC_LSI2_Disable>:
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005278:	f023 0304 	bic.w	r3, r3, #4
 800527c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <LL_RCC_LSI2_IsReady>:
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b08      	cmp	r3, #8
 800529c:	d101      	bne.n	80052a2 <LL_RCC_LSI2_IsReady+0x18>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <LL_RCC_LSI2_IsReady+0x1a>
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <LL_RCC_LSI2_SetTrimming>:
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_RCC_MSI_Enable>:
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	6013      	str	r3, [r2, #0]
}
 80052f0:	bf00      	nop
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_MSI_Disable>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	6013      	str	r3, [r2, #0]
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <LL_RCC_MSI_IsReady>:
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800531c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d101      	bne.n	800532e <LL_RCC_MSI_IsReady+0x16>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <LL_RCC_MSI_IsReady+0x18>
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_RCC_MSI_SetRange>:
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_RCC_MSI_GetRange>:
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005372:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2bb0      	cmp	r3, #176	; 0xb0
 8005378:	d901      	bls.n	800537e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800537a:	23b0      	movs	r3, #176	; 0xb0
 800537c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800537e:	687b      	ldr	r3, [r7, #4]
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_MSI_SetCalibTrimming>:
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a6:	4313      	orrs	r3, r2
 80053a8:	604b      	str	r3, [r1, #4]
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <LL_RCC_SetSysClkSource>:
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 0203 	bic.w	r2, r3, #3
 80053c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <LL_RCC_GetSysClkSource>:
{
 80053de:	b480      	push	{r7}
 80053e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 030c 	and.w	r3, r3, #12
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <LL_RCC_SetAHBPrescaler>:
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <LL_C2_RCC_SetAHBPrescaler>:
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800542e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_RCC_SetAHB4Prescaler>:
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005456:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800545a:	f023 020f 	bic.w	r2, r3, #15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_RCC_SetAPB1Prescaler>:
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800548a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <LL_RCC_SetAPB2Prescaler>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <LL_RCC_GetAHBPrescaler>:
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_RCC_GetAHB4Prescaler>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <LL_RCC_GetAPB1Prescaler>:
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800550a:	4618      	mov	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <LL_RCC_GetAPB2Prescaler>:
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_RCC_PLL_Enable>:
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <LL_RCC_PLL_Disable>:
{
 800554a:	b480      	push	{r7}
 800554c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800555c:	6013      	str	r3, [r2, #0]
}
 800555e:	bf00      	nop
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <LL_RCC_PLL_IsReady>:
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800557a:	d101      	bne.n	8005580 <LL_RCC_PLL_IsReady+0x18>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <LL_RCC_PLL_IsReady+0x1a>
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_PLL_GetN>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <LL_RCC_PLL_GetR>:
{
 80055a6:	b480      	push	{r7}
 80055a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <LL_RCC_PLL_GetDivider>:
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_PLL_GetMainSource>:
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0303 	and.w	r3, r3, #3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <LL_RCC_IsActiveFlag_HPRE>:
{
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d101      	bne.n	8005606 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005626:	d101      	bne.n	800562c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005640:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564c:	d101      	bne.n	8005652 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005670:	d101      	bne.n	8005676 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005682:	b480      	push	{r7}
 8005684:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005694:	d101      	bne.n	800569a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b08d      	sub	sp, #52	; 0x34
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e37f      	b.n	8005dba <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8092 	beq.w	80057ec <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c8:	f7ff fe89 	bl	80053de <LL_RCC_GetSysClkSource>
 80056cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ce:	f7ff ff82 	bl	80055d6 <LL_RCC_PLL_GetMainSource>
 80056d2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_RCC_OscConfig+0x3e>
 80056da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d14c      	bne.n	800577a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d149      	bne.n	800577a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056e6:	f7ff fe17 	bl	8005318 <LL_RCC_MSI_IsReady>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_RCC_OscConfig+0x54>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e35e      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005700:	f7ff fe2f 	bl	8005362 <LL_RCC_MSI_GetRange>
 8005704:	4603      	mov	r3, r0
 8005706:	429c      	cmp	r4, r3
 8005708:	d914      	bls.n	8005734 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fd44 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e34d      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fe09 	bl	800533a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fe2d 	bl	800538c <LL_RCC_MSI_SetCalibTrimming>
 8005732:	e013      	b.n	800575c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fdfe 	bl	800533a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fe22 	bl	800538c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fd25 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e32e      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800575c:	f000 fcde 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8005760:	4603      	mov	r3, r0
 8005762:	4aa5      	ldr	r2, [pc, #660]	; (80059f8 <HAL_RCC_OscConfig+0x350>)
 8005764:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005766:	4ba5      	ldr	r3, [pc, #660]	; (80059fc <HAL_RCC_OscConfig+0x354>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fd faed 	bl	8002d4a <HAL_InitTick>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d039      	beq.n	80057ea <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e31f      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01e      	beq.n	80057c0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005782:	f7ff fdab 	bl	80052dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005786:	f7fe fa75 	bl	8003c74 <HAL_GetTick>
 800578a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800578e:	f7fe fa71 	bl	8003c74 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e30c      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 80057a0:	f7ff fdba 	bl	8005318 <LL_RCC_MSI_IsReady>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f1      	beq.n	800578e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fdc3 	bl	800533a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fde7 	bl	800538c <LL_RCC_MSI_SetCalibTrimming>
 80057be:	e015      	b.n	80057ec <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057c0:	f7ff fd9b 	bl	80052fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057c4:	f7fe fa56 	bl	8003c74 <HAL_GetTick>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057cc:	f7fe fa52 	bl	8003c74 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e2ed      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057de:	f7ff fd9b 	bl	8005318 <LL_RCC_MSI_IsReady>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f1      	bne.n	80057cc <HAL_RCC_OscConfig+0x124>
 80057e8:	e000      	b.n	80057ec <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057ea:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d04e      	beq.n	8005896 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f8:	f7ff fdf1 	bl	80053de <LL_RCC_GetSysClkSource>
 80057fc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057fe:	f7ff feea 	bl	80055d6 <LL_RCC_PLL_GetMainSource>
 8005802:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2b08      	cmp	r3, #8
 8005808:	d005      	beq.n	8005816 <HAL_RCC_OscConfig+0x16e>
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	d10d      	bne.n	800582c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d10a      	bne.n	800582c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005816:	f7ff fc01 	bl	800501c <LL_RCC_HSE_IsReady>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d039      	beq.n	8005894 <HAL_RCC_OscConfig+0x1ec>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d135      	bne.n	8005894 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e2c6      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005834:	d102      	bne.n	800583c <HAL_RCC_OscConfig+0x194>
 8005836:	f7ff fbd3 	bl	8004fe0 <LL_RCC_HSE_Enable>
 800583a:	e001      	b.n	8005840 <HAL_RCC_OscConfig+0x198>
 800583c:	f7ff fbdf 	bl	8004ffe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fe fa14 	bl	8003c74 <HAL_GetTick>
 800584c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fe fa10 	bl	8003c74 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	; 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e2ab      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005862:	f7ff fbdb 	bl	800501c <LL_RCC_HSE_IsReady>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f1      	beq.n	8005850 <HAL_RCC_OscConfig+0x1a8>
 800586c:	e013      	b.n	8005896 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fe fa01 	bl	8003c74 <HAL_GetTick>
 8005872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005876:	f7fe f9fd 	bl	8003c74 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b64      	cmp	r3, #100	; 0x64
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e298      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005888:	f7ff fbc8 	bl	800501c <LL_RCC_HSE_IsReady>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f1      	bne.n	8005876 <HAL_RCC_OscConfig+0x1ce>
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005894:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d051      	beq.n	8005946 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a2:	f7ff fd9c 	bl	80053de <LL_RCC_GetSysClkSource>
 80058a6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058a8:	f7ff fe95 	bl	80055d6 <LL_RCC_PLL_GetMainSource>
 80058ac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_OscConfig+0x218>
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b0c      	cmp	r3, #12
 80058b8:	d113      	bne.n	80058e2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d110      	bne.n	80058e2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058c0:	f7ff fbdc 	bl	800507c <LL_RCC_HSI_IsReady>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x22e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e271      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fbe0 	bl	80050a0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058e0:	e031      	b.n	8005946 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d019      	beq.n	800591e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058ea:	f7ff fba9 	bl	8005040 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fe f9c1 	bl	8003c74 <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f6:	f7fe f9bd 	bl	8003c74 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e258      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005908:	f7ff fbb8 	bl	800507c <LL_RCC_HSI_IsReady>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0f1      	beq.n	80058f6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fbc2 	bl	80050a0 <LL_RCC_HSI_SetCalibTrimming>
 800591c:	e013      	b.n	8005946 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591e:	f7ff fb9e 	bl	800505e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fe f9a7 	bl	8003c74 <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800592a:	f7fe f9a3 	bl	8003c74 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e23e      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 800593c:	f7ff fb9e 	bl	800507c <LL_RCC_HSI_IsReady>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f1      	bne.n	800592a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80a4 	beq.w	8005aa8 <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d077      	beq.n	8005a58 <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	d04b      	beq.n	8005a0c <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005974:	f7ff fc55 	bl	8005222 <LL_RCC_LSI1_IsReady>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d113      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800597e:	f7ff fc2e 	bl	80051de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005982:	f7fe f977 	bl	8003c74 <HAL_GetTick>
 8005986:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800598a:	f7fe f973 	bl	8003c74 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e20e      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800599c:	f7ff fc41 	bl	8005222 <LL_RCC_LSI1_IsReady>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f1      	beq.n	800598a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80059a6:	f7ff fc4e 	bl	8005246 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fe f963 	bl	8003c74 <HAL_GetTick>
 80059ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80059b2:	f7fe f95f 	bl	8003c74 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e1fa      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80059c4:	f7ff fc61 	bl	800528a <LL_RCC_LSI2_IsReady>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f1      	beq.n	80059b2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fc6b 	bl	80052ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80059d8:	f7ff fc12 	bl	8005200 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fe f94a 	bl	8003c74 <HAL_GetTick>
 80059e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80059e2:	e00d      	b.n	8005a00 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059e4:	f7fe f946 	bl	8003c74 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d906      	bls.n	8005a00 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e1e1      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
 80059f6:	bf00      	nop
 80059f8:	20000044 	.word	0x20000044
 80059fc:	20000048 	.word	0x20000048
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005a00:	f7ff fc0f 	bl	8005222 <LL_RCC_LSI1_IsReady>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ec      	bne.n	80059e4 <HAL_RCC_OscConfig+0x33c>
 8005a0a:	e04d      	b.n	8005aa8 <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005a0c:	f7ff fbe7 	bl	80051de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fe f930 	bl	8003c74 <HAL_GetTick>
 8005a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a18:	f7fe f92c 	bl	8003c74 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e1c7      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005a2a:	f7ff fbfa 	bl	8005222 <LL_RCC_LSI1_IsReady>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f1      	beq.n	8005a18 <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005a34:	f7ff fc18 	bl	8005268 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a3a:	f7fe f91b 	bl	8003c74 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e1b6      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005a4c:	f7ff fc1d 	bl	800528a <LL_RCC_LSI2_IsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f1      	bne.n	8005a3a <HAL_RCC_OscConfig+0x392>
 8005a56:	e027      	b.n	8005aa8 <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005a58:	f7ff fc06 	bl	8005268 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fe f90a 	bl	8003c74 <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005a64:	f7fe f906 	bl	8003c74 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e1a1      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005a76:	f7ff fc08 	bl	800528a <LL_RCC_LSI2_IsReady>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f1      	bne.n	8005a64 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005a80:	f7ff fbbe 	bl	8005200 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a84:	f7fe f8f6 	bl	8003c74 <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a8c:	f7fe f8f2 	bl	8003c74 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e18d      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a9e:	f7ff fbc0 	bl	8005222 <LL_RCC_LSI1_IsReady>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f1      	bne.n	8005a8c <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d05b      	beq.n	8005b6c <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab4:	4ba7      	ldr	r3, [pc, #668]	; (8005d54 <HAL_RCC_OscConfig+0x6ac>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d114      	bne.n	8005aea <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005ac0:	f7ff fa5e 	bl	8004f80 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac4:	f7fe f8d6 	bl	8003c74 <HAL_GetTick>
 8005ac8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005acc:	f7fe f8d2 	bl	8003c74 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e16d      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ade:	4b9d      	ldr	r3, [pc, #628]	; (8005d54 <HAL_RCC_OscConfig+0x6ac>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0f0      	beq.n	8005acc <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d102      	bne.n	8005af8 <HAL_RCC_OscConfig+0x450>
 8005af2:	f7ff fb1e 	bl	8005132 <LL_RCC_LSE_Enable>
 8005af6:	e00c      	b.n	8005b12 <HAL_RCC_OscConfig+0x46a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d104      	bne.n	8005b0a <HAL_RCC_OscConfig+0x462>
 8005b00:	f7ff fb39 	bl	8005176 <LL_RCC_LSE_EnableBypass>
 8005b04:	f7ff fb15 	bl	8005132 <LL_RCC_LSE_Enable>
 8005b08:	e003      	b.n	8005b12 <HAL_RCC_OscConfig+0x46a>
 8005b0a:	f7ff fb23 	bl	8005154 <LL_RCC_LSE_Disable>
 8005b0e:	f7ff fb43 	bl	8005198 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d014      	beq.n	8005b44 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fe f8ab 	bl	8003c74 <HAL_GetTick>
 8005b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b20:	e00a      	b.n	8005b38 <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fe f8a7 	bl	8003c74 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e140      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005b38:	f7ff fb3f 	bl	80051ba <LL_RCC_LSE_IsReady>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ef      	beq.n	8005b22 <HAL_RCC_OscConfig+0x47a>
 8005b42:	e013      	b.n	8005b6c <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fe f896 	bl	8003c74 <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fe f892 	bl	8003c74 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e12b      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b62:	f7ff fb2a 	bl	80051ba <LL_RCC_LSE_IsReady>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ef      	bne.n	8005b4c <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d02c      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d014      	beq.n	8005baa <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b80:	f7ff faa3 	bl	80050ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b84:	f7fe f876 	bl	8003c74 <HAL_GetTick>
 8005b88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b8c:	f7fe f872 	bl	8003c74 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e10d      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b9e:	f7ff fab6 	bl	800510e <LL_RCC_HSI48_IsReady>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f1      	beq.n	8005b8c <HAL_RCC_OscConfig+0x4e4>
 8005ba8:	e013      	b.n	8005bd2 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005baa:	f7ff fa9f 	bl	80050ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bae:	f7fe f861 	bl	8003c74 <HAL_GetTick>
 8005bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bb6:	f7fe f85d 	bl	8003c74 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0f8      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005bc8:	f7ff faa1 	bl	800510e <LL_RCC_HSI48_IsReady>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f1      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80ee 	beq.w	8005db8 <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bdc:	f7ff fbff 	bl	80053de <LL_RCC_GetSysClkSource>
 8005be0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	f040 80b4 	bne.w	8005d5c <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0203 	and.w	r2, r3, #3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d123      	bne.n	8005c4a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d11c      	bne.n	8005c4a <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d114      	bne.n	8005c4a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d10d      	bne.n	8005c4a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d106      	bne.n	8005c4a <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d05d      	beq.n	8005d06 <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	d058      	beq.n	8005d02 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e0ab      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c62:	f7ff fc72 	bl	800554a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c66:	f7fe f805 	bl	8003c74 <HAL_GetTick>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c6e:	f7fe f801 	bl	8003c74 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e09c      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1ef      	bne.n	8005c6e <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <HAL_RCC_OscConfig+0x6b0>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ca0:	4311      	orrs	r1, r2
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ca6:	0212      	lsls	r2, r2, #8
 8005ca8:	4311      	orrs	r1, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cae:	4311      	orrs	r1, r2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005cb4:	4311      	orrs	r1, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cc4:	f7ff fc32 	bl	800552c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cd8:	f7fd ffcc 	bl	8003c74 <HAL_GetTick>
 8005cdc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fd ffc8 	bl	8003c74 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e063      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0ef      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d00:	e05a      	b.n	8005db8 <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e059      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d151      	bne.n	8005db8 <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d14:	f7ff fc0a 	bl	800552c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d28:	f7fd ffa4 	bl	8003c74 <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d30:	f7fd ffa0 	bl	8003c74 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e03b      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ef      	beq.n	8005d30 <HAL_RCC_OscConfig+0x688>
 8005d50:	e032      	b.n	8005db8 <HAL_RCC_OscConfig+0x710>
 8005d52:	bf00      	nop
 8005d54:	58000400 	.word	0x58000400
 8005d58:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b0c      	cmp	r3, #12
 8005d60:	d028      	beq.n	8005db4 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d62:	f7ff fbf2 	bl	800554a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d70:	f023 0303 	bic.w	r3, r3, #3
 8005d74:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d80:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d88:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fd ff73 	bl	8003c74 <HAL_GetTick>
 8005d8e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d92:	f7fd ff6f 	bl	8003c74 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e00a      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1ef      	bne.n	8005d92 <HAL_RCC_OscConfig+0x6ea>
 8005db2:	e001      	b.n	8005db8 <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3734      	adds	r7, #52	; 0x34
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd90      	pop	{r4, r7, pc}
 8005dc2:	bf00      	nop

08005dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e12d      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd8:	4b98      	ldr	r3, [pc, #608]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d91b      	bls.n	8005e1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005de6:	4b95      	ldr	r3, [pc, #596]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 0207 	bic.w	r2, r3, #7
 8005dee:	4993      	ldr	r1, [pc, #588]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df6:	f7fd ff3d 	bl	8003c74 <HAL_GetTick>
 8005dfa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005dfe:	f7fd ff39 	bl	8003c74 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e111      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e10:	4b8a      	ldr	r3, [pc, #552]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d1ef      	bne.n	8005dfe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fae1 	bl	80053f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e34:	f7fd ff1e 	bl	8003c74 <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e3c:	f7fd ff1a 	bl	8003c74 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e0f2      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005e4e:	f7ff fbce 	bl	80055ee <LL_RCC_IsActiveFlag_HPRE>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f1      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d016      	beq.n	8005e92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fad8 	bl	800541e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e6e:	f7fd ff01 	bl	8003c74 <HAL_GetTick>
 8005e72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e76:	f7fd fefd 	bl	8003c74 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e0d5      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e88:	f7ff fbc3 	bl	8005612 <LL_RCC_IsActiveFlag_C2HPRE>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f1      	beq.n	8005e76 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d016      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff fad1 	bl	800544a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ea8:	f7fd fee4 	bl	8003c74 <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eb0:	f7fd fee0 	bl	8003c74 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e0b8      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ec2:	f7ff fbb9 	bl	8005638 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f1      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d016      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff facb 	bl	8005478 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ee2:	f7fd fec7 	bl	8003c74 <HAL_GetTick>
 8005ee6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eea:	f7fd fec3 	bl	8003c74 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e09b      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005efc:	f7ff fbaf 	bl	800565e <LL_RCC_IsActiveFlag_PPRE1>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f1      	beq.n	8005eea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fac1 	bl	80054a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f1e:	f7fd fea9 	bl	8003c74 <HAL_GetTick>
 8005f22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f26:	f7fd fea5 	bl	8003c74 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e07d      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005f38:	f7ff fba3 	bl	8005682 <LL_RCC_IsActiveFlag_PPRE2>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f1      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d043      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d106      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005f56:	f7ff f861 	bl	800501c <LL_RCC_HSE_IsReady>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d11e      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e067      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005f6c:	f7ff fafc 	bl	8005568 <LL_RCC_PLL_IsReady>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d113      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e05c      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f82:	f7ff f9c9 	bl	8005318 <LL_RCC_MSI_IsReady>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d108      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e051      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f90:	f7ff f874 	bl	800507c <LL_RCC_HSI_IsReady>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e04a      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fa07 	bl	80053b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fa8:	f7fd fe64 	bl	8003c74 <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb0:	f7fd fe60 	bl	8003c74 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e036      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc6:	f7ff fa0a 	bl	80053de <LL_RCC_GetSysClkSource>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d1ec      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d21b      	bcs.n	800601c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f023 0207 	bic.w	r2, r3, #7
 8005fec:	4913      	ldr	r1, [pc, #76]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff4:	f7fd fe3e 	bl	8003c74 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ffc:	f7fd fe3a 	bl	8003c74 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e012      	b.n	8006034 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800600e:	4b0b      	ldr	r3, [pc, #44]	; (800603c <HAL_RCC_ClockConfig+0x278>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d1ef      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800601c:	f000 f87e 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8006020:	4603      	mov	r3, r0
 8006022:	4a07      	ldr	r2, [pc, #28]	; (8006040 <HAL_RCC_ClockConfig+0x27c>)
 8006024:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006026:	f7fd fe31 	bl	8003c8c <HAL_GetTickPrio>
 800602a:	4603      	mov	r3, r0
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fe8c 	bl	8002d4a <HAL_InitTick>
 8006032:	4603      	mov	r3, r0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	58004000 	.word	0x58004000
 8006040:	20000044 	.word	0x20000044

08006044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800604a:	f7ff f9c8 	bl	80053de <LL_RCC_GetSysClkSource>
 800604e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006056:	f7ff f984 	bl	8005362 <LL_RCC_MSI_GetRange>
 800605a:	4603      	mov	r3, r0
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e04b      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d102      	bne.n	8006078 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006072:	4b28      	ldr	r3, [pc, #160]	; (8006114 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e045      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b08      	cmp	r3, #8
 800607c:	d10a      	bne.n	8006094 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800607e:	f7fe ff9d 	bl	8004fbc <LL_RCC_HSE_IsEnabledDiv2>
 8006082:	4603      	mov	r3, r0
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006088:	4b22      	ldr	r3, [pc, #136]	; (8006114 <HAL_RCC_GetSysClockFreq+0xd0>)
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	e03a      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800608e:	4b22      	ldr	r3, [pc, #136]	; (8006118 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e037      	b.n	8006104 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006094:	f7ff fa9f 	bl	80055d6 <LL_RCC_PLL_GetMainSource>
 8006098:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d003      	beq.n	80060a8 <HAL_RCC_GetSysClockFreq+0x64>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d003      	beq.n	80060ae <HAL_RCC_GetSysClockFreq+0x6a>
 80060a6:	e00d      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80060a8:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060aa:	60bb      	str	r3, [r7, #8]
        break;
 80060ac:	e015      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060ae:	f7fe ff85 	bl	8004fbc <LL_RCC_HSE_IsEnabledDiv2>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d102      	bne.n	80060be <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80060b8:	4b16      	ldr	r3, [pc, #88]	; (8006114 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80060bc:	e00d      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <HAL_RCC_GetSysClockFreq+0xd4>)
 80060c0:	60bb      	str	r3, [r7, #8]
        break;
 80060c2:	e00a      	b.n	80060da <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80060c4:	f7ff f94d 	bl	8005362 <LL_RCC_MSI_GetRange>
 80060c8:	4603      	mov	r3, r0
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <HAL_RCC_GetSysClockFreq+0xcc>)
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	60bb      	str	r3, [r7, #8]
        break;
 80060d8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80060da:	f7ff fa57 	bl	800558c <LL_RCC_PLL_GetN>
 80060de:	4602      	mov	r2, r0
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	fb03 f402 	mul.w	r4, r3, r2
 80060e6:	f7ff fa6a 	bl	80055be <LL_RCC_PLL_GetDivider>
 80060ea:	4603      	mov	r3, r0
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	3301      	adds	r3, #1
 80060f0:	fbb4 f4f3 	udiv	r4, r4, r3
 80060f4:	f7ff fa57 	bl	80055a6 <LL_RCC_PLL_GetR>
 80060f8:	4603      	mov	r3, r0
 80060fa:	0f5b      	lsrs	r3, r3, #29
 80060fc:	3301      	adds	r3, #1
 80060fe:	fbb4 f3f3 	udiv	r3, r4, r3
 8006102:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8006104:	68fb      	ldr	r3, [r7, #12]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bd90      	pop	{r4, r7, pc}
 800610e:	bf00      	nop
 8006110:	0800cae8 	.word	0x0800cae8
 8006114:	00f42400 	.word	0x00f42400
 8006118:	01e84800 	.word	0x01e84800

0800611c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800611c:	b598      	push	{r3, r4, r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006120:	f7ff ff90 	bl	8006044 <HAL_RCC_GetSysClockFreq>
 8006124:	4604      	mov	r4, r0
 8006126:	f7ff f9cf 	bl	80054c8 <LL_RCC_GetAHBPrescaler>
 800612a:	4603      	mov	r3, r0
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	4a03      	ldr	r2, [pc, #12]	; (8006140 <HAL_RCC_GetHCLKFreq+0x24>)
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd98      	pop	{r3, r4, r7, pc}
 8006140:	0800ca88 	.word	0x0800ca88

08006144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006144:	b598      	push	{r3, r4, r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006148:	f7ff ffe8 	bl	800611c <HAL_RCC_GetHCLKFreq>
 800614c:	4604      	mov	r4, r0
 800614e:	f7ff f9d5 	bl	80054fc <LL_RCC_GetAPB1Prescaler>
 8006152:	4603      	mov	r3, r0
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	4a04      	ldr	r2, [pc, #16]	; (800616c <HAL_RCC_GetPCLK1Freq+0x28>)
 800615c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd98      	pop	{r3, r4, r7, pc}
 800616c:	0800cac8 	.word	0x0800cac8

08006170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006170:	b598      	push	{r3, r4, r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006174:	f7ff ffd2 	bl	800611c <HAL_RCC_GetHCLKFreq>
 8006178:	4604      	mov	r4, r0
 800617a:	f7ff f9cb 	bl	8005514 <LL_RCC_GetAPB2Prescaler>
 800617e:	4603      	mov	r3, r0
 8006180:	0adb      	lsrs	r3, r3, #11
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	4a04      	ldr	r2, [pc, #16]	; (8006198 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd98      	pop	{r3, r4, r7, pc}
 8006198:	0800cac8 	.word	0x0800cac8

0800619c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2bb0      	cmp	r3, #176	; 0xb0
 80061a8:	d903      	bls.n	80061b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80061aa:	4b15      	ldr	r3, [pc, #84]	; (8006200 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e007      	b.n	80061c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	4a11      	ldr	r2, [pc, #68]	; (8006200 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80061bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80061c2:	f7ff f98d 	bl	80054e0 <LL_RCC_GetAHB4Prescaler>
 80061c6:	4603      	mov	r3, r0
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80061d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	0c9c      	lsrs	r4, r3, #18
 80061e6:	f7fe fedb 	bl	8004fa0 <HAL_PWREx_GetVoltageRange>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4619      	mov	r1, r3
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 f80c 	bl	800620c <RCC_SetFlashLatency>
 80061f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}
 80061fe:	bf00      	nop
 8006200:	0800cae8 	.word	0x0800cae8
 8006204:	0800ca88 	.word	0x0800ca88
 8006208:	431bde83 	.word	0x431bde83

0800620c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b093      	sub	sp, #76	; 0x4c
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006216:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <RCC_SetFlashLatency+0xe8>)
 8006218:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800621c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800621e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006222:	4a35      	ldr	r2, [pc, #212]	; (80062f8 <RCC_SetFlashLatency+0xec>)
 8006224:	f107 031c 	add.w	r3, r7, #28
 8006228:	ca07      	ldmia	r2, {r0, r1, r2}
 800622a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800622e:	4b33      	ldr	r3, [pc, #204]	; (80062fc <RCC_SetFlashLatency+0xf0>)
 8006230:	f107 040c 	add.w	r4, r7, #12
 8006234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800623a:	2300      	movs	r3, #0
 800623c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	d11a      	bne.n	800627c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006246:	2300      	movs	r3, #0
 8006248:	643b      	str	r3, [r7, #64]	; 0x40
 800624a:	e013      	b.n	8006274 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800624c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	3348      	adds	r3, #72	; 0x48
 8006252:	443b      	add	r3, r7
 8006254:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d807      	bhi.n	800626e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800625e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	3348      	adds	r3, #72	; 0x48
 8006264:	443b      	add	r3, r7
 8006266:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800626a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800626c:	e020      	b.n	80062b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800626e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006270:	3301      	adds	r3, #1
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006276:	2b03      	cmp	r3, #3
 8006278:	d9e8      	bls.n	800624c <RCC_SetFlashLatency+0x40>
 800627a:	e019      	b.n	80062b0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800627c:	2300      	movs	r3, #0
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006280:	e013      	b.n	80062aa <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	3348      	adds	r3, #72	; 0x48
 8006288:	443b      	add	r3, r7
 800628a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	429a      	cmp	r2, r3
 8006292:	d807      	bhi.n	80062a4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3348      	adds	r3, #72	; 0x48
 800629a:	443b      	add	r3, r7
 800629c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80062a0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80062a2:	e005      	b.n	80062b0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a6:	3301      	adds	r3, #1
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d9e8      	bls.n	8006282 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80062b0:	4b13      	ldr	r3, [pc, #76]	; (8006300 <RCC_SetFlashLatency+0xf4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f023 0207 	bic.w	r2, r3, #7
 80062b8:	4911      	ldr	r1, [pc, #68]	; (8006300 <RCC_SetFlashLatency+0xf4>)
 80062ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062bc:	4313      	orrs	r3, r2
 80062be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062c0:	f7fd fcd8 	bl	8003c74 <HAL_GetTick>
 80062c4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062c6:	e008      	b.n	80062da <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062c8:	f7fd fcd4 	bl	8003c74 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e007      	b.n	80062ea <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <RCC_SetFlashLatency+0xf4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1ef      	bne.n	80062c8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	374c      	adds	r7, #76	; 0x4c
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd90      	pop	{r4, r7, pc}
 80062f2:	bf00      	nop
 80062f4:	0800ca30 	.word	0x0800ca30
 80062f8:	0800ca40 	.word	0x0800ca40
 80062fc:	0800ca4c 	.word	0x0800ca4c
 8006300:	58004000 	.word	0x58004000

08006304 <LL_RCC_LSE_IsEnabled>:
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <LL_RCC_LSE_IsEnabled+0x18>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <LL_RCC_LSE_IsEnabled+0x1a>
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <LL_RCC_LSE_IsReady>:
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b02      	cmp	r3, #2
 800633a:	d101      	bne.n	8006340 <LL_RCC_LSE_IsReady+0x18>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <LL_RCC_LSE_IsReady+0x1a>
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_RCC_SetRFWKPClockSource>:
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_RCC_SetSMPSClockSource>:
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f023 0203 	bic.w	r2, r3, #3
 800638a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4313      	orrs	r3, r2
 8006392:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <LL_RCC_SetSMPSPrescaler>:
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_RCC_SetUSARTClockSource>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	f023 0203 	bic.w	r2, r3, #3
 80063dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <LL_RCC_SetLPUARTClockSource>:
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80063fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <LL_RCC_SetI2CClockSource>:
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006438:	43db      	mvns	r3, r3
 800643a:	401a      	ands	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <LL_RCC_SetLPTIMClockSource>:
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006466:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	041b      	lsls	r3, r3, #16
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_RCC_SetSAIClockSource>:
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_SetRNGClockSource>:
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80064c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80064ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_RCC_SetCLK48ClockSource>:
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_RCC_SetUSBClockSource>:
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ffe3 	bl	80064e6 <LL_RCC_SetCLK48ClockSource>
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <LL_RCC_SetADCClockSource>:
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800653c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_RCC_SetRTCClockSource>:
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_RCC_GetRTCClockSource>:
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006590:	4618      	mov	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <LL_RCC_ForceBackupDomainReset>:
{
 800659a:	b480      	push	{r7}
 800659c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065b2:	bf00      	nop
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <LL_RCC_ReleaseBackupDomainReset>:
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80065c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <LL_RCC_PLLSAI1_Enable>:
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f0:	6013      	str	r3, [r2, #0]
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <LL_RCC_PLLSAI1_Disable>:
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800660e:	6013      	str	r3, [r2, #0]
}
 8006610:	bf00      	nop
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_RCC_PLLSAI1_IsReady>:
{
 800661a:	b480      	push	{r7}
 800661c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800661e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800662c:	d101      	bne.n	8006632 <LL_RCC_PLLSAI1_IsReady+0x18>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b088      	sub	sp, #32
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006646:	2300      	movs	r3, #0
 8006648:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800664a:	2300      	movs	r3, #0
 800664c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d034      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006662:	d021      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006664:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006668:	d81b      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800666a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800666e:	d01d      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006674:	d815      	bhi.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800667a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800667e:	d110      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800668a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006690:	e00d      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f947 	bl	800692a <RCCEx_PLLSAI1_ConfigNP>
 800669c:	4603      	mov	r3, r0
 800669e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80066a0:	e005      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	77fb      	strb	r3, [r7, #31]
        break;
 80066a6:	e002      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80066ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ae:	7ffb      	ldrb	r3, [r7, #31]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fee8 	bl	800648e <LL_RCC_SetSAIClockSource>
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7ffb      	ldrb	r3, [r7, #31]
 80066c2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d046      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80066d0:	f7ff ff56 	bl	8006580 <LL_RCC_GetRTCClockSource>
 80066d4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d03c      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066e0:	f7fe fc4e 	bl	8004f80 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ff30 	bl	8006554 <LL_RCC_SetRTCClockSource>
 80066f4:	e02e      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80066f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006700:	f7ff ff4b 	bl	800659a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006704:	f7ff ff5a 	bl	80065bc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006720:	f7ff fdf0 	bl	8006304 <LL_RCC_LSE_IsEnabled>
 8006724:	4603      	mov	r3, r0
 8006726:	2b01      	cmp	r3, #1
 8006728:	d114      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800672a:	f7fd faa3 	bl	8003c74 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006730:	e00b      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006732:	f7fd fa9f 	bl	8003c74 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006740:	4293      	cmp	r3, r2
 8006742:	d902      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	77fb      	strb	r3, [r7, #31]
              break;
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800674a:	f7ff fded 	bl	8006328 <LL_RCC_LSE_IsReady>
 800674e:	4603      	mov	r3, r0
 8006750:	2b01      	cmp	r3, #1
 8006752:	d1ee      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	77bb      	strb	r3, [r7, #30]
 8006758:	e001      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	7ffb      	ldrb	r3, [r7, #31]
 800675c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fe2a 	bl	80063c8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fe35 	bl	80063f4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fe5d 	bl	800645a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fe52 	bl	800645a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fe2a 	bl	8006420 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d004      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fe1f 	bl	8006420 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d022      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff fe8d 	bl	8006512 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006800:	d107      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800680c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006810:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800681a:	d10b      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f8dd 	bl	80069e0 <RCCEx_PLLSAI1_ConfigNQ>
 8006826:	4603      	mov	r3, r0
 8006828:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8006830:	7ffb      	ldrb	r3, [r7, #31]
 8006832:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800683c:	2b00      	cmp	r3, #0
 800683e:	d02b      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006848:	d008      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006852:	d003      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff fe2a 	bl	80064ba <LL_RCC_SetRNGClockSource>
 8006866:	e00a      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	2000      	movs	r0, #0
 8006874:	f7ff fe21 	bl	80064ba <LL_RCC_SetRNGClockSource>
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f7ff fe34 	bl	80064e6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006882:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d022      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fe3d 	bl	8006528 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b6:	d107      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d0:	d10b      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f8dd 	bl	8006a96 <RCCEx_PLLSAI1_ConfigNR>
 80068dc:	4603      	mov	r3, r0
 80068de:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80068e6:	7ffb      	ldrb	r3, [r7, #31]
 80068e8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff fd26 	bl	800634c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fd45 	bl	80063a0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fd2c 	bl	8006378 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8006920:	7fbb      	ldrb	r3, [r7, #30]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006936:	f7ff fe61 	bl	80065fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800693a:	f7fd f99b 	bl	8003c74 <HAL_GetTick>
 800693e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006940:	e009      	b.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006942:	f7fd f997 	bl	8003c74 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d902      	bls.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	e004      	b.n	8006960 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006956:	f7ff fe60 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1f0      	bne.n	8006942 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d137      	bne.n	80069d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800697a:	4313      	orrs	r3, r2
 800697c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006990:	4313      	orrs	r3, r2
 8006992:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006994:	f7ff fe23 	bl	80065de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006998:	f7fd f96c 	bl	8003c74 <HAL_GetTick>
 800699c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800699e:	e009      	b.n	80069b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069a0:	f7fd f968 	bl	8003c74 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d902      	bls.n	80069b4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	73fb      	strb	r3, [r7, #15]
        break;
 80069b2:	e004      	b.n	80069be <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069b4:	f7ff fe31 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d1f0      	bne.n	80069a0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069d2:	4313      	orrs	r3, r2
 80069d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80069ec:	f7ff fe06 	bl	80065fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069f0:	f7fd f940 	bl	8003c74 <HAL_GetTick>
 80069f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069f6:	e009      	b.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069f8:	f7fd f93c 	bl	8003c74 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d902      	bls.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0a:	e004      	b.n	8006a16 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a0c:	f7ff fe05 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d137      	bne.n	8006a8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a4a:	f7ff fdc8 	bl	80065de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4e:	f7fd f911 	bl	8003c74 <HAL_GetTick>
 8006a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a54:	e009      	b.n	8006a6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a56:	f7fd f90d 	bl	8003c74 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d902      	bls.n	8006a6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	73fb      	strb	r3, [r7, #15]
        break;
 8006a68:	e004      	b.n	8006a74 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a6a:	f7ff fdd6 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d1f0      	bne.n	8006a56 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006aa2:	f7ff fdab 	bl	80065fc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006aa6:	f7fd f8e5 	bl	8003c74 <HAL_GetTick>
 8006aaa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006aac:	e009      	b.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aae:	f7fd f8e1 	bl	8003c74 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d902      	bls.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac0:	e004      	b.n	8006acc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ac2:	f7ff fdaa 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d137      	bne.n	8006b42 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afc:	4313      	orrs	r3, r2
 8006afe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b00:	f7ff fd6d 	bl	80065de <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b04:	f7fd f8b6 	bl	8003c74 <HAL_GetTick>
 8006b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b0a:	e009      	b.n	8006b20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b0c:	f7fd f8b2 	bl	8003c74 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d902      	bls.n	8006b20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b1e:	e004      	b.n	8006b2a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b20:	f7ff fd7b 	bl	800661a <LL_RCC_PLLSAI1_IsReady>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d1f0      	bne.n	8006b0c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <LL_RCC_GetUSARTClockSource>:
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4013      	ands	r3, r2
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <LL_RCC_GetLPUARTClockSource>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4013      	ands	r3, r2
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e042      	b.n	8006c24 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fc fb77 	bl	80032a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	; 0x24
 8006bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fd30 	bl	8007634 <UART_SetConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e022      	b.n	8006c24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 ff4c 	bl	8007a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 ffd3 	bl	8007bc8 <UART_CheckIdleState>
 8006c22:	4603      	mov	r3, r0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e02e      	b.n	8006c9c <HAL_UART_DeInit+0x70>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	; 0x24
 8006c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fc fbba 	bl	80033e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b091      	sub	sp, #68	; 0x44
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	f040 808c 	bne.w	8006dd6 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_UART_Transmit_IT+0x26>
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e084      	b.n	8006dd8 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_UART_Transmit_IT+0x38>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e07d      	b.n	8006dd8 <HAL_UART_Transmit_IT+0x134>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2221      	movs	r2, #33	; 0x21
 8006d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d18:	d12e      	bne.n	8006d78 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d107      	bne.n	8006d34 <HAL_UART_Transmit_IT+0x90>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <HAL_UART_Transmit_IT+0x140>)
 8006d30:	675a      	str	r2, [r3, #116]	; 0x74
 8006d32:	e002      	b.n	8006d3a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <HAL_UART_Transmit_IT+0x144>)
 8006d38:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3308      	adds	r3, #8
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	e853 3f00 	ldrex	r3, [r3]
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d62:	637a      	str	r2, [r7, #52]	; 0x34
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d6a:	e841 2300 	strex	r3, r2, [r1]
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1e5      	bne.n	8006d42 <HAL_UART_Transmit_IT+0x9e>
 8006d76:	e02c      	b.n	8006dd2 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d80:	d107      	bne.n	8006d92 <HAL_UART_Transmit_IT+0xee>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d103      	bne.n	8006d92 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a17      	ldr	r2, [pc, #92]	; (8006dec <HAL_UART_Transmit_IT+0x148>)
 8006d8e:	675a      	str	r2, [r3, #116]	; 0x74
 8006d90:	e002      	b.n	8006d98 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <HAL_UART_Transmit_IT+0x14c>)
 8006d96:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	613b      	str	r3, [r7, #16]
   return(result);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dbe:	623b      	str	r3, [r7, #32]
 8006dc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	69f9      	ldr	r1, [r7, #28]
 8006dc4:	6a3a      	ldr	r2, [r7, #32]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	e000      	b.n	8006dd8 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006dd6:	2302      	movs	r3, #2
  }
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3744      	adds	r7, #68	; 0x44
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	08008503 	.word	0x08008503
 8006de8:	08008423 	.word	0x08008423
 8006dec:	08008361 	.word	0x08008361
 8006df0:	080082a9 	.word	0x080082a9

08006df4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d142      	bne.n	8006e92 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_UART_Receive_IT+0x24>
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e03b      	b.n	8006e94 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Receive_IT+0x36>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e034      	b.n	8006e94 <HAL_UART_Receive_IT+0xa0>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_UART_Receive_IT+0xa8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01f      	beq.n	8006e82 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	623b      	str	r3, [r7, #32]
 8006e70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	69f9      	ldr	r1, [r7, #28]
 8006e74:	6a3a      	ldr	r2, [r7, #32]
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e6      	bne.n	8006e50 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	461a      	mov	r2, r3
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 ffb1 	bl	8007df0 <UART_Start_Receive_IT>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40008000 	.word	0x40008000

08006ea0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d17a      	bne.n	8006fae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_UART_Transmit_DMA+0x24>
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e073      	b.n	8006fb0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Transmit_DMA+0x36>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e06c      	b.n	8006fb0 <HAL_UART_Transmit_DMA+0x110>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	88fa      	ldrh	r2, [r7, #6]
 8006ee8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	88fa      	ldrh	r2, [r7, #6]
 8006ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2221      	movs	r2, #33	; 0x21
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d02c      	beq.n	8006f66 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f10:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <HAL_UART_Transmit_DMA+0x118>)
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f18:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <HAL_UART_Transmit_DMA+0x11c>)
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f20:	4a27      	ldr	r2, [pc, #156]	; (8006fc0 <HAL_UART_Transmit_DMA+0x120>)
 8006f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f28:	2200      	movs	r2, #0
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f34:	4619      	mov	r1, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3328      	adds	r3, #40	; 0x28
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	f7fd f914 	bl	800416c <HAL_DMA_Start_IT>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00d      	beq.n	8006f66 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2210      	movs	r2, #16
 8006f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e024      	b.n	8006fb0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2240      	movs	r2, #64	; 0x40
 8006f6c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	e853 3f00 	ldrex	r3, [r3]
 8006f84:	613b      	str	r3, [r7, #16]
   return(result);
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f96:	623a      	str	r2, [r7, #32]
 8006f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	69f9      	ldr	r1, [r7, #28]
 8006f9c:	6a3a      	ldr	r2, [r7, #32]
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e5      	bne.n	8006f76 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	; 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	08008147 	.word	0x08008147
 8006fbc:	080081e1 	.word	0x080081e1
 8006fc0:	080081fd 	.word	0x080081fd

08006fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b0ba      	sub	sp, #232	; 0xe8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006fee:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d11b      	bne.n	8007038 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f003 0320 	and.w	r3, r3, #32
 8007008:	2b00      	cmp	r3, #0
 800700a:	d015      	beq.n	8007038 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d105      	bne.n	8007024 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800701c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 82d6 	beq.w	80075da <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
      }
      return;
 8007036:	e2d0      	b.n	80075da <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 811f 	beq.w	8007280 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007042:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007046:	4b8b      	ldr	r3, [pc, #556]	; (8007274 <HAL_UART_IRQHandler+0x2b0>)
 8007048:	4013      	ands	r3, r2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800704e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007052:	4b89      	ldr	r3, [pc, #548]	; (8007278 <HAL_UART_IRQHandler+0x2b4>)
 8007054:	4013      	ands	r3, r2
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8112 	beq.w	8007280 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_UART_IRQHandler+0xc8>
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800706c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2201      	movs	r2, #1
 800707a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007082:	f043 0201 	orr.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0302 	and.w	r3, r3, #2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d011      	beq.n	80070bc <HAL_UART_IRQHandler+0xf8>
 8007098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2202      	movs	r2, #2
 80070aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b2:	f043 0204 	orr.w	r2, r3, #4
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d011      	beq.n	80070ec <HAL_UART_IRQHandler+0x128>
 80070c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2204      	movs	r2, #4
 80070da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e2:	f043 0202 	orr.w	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d017      	beq.n	8007128 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80070f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fc:	f003 0320 	and.w	r3, r3, #32
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007104:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007108:	4b5a      	ldr	r3, [pc, #360]	; (8007274 <HAL_UART_IRQHandler+0x2b0>)
 800710a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2208      	movs	r2, #8
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800711e:	f043 0208 	orr.w	r2, r3, #8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007130:	2b00      	cmp	r3, #0
 8007132:	d012      	beq.n	800715a <HAL_UART_IRQHandler+0x196>
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00c      	beq.n	800715a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007150:	f043 0220 	orr.w	r2, r3, #32
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 823c 	beq.w	80075de <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d013      	beq.n	800719a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d007      	beq.n	800719a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b40      	cmp	r3, #64	; 0x40
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d04f      	beq.n	800725e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 ff5b 	bl	800807a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d141      	bne.n	8007256 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d9      	bne.n	80071d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d013      	beq.n	800724e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800722a:	4a14      	ldr	r2, [pc, #80]	; (800727c <HAL_UART_IRQHandler+0x2b8>)
 800722c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007232:	4618      	mov	r0, r3
 8007234:	f7fd f874 	bl	8004320 <HAL_DMA_Abort_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d017      	beq.n	800726e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e00f      	b.n	800726e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9da 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e00b      	b.n	800726e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9d6 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	e007      	b.n	800726e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f9d2 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800726c:	e1b7      	b.n	80075de <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726e:	bf00      	nop
    return;
 8007270:	e1b5      	b.n	80075de <HAL_UART_IRQHandler+0x61a>
 8007272:	bf00      	nop
 8007274:	10000001 	.word	0x10000001
 8007278:	04000120 	.word	0x04000120
 800727c:	0800827d 	.word	0x0800827d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 814a 	bne.w	800751e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0310 	and.w	r3, r3, #16
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8143 	beq.w	800751e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 813c 	beq.w	800751e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2210      	movs	r2, #16
 80072ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b40      	cmp	r3, #64	; 0x40
 80072ba:	f040 80b5 	bne.w	8007428 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80072ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8187 	beq.w	80075e2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 817f 	bcs.w	80075e2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 8086 	bne.w	800740c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800731c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800732a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800732e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007336:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1da      	bne.n	8007300 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800735a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800736e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007372:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007374:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007376:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e1      	bne.n	800734a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3308      	adds	r3, #8
 800738c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e3      	bne.n	8007386 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073dc:	f023 0310 	bic.w	r3, r3, #16
 80073e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e4      	bne.n	80073cc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007406:	4618      	mov	r0, r3
 8007408:	f7fc ff2b 	bl	8004262 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007418:	b29b      	uxth	r3, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	b29b      	uxth	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8fb 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007426:	e0dc      	b.n	80075e2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007434:	b29b      	uxth	r3, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80ce 	beq.w	80075e6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800744a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80c9 	beq.w	80075e6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007468:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007476:	647b      	str	r3, [r7, #68]	; 0x44
 8007478:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e4      	bne.n	8007454 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	623b      	str	r3, [r7, #32]
   return(result);
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a0:	f023 0301 	bic.w	r3, r3, #1
 80074a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074b2:	633a      	str	r2, [r7, #48]	; 0x30
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e1      	bne.n	800748a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	69b9      	ldr	r1, [r7, #24]
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	617b      	str	r3, [r7, #20]
   return(result);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e4      	bne.n	80074da <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f880 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800751c:	e063      	b.n	80075e6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00e      	beq.n	8007548 <HAL_UART_IRQHandler+0x584>
 800752a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800752e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800753e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fcdb 	bl	8008efc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007546:	e051      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007550:	2b00      	cmp	r3, #0
 8007552:	d014      	beq.n	800757e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	d105      	bne.n	800756c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007570:	2b00      	cmp	r3, #0
 8007572:	d03a      	beq.n	80075ea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
    }
    return;
 800757c:	e035      	b.n	80075ea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800757e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d009      	beq.n	800759e <HAL_UART_IRQHandler+0x5da>
 800758a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f828 	bl	80085ec <UART_EndTransmit_IT>
    return;
 800759c:	e026      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d009      	beq.n	80075be <HAL_UART_IRQHandler+0x5fa>
 80075aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fcb4 	bl	8008f24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075bc:	e016      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d010      	beq.n	80075ec <HAL_UART_IRQHandler+0x628>
 80075ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da0c      	bge.n	80075ec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fc9c 	bl	8008f10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d8:	e008      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
      return;
 80075da:	bf00      	nop
 80075dc:	e006      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
    return;
 80075de:	bf00      	nop
 80075e0:	e004      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
      return;
 80075e2:	bf00      	nop
 80075e4:	e002      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
      return;
 80075e6:	bf00      	nop
 80075e8:	e000      	b.n	80075ec <HAL_UART_IRQHandler+0x628>
    return;
 80075ea:	bf00      	nop
  }
}
 80075ec:	37e8      	adds	r7, #232	; 0xe8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007638:	b08c      	sub	sp, #48	; 0x30
 800763a:	af00      	add	r7, sp, #0
 800763c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4baf      	ldr	r3, [pc, #700]	; (8007920 <UART_SetConfig+0x2ec>)
 8007664:	4013      	ands	r3, r2
 8007666:	697a      	ldr	r2, [r7, #20]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4aa4      	ldr	r2, [pc, #656]	; (8007924 <UART_SetConfig+0x2f0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769c:	4313      	orrs	r3, r2
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80076aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	6812      	ldr	r2, [r2, #0]
 80076b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f023 010f 	bic.w	r1, r3, #15
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a95      	ldr	r2, [pc, #596]	; (8007928 <UART_SetConfig+0x2f4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d125      	bne.n	8007724 <UART_SetConfig+0xf0>
 80076d8:	2003      	movs	r0, #3
 80076da:	f7ff fa37 	bl	8006b4c <LL_RCC_GetUSARTClockSource>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d81b      	bhi.n	800771c <UART_SetConfig+0xe8>
 80076e4:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0xb8>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	08007705 	.word	0x08007705
 80076f8:	08007715 	.word	0x08007715
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007702:	e042      	b.n	800778a <UART_SetConfig+0x156>
 8007704:	2302      	movs	r3, #2
 8007706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800770a:	e03e      	b.n	800778a <UART_SetConfig+0x156>
 800770c:	2304      	movs	r3, #4
 800770e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007712:	e03a      	b.n	800778a <UART_SetConfig+0x156>
 8007714:	2308      	movs	r3, #8
 8007716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800771a:	e036      	b.n	800778a <UART_SetConfig+0x156>
 800771c:	2310      	movs	r3, #16
 800771e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007722:	e032      	b.n	800778a <UART_SetConfig+0x156>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a7e      	ldr	r2, [pc, #504]	; (8007924 <UART_SetConfig+0x2f0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d12a      	bne.n	8007784 <UART_SetConfig+0x150>
 800772e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007732:	f7ff fa1b 	bl	8006b6c <LL_RCC_GetLPUARTClockSource>
 8007736:	4603      	mov	r3, r0
 8007738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800773c:	d01a      	beq.n	8007774 <UART_SetConfig+0x140>
 800773e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007742:	d81b      	bhi.n	800777c <UART_SetConfig+0x148>
 8007744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007748:	d00c      	beq.n	8007764 <UART_SetConfig+0x130>
 800774a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800774e:	d815      	bhi.n	800777c <UART_SetConfig+0x148>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <UART_SetConfig+0x128>
 8007754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007758:	d008      	beq.n	800776c <UART_SetConfig+0x138>
 800775a:	e00f      	b.n	800777c <UART_SetConfig+0x148>
 800775c:	2300      	movs	r3, #0
 800775e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007762:	e012      	b.n	800778a <UART_SetConfig+0x156>
 8007764:	2302      	movs	r3, #2
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776a:	e00e      	b.n	800778a <UART_SetConfig+0x156>
 800776c:	2304      	movs	r3, #4
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007772:	e00a      	b.n	800778a <UART_SetConfig+0x156>
 8007774:	2308      	movs	r3, #8
 8007776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777a:	e006      	b.n	800778a <UART_SetConfig+0x156>
 800777c:	2310      	movs	r3, #16
 800777e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007782:	e002      	b.n	800778a <UART_SetConfig+0x156>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a65      	ldr	r2, [pc, #404]	; (8007924 <UART_SetConfig+0x2f0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	f040 8097 	bne.w	80078c4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800779a:	2b08      	cmp	r3, #8
 800779c:	d823      	bhi.n	80077e6 <UART_SetConfig+0x1b2>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x170>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077e7 	.word	0x080077e7
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077d7 	.word	0x080077d7
 80077b8:	080077e7 	.word	0x080077e7
 80077bc:	080077e7 	.word	0x080077e7
 80077c0:	080077e7 	.word	0x080077e7
 80077c4:	080077df 	.word	0x080077df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7fe fcbc 	bl	8006144 <HAL_RCC_GetPCLK1Freq>
 80077cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077ce:	e010      	b.n	80077f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d0:	4b56      	ldr	r3, [pc, #344]	; (800792c <UART_SetConfig+0x2f8>)
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077d4:	e00d      	b.n	80077f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077d6:	f7fe fc35 	bl	8006044 <HAL_RCC_GetSysClockFreq>
 80077da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80077dc:	e009      	b.n	80077f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077e4:	e005      	b.n	80077f2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80077f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 812b 	beq.w	8007a50 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	4a4c      	ldr	r2, [pc, #304]	; (8007930 <UART_SetConfig+0x2fc>)
 8007800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007804:	461a      	mov	r2, r3
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	fbb3 f3f2 	udiv	r3, r3, r2
 800780c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	4413      	add	r3, r2
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	429a      	cmp	r2, r3
 800781c:	d305      	bcc.n	800782a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	429a      	cmp	r2, r3
 8007828:	d903      	bls.n	8007832 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007830:	e10e      	b.n	8007a50 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007834:	2200      	movs	r2, #0
 8007836:	60bb      	str	r3, [r7, #8]
 8007838:	60fa      	str	r2, [r7, #12]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	4a3c      	ldr	r2, [pc, #240]	; (8007930 <UART_SetConfig+0x2fc>)
 8007840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007844:	b29b      	uxth	r3, r3
 8007846:	2200      	movs	r2, #0
 8007848:	603b      	str	r3, [r7, #0]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007850:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007854:	f7f8 fcfc 	bl	8000250 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4610      	mov	r0, r2
 800785e:	4619      	mov	r1, r3
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	020b      	lsls	r3, r1, #8
 800786a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800786e:	0202      	lsls	r2, r0, #8
 8007870:	6979      	ldr	r1, [r7, #20]
 8007872:	6849      	ldr	r1, [r1, #4]
 8007874:	0849      	lsrs	r1, r1, #1
 8007876:	2000      	movs	r0, #0
 8007878:	460c      	mov	r4, r1
 800787a:	4605      	mov	r5, r0
 800787c:	eb12 0804 	adds.w	r8, r2, r4
 8007880:	eb43 0905 	adc.w	r9, r3, r5
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	469a      	mov	sl, r3
 800788c:	4693      	mov	fp, r2
 800788e:	4652      	mov	r2, sl
 8007890:	465b      	mov	r3, fp
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	f7f8 fcdb 	bl	8000250 <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4613      	mov	r3, r2
 80078a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078a8:	d308      	bcc.n	80078bc <UART_SetConfig+0x288>
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b0:	d204      	bcs.n	80078bc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a3a      	ldr	r2, [r7, #32]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	e0c9      	b.n	8007a50 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078c2:	e0c5      	b.n	8007a50 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078cc:	d16e      	bne.n	80079ac <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80078ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078d2:	3b01      	subs	r3, #1
 80078d4:	2b07      	cmp	r3, #7
 80078d6:	d82d      	bhi.n	8007934 <UART_SetConfig+0x300>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <UART_SetConfig+0x2ac>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007935 	.word	0x08007935
 80078ec:	0800790f 	.word	0x0800790f
 80078f0:	08007935 	.word	0x08007935
 80078f4:	08007935 	.word	0x08007935
 80078f8:	08007935 	.word	0x08007935
 80078fc:	08007917 	.word	0x08007917
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007900:	f7fe fc36 	bl	8006170 <HAL_RCC_GetPCLK2Freq>
 8007904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007906:	e01b      	b.n	8007940 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <UART_SetConfig+0x2f8>)
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800790c:	e018      	b.n	8007940 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790e:	f7fe fb99 	bl	8006044 <HAL_RCC_GetSysClockFreq>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007914:	e014      	b.n	8007940 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800791c:	e010      	b.n	8007940 <UART_SetConfig+0x30c>
 800791e:	bf00      	nop
 8007920:	cfff69f3 	.word	0xcfff69f3
 8007924:	40008000 	.word	0x40008000
 8007928:	40013800 	.word	0x40013800
 800792c:	00f42400 	.word	0x00f42400
 8007930:	0800cb28 	.word	0x0800cb28
      default:
        pclk = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800793e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8084 	beq.w	8007a50 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	4a4b      	ldr	r2, [pc, #300]	; (8007a7c <UART_SetConfig+0x448>)
 800794e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007952:	461a      	mov	r2, r3
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	fbb3 f3f2 	udiv	r3, r3, r2
 800795a:	005a      	lsls	r2, r3, #1
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	085b      	lsrs	r3, r3, #1
 8007962:	441a      	add	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	b29b      	uxth	r3, r3
 800796e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2b0f      	cmp	r3, #15
 8007974:	d916      	bls.n	80079a4 <UART_SetConfig+0x370>
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800797c:	d212      	bcs.n	80079a4 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f023 030f 	bic.w	r3, r3, #15
 8007986:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	085b      	lsrs	r3, r3, #1
 800798c:	b29b      	uxth	r3, r3
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	b29a      	uxth	r2, r3
 8007994:	8bfb      	ldrh	r3, [r7, #30]
 8007996:	4313      	orrs	r3, r2
 8007998:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	8bfa      	ldrh	r2, [r7, #30]
 80079a0:	60da      	str	r2, [r3, #12]
 80079a2:	e055      	b.n	8007a50 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079aa:	e051      	b.n	8007a50 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079b0:	3b01      	subs	r3, #1
 80079b2:	2b07      	cmp	r3, #7
 80079b4:	d821      	bhi.n	80079fa <UART_SetConfig+0x3c6>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <UART_SetConfig+0x388>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079fb 	.word	0x080079fb
 80079c8:	080079eb 	.word	0x080079eb
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	080079fb 	.word	0x080079fb
 80079d8:	080079f3 	.word	0x080079f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079dc:	f7fe fbc8 	bl	8006170 <HAL_RCC_GetPCLK2Freq>
 80079e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079e2:	e010      	b.n	8007a06 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e4:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <UART_SetConfig+0x44c>)
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079e8:	e00d      	b.n	8007a06 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fe fb2b 	bl	8006044 <HAL_RCC_GetSysClockFreq>
 80079ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079f0:	e009      	b.n	8007a06 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079f8:	e005      	b.n	8007a06 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a04:	bf00      	nop
    }

    if (pclk != 0U)
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d021      	beq.n	8007a50 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	4a1a      	ldr	r2, [pc, #104]	; (8007a7c <UART_SetConfig+0x448>)
 8007a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a16:	461a      	mov	r2, r3
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	441a      	add	r2, r3
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d908      	bls.n	8007a4a <UART_SetConfig+0x416>
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3e:	d204      	bcs.n	8007a4a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	e002      	b.n	8007a50 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2200      	movs	r2, #0
 8007a64:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3730      	adds	r7, #48	; 0x30
 8007a74:	46bd      	mov	sp, r7
 8007a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7a:	bf00      	nop
 8007a7c:	0800cb28 	.word	0x0800cb28
 8007a80:	00f42400 	.word	0x00f42400

08007a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01a      	beq.n	8007b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b82:	d10a      	bne.n	8007b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	430a      	orrs	r2, r1
 8007bba:	605a      	str	r2, [r3, #4]
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bd8:	f7fc f84c 	bl	8003c74 <HAL_GetTick>
 8007bdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d10e      	bne.n	8007c0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f82f 	bl	8007c5e <UART_WaitOnFlagUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e025      	b.n	8007c56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d10e      	bne.n	8007c36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f819 	bl	8007c5e <UART_WaitOnFlagUntilTimeout>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e00f      	b.n	8007c56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b09c      	sub	sp, #112	; 0x70
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	603b      	str	r3, [r7, #0]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c6e:	e0a9      	b.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	f000 80a5 	beq.w	8007dc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c7a:	f7fb fffb 	bl	8003c74 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d302      	bcc.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d140      	bne.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ce2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e5      	bne.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e069      	b.n	8007de6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d051      	beq.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2e:	d149      	bne.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d58:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3308      	adds	r3, #8
 8007d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f023 0301 	bic.w	r3, r3, #1
 8007d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3308      	adds	r3, #8
 8007d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d8c:	623a      	str	r2, [r7, #32]
 8007d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	69f9      	ldr	r1, [r7, #28]
 8007d92:	6a3a      	ldr	r2, [r7, #32]
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e5      	bne.n	8007d6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e010      	b.n	8007de6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	69da      	ldr	r2, [r3, #28]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2301      	moveq	r3, #1
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	461a      	mov	r2, r3
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	f43f af46 	beq.w	8007c70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3770      	adds	r7, #112	; 0x70
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b09d      	sub	sp, #116	; 0x74
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e22:	d10e      	bne.n	8007e42 <UART_Start_Receive_IT+0x52>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <UART_Start_Receive_IT+0x48>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e36:	e02d      	b.n	8007e94 <UART_Start_Receive_IT+0xa4>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	22ff      	movs	r2, #255	; 0xff
 8007e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e40:	e028      	b.n	8007e94 <UART_Start_Receive_IT+0xa4>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10d      	bne.n	8007e66 <UART_Start_Receive_IT+0x76>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <UART_Start_Receive_IT+0x6c>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	22ff      	movs	r2, #255	; 0xff
 8007e56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e5a:	e01b      	b.n	8007e94 <UART_Start_Receive_IT+0xa4>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	227f      	movs	r2, #127	; 0x7f
 8007e60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e64:	e016      	b.n	8007e94 <UART_Start_Receive_IT+0xa4>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e6e:	d10d      	bne.n	8007e8c <UART_Start_Receive_IT+0x9c>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <UART_Start_Receive_IT+0x92>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	227f      	movs	r2, #127	; 0x7f
 8007e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e80:	e008      	b.n	8007e94 <UART_Start_Receive_IT+0xa4>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	223f      	movs	r2, #63	; 0x3f
 8007e86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e8a:	e003      	b.n	8007e94 <UART_Start_Receive_IT+0xa4>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2222      	movs	r2, #34	; 0x22
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ec4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007ec6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007eca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e5      	bne.n	8007ea4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee0:	d14d      	bne.n	8007f7e <UART_Start_Receive_IT+0x18e>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d347      	bcc.n	8007f7e <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef6:	d107      	bne.n	8007f08 <UART_Start_Receive_IT+0x118>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a39      	ldr	r2, [pc, #228]	; (8007fe8 <UART_Start_Receive_IT+0x1f8>)
 8007f04:	671a      	str	r2, [r3, #112]	; 0x70
 8007f06:	e002      	b.n	8007f0e <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a38      	ldr	r2, [pc, #224]	; (8007fec <UART_Start_Receive_IT+0x1fc>)
 8007f0c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f36:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e6      	bne.n	8007f16 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5e:	667b      	str	r3, [r7, #100]	; 0x64
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f68:	637a      	str	r2, [r7, #52]	; 0x34
 8007f6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_Start_Receive_IT+0x158>
 8007f7c:	e02c      	b.n	8007fd8 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f86:	d107      	bne.n	8007f98 <UART_Start_Receive_IT+0x1a8>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4a17      	ldr	r2, [pc, #92]	; (8007ff0 <UART_Start_Receive_IT+0x200>)
 8007f94:	671a      	str	r2, [r3, #112]	; 0x70
 8007f96:	e002      	b.n	8007f9e <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4a16      	ldr	r2, [pc, #88]	; (8007ff4 <UART_Start_Receive_IT+0x204>)
 8007f9c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fba:	663b      	str	r3, [r7, #96]	; 0x60
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc4:	623b      	str	r3, [r7, #32]
 8007fc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	69f9      	ldr	r1, [r7, #28]
 8007fca:	6a3a      	ldr	r2, [r7, #32]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3774      	adds	r7, #116	; 0x74
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	08008bfd 	.word	0x08008bfd
 8007fec:	08008905 	.word	0x08008905
 8007ff0:	080087a3 	.word	0x080087a3
 8007ff4:	08008643 	.word	0x08008643

08007ff8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b08f      	sub	sp, #60	; 0x3c
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	61fb      	str	r3, [r7, #28]
   return(result);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008020:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e6      	bne.n	8008000 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	60bb      	str	r3, [r7, #8]
   return(result);
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008048:	633b      	str	r3, [r7, #48]	; 0x30
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008052:	61ba      	str	r2, [r7, #24]
 8008054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6979      	ldr	r1, [r7, #20]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	613b      	str	r3, [r7, #16]
   return(result);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e5      	bne.n	8008032 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800806e:	bf00      	nop
 8008070:	373c      	adds	r7, #60	; 0x3c
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800807a:	b480      	push	{r7}
 800807c:	b095      	sub	sp, #84	; 0x54
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a0:	643b      	str	r3, [r7, #64]	; 0x40
 80080a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a8:	e841 2300 	strex	r3, r2, [r1]
 80080ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e6      	bne.n	8008082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3308      	adds	r3, #8
 80080ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ca:	f023 0301 	bic.w	r3, r3, #1
 80080ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3308      	adds	r3, #8
 80080d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e3      	bne.n	80080b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d118      	bne.n	8008126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	60bb      	str	r3, [r7, #8]
   return(result);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f023 0310 	bic.w	r3, r3, #16
 8008108:	647b      	str	r3, [r7, #68]	; 0x44
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6979      	ldr	r1, [r7, #20]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	613b      	str	r3, [r7, #16]
   return(result);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	671a      	str	r2, [r3, #112]	; 0x70
}
 800813a:	bf00      	nop
 800813c:	3754      	adds	r7, #84	; 0x54
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b090      	sub	sp, #64	; 0x40
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d137      	bne.n	80081d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	2200      	movs	r2, #0
 8008166:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800816a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	623b      	str	r3, [r7, #32]
   return(result);
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008180:	63bb      	str	r3, [r7, #56]	; 0x38
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818a:	633a      	str	r2, [r7, #48]	; 0x30
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	e853 3f00 	ldrex	r3, [r3]
 80081aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
 80081b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c0:	69b9      	ldr	r1, [r7, #24]
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	e841 2300 	strex	r3, r2, [r1]
 80081c8:	617b      	str	r3, [r7, #20]
   return(result);
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e6      	bne.n	800819e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80081d0:	e002      	b.n	80081d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80081d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081d4:	f7fa f8d0 	bl	8002378 <HAL_UART_TxCpltCallback>
}
 80081d8:	bf00      	nop
 80081da:	3740      	adds	r7, #64	; 0x40
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff fa00 	bl	80075f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008210:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008218:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008224:	2b80      	cmp	r3, #128	; 0x80
 8008226:	d109      	bne.n	800823c <UART_DMAError+0x40>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	2b21      	cmp	r3, #33	; 0x21
 800822c:	d106      	bne.n	800823c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2200      	movs	r2, #0
 8008232:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008236:	6978      	ldr	r0, [r7, #20]
 8008238:	f7ff fede 	bl	8007ff8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008246:	2b40      	cmp	r3, #64	; 0x40
 8008248:	d109      	bne.n	800825e <UART_DMAError+0x62>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b22      	cmp	r3, #34	; 0x22
 800824e:	d106      	bne.n	800825e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2200      	movs	r2, #0
 8008254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008258:	6978      	ldr	r0, [r7, #20]
 800825a:	f7ff ff0e 	bl	800807a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008264:	f043 0210 	orr.w	r2, r3, #16
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800826e:	6978      	ldr	r0, [r7, #20]
 8008270:	f7ff f9ca 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008274:	bf00      	nop
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008288:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff f9b4 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b08f      	sub	sp, #60	; 0x3c
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082b6:	2b21      	cmp	r3, #33	; 0x21
 80082b8:	d14c      	bne.n	8008354 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d132      	bne.n	800832c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082da:	637b      	str	r3, [r7, #52]	; 0x34
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e6      	bne.n	80082c6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	60bb      	str	r3, [r7, #8]
   return(result);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830c:	633b      	str	r3, [r7, #48]	; 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6979      	ldr	r1, [r7, #20]
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	613b      	str	r3, [r7, #16]
   return(result);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e6      	bne.n	80082f8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800832a:	e013      	b.n	8008354 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008330:	781a      	ldrb	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008354:	bf00      	nop
 8008356:	373c      	adds	r7, #60	; 0x3c
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b091      	sub	sp, #68	; 0x44
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800836e:	2b21      	cmp	r3, #33	; 0x21
 8008370:	d151      	bne.n	8008416 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008378:	b29b      	uxth	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d132      	bne.n	80083e4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	623b      	str	r3, [r7, #32]
   return(result);
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008392:	63bb      	str	r3, [r7, #56]	; 0x38
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	461a      	mov	r2, r3
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
 800839e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e6      	bne.n	800837e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	e853 3f00 	ldrex	r3, [r3]
 80083bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ce:	61fb      	str	r3, [r7, #28]
 80083d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	69b9      	ldr	r1, [r7, #24]
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	617b      	str	r3, [r7, #20]
   return(result);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e6      	bne.n	80083b0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80083e2:	e018      	b.n	8008416 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80083ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fe:	1c9a      	adds	r2, r3, #2
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800840a:	b29b      	uxth	r3, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008416:	bf00      	nop
 8008418:	3744      	adds	r7, #68	; 0x44
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008422:	b480      	push	{r7}
 8008424:	b091      	sub	sp, #68	; 0x44
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008430:	2b21      	cmp	r3, #33	; 0x21
 8008432:	d160      	bne.n	80084f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800843a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800843c:	e057      	b.n	80084ee <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d133      	bne.n	80084b2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	623b      	str	r3, [r7, #32]
   return(result);
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008460:	63bb      	str	r3, [r7, #56]	; 0x38
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800846a:	633a      	str	r2, [r7, #48]	; 0x30
 800846c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e5      	bne.n	800844a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	60fb      	str	r3, [r7, #12]
   return(result);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008492:	637b      	str	r3, [r7, #52]	; 0x34
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	61fb      	str	r3, [r7, #28]
 800849e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	69b9      	ldr	r1, [r7, #24]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	617b      	str	r3, [r7, #20]
   return(result);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80084b0:	e021      	b.n	80084f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d013      	beq.n	80084e8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084ea:	3b01      	subs	r3, #1
 80084ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1a4      	bne.n	800843e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80084f4:	e7ff      	b.n	80084f6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80084f6:	bf00      	nop
 80084f8:	3744      	adds	r7, #68	; 0x44
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008502:	b480      	push	{r7}
 8008504:	b091      	sub	sp, #68	; 0x44
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008510:	2b21      	cmp	r3, #33	; 0x21
 8008512:	d165      	bne.n	80085e0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800851a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800851c:	e05c      	b.n	80085d8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008524:	b29b      	uxth	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d133      	bne.n	8008592 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	61fb      	str	r3, [r7, #28]
   return(result);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e5      	bne.n	800852a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	60bb      	str	r3, [r7, #8]
   return(result);
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	6979      	ldr	r1, [r7, #20]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	613b      	str	r3, [r7, #16]
   return(result);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e6      	bne.n	800855e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008590:	e026      	b.n	80085e0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859c:	2b00      	cmp	r3, #0
 800859e:	d018      	beq.n	80085d2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ba:	1c9a      	adds	r2, r3, #2
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80085d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80085d4:	3b01      	subs	r3, #1
 80085d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80085d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d19f      	bne.n	800851e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80085de:	e7ff      	b.n	80085e0 <UART_TxISR_16BIT_FIFOEN+0xde>
 80085e0:	bf00      	nop
 80085e2:	3744      	adds	r7, #68	; 0x44
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	60bb      	str	r3, [r7, #8]
   return(result);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	61bb      	str	r3, [r7, #24]
 8008614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	6979      	ldr	r1, [r7, #20]
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	613b      	str	r3, [r7, #16]
   return(result);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e6      	bne.n	80085f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f7f9 fe9f 	bl	8002378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800863a:	bf00      	nop
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b096      	sub	sp, #88	; 0x58
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008650:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865a:	2b22      	cmp	r3, #34	; 0x22
 800865c:	f040 8095 	bne.w	800878a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800866a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800866e:	b2d9      	uxtb	r1, r3
 8008670:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008674:	b2da      	uxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	400a      	ands	r2, r1
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d178      	bne.n	800879a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086bc:	653b      	str	r3, [r7, #80]	; 0x50
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c6:	647b      	str	r3, [r7, #68]	; 0x44
 80086c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e6      	bne.n	80086a8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f023 0301 	bic.w	r3, r3, #1
 80086f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086fa:	633a      	str	r2, [r7, #48]	; 0x30
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e5      	bne.n	80086da <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d12e      	bne.n	8008782 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	60fb      	str	r3, [r7, #12]
   return(result);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0310 	bic.w	r3, r3, #16
 800873e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	69b9      	ldr	r1, [r7, #24]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	617b      	str	r3, [r7, #20]
   return(result);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b10      	cmp	r3, #16
 8008768:	d103      	bne.n	8008772 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2210      	movs	r2, #16
 8008770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7fe ff4e 	bl	800761c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008780:	e00b      	b.n	800879a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7f9 fdca 	bl	800231c <HAL_UART_RxCpltCallback>
}
 8008788:	e007      	b.n	800879a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	699a      	ldr	r2, [r3, #24]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0208 	orr.w	r2, r2, #8
 8008798:	619a      	str	r2, [r3, #24]
}
 800879a:	bf00      	nop
 800879c:	3758      	adds	r7, #88	; 0x58
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b096      	sub	sp, #88	; 0x58
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ba:	2b22      	cmp	r3, #34	; 0x22
 80087bc:	f040 8095 	bne.w	80088ea <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80087d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80087d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087d8:	4013      	ands	r3, r2
 80087da:	b29a      	uxth	r2, r3
 80087dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e4:	1c9a      	adds	r2, r3, #2
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008802:	b29b      	uxth	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d178      	bne.n	80088fa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800881c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008826:	643b      	str	r3, [r7, #64]	; 0x40
 8008828:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800882c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e6      	bne.n	8008808 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	61fb      	str	r3, [r7, #28]
   return(result);
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	64bb      	str	r3, [r7, #72]	; 0x48
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3308      	adds	r3, #8
 8008858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800885a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e5      	bne.n	800883a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008880:	2b01      	cmp	r3, #1
 8008882:	d12e      	bne.n	80088e2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	60bb      	str	r3, [r7, #8]
   return(result);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f023 0310 	bic.w	r3, r3, #16
 800889e:	647b      	str	r3, [r7, #68]	; 0x44
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6979      	ldr	r1, [r7, #20]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	613b      	str	r3, [r7, #16]
   return(result);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f003 0310 	and.w	r3, r3, #16
 80088c6:	2b10      	cmp	r3, #16
 80088c8:	d103      	bne.n	80088d2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2210      	movs	r2, #16
 80088d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fe fe9e 	bl	800761c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088e0:	e00b      	b.n	80088fa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7f9 fd1a 	bl	800231c <HAL_UART_RxCpltCallback>
}
 80088e8:	e007      	b.n	80088fa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	699a      	ldr	r2, [r3, #24]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f042 0208 	orr.w	r2, r2, #8
 80088f8:	619a      	str	r2, [r3, #24]
}
 80088fa:	bf00      	nop
 80088fc:	3758      	adds	r7, #88	; 0x58
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b0a6      	sub	sp, #152	; 0x98
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008912:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800893a:	2b22      	cmp	r3, #34	; 0x22
 800893c:	f040 814f 	bne.w	8008bde <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008946:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800894a:	e0f6      	b.n	8008b3a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008956:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800895a:	b2d9      	uxtb	r1, r3
 800895c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008960:	b2da      	uxtb	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008966:	400a      	ands	r2, r1
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008992:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d053      	beq.n	8008a46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800899e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d011      	beq.n	80089ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80089aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00b      	beq.n	80089ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2201      	movs	r2, #1
 80089bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089c4:	f043 0201 	orr.w	r2, r3, #1
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d011      	beq.n	80089fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80089da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2202      	movs	r2, #2
 80089ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f4:	f043 0204 	orr.w	r2, r3, #4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d011      	beq.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a24:	f043 0202 	orr.w	r2, r3, #2
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d006      	beq.n	8008a46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7fe fde5 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d173      	bne.n	8008b3a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a76:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e4      	bne.n	8008a52 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008aac:	657a      	str	r2, [r7, #84]	; 0x54
 8008aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ab2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e3      	bne.n	8008a88 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d12e      	bne.n	8008b34 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	f023 0310 	bic.w	r3, r3, #16
 8008af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008afa:	643b      	str	r3, [r7, #64]	; 0x40
 8008afc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d103      	bne.n	8008b24 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7fe fd75 	bl	800761c <HAL_UARTEx_RxEventCallback>
 8008b32:	e002      	b.n	8008b3a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7f9 fbf1 	bl	800231c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008b3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d006      	beq.n	8008b50 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f47f aefe 	bne.w	800894c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008b5a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d045      	beq.n	8008bee <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008b68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d23e      	bcs.n	8008bee <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b86:	673b      	str	r3, [r7, #112]	; 0x70
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e5      	bne.n	8008b70 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a14      	ldr	r2, [pc, #80]	; (8008bf8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008ba8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f043 0320 	orr.w	r3, r3, #32
 8008bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc8:	61bb      	str	r3, [r7, #24]
 8008bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6979      	ldr	r1, [r7, #20]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e6      	bne.n	8008baa <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bdc:	e007      	b.n	8008bee <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	699a      	ldr	r2, [r3, #24]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0208 	orr.w	r2, r2, #8
 8008bec:	619a      	str	r2, [r3, #24]
}
 8008bee:	bf00      	nop
 8008bf0:	3798      	adds	r7, #152	; 0x98
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08008643 	.word	0x08008643

08008bfc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b0a8      	sub	sp, #160	; 0xa0
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c0a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c32:	2b22      	cmp	r3, #34	; 0x22
 8008c34:	f040 8153 	bne.w	8008ede <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c42:	e0fa      	b.n	8008e3a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008c56:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008c5a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008c5e:	4013      	ands	r3, r2
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c6c:	1c9a      	adds	r2, r3, #2
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d053      	beq.n	8008d42 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d011      	beq.n	8008cca <UART_RxISR_16BIT_FIFOEN+0xce>
 8008ca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc0:	f043 0201 	orr.w	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d011      	beq.n	8008cfa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cf0:	f043 0204 	orr.w	r2, r3, #4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d011      	beq.n	8008d2a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2204      	movs	r2, #4
 8008d18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d20:	f043 0202 	orr.w	r2, r3, #2
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d006      	beq.n	8008d42 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe fc67 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d175      	bne.n	8008e3a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d72:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e4      	bne.n	8008d4e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d9a:	f023 0301 	bic.w	r3, r3, #1
 8008d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e1      	bne.n	8008d84 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d12e      	bne.n	8008e34 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dec:	f023 0310 	bic.w	r3, r3, #16
 8008df0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008dfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e6      	bne.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d103      	bne.n	8008e24 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2210      	movs	r2, #16
 8008e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7fe fbf5 	bl	800761c <HAL_UARTEx_RxEventCallback>
 8008e32:	e002      	b.n	8008e3a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7f9 fa71 	bl	800231c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e3a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d006      	beq.n	8008e50 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f47f aefa 	bne.w	8008c44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e56:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e5a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d045      	beq.n	8008eee <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e68:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d23e      	bcs.n	8008eee <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e86:	677b      	str	r3, [r7, #116]	; 0x74
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e90:	633a      	str	r2, [r7, #48]	; 0x30
 8008e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e5      	bne.n	8008e70 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a14      	ldr	r2, [pc, #80]	; (8008ef8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008ea8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f043 0320 	orr.w	r3, r3, #32
 8008ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	69b9      	ldr	r1, [r7, #24]
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008edc:	e007      	b.n	8008eee <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f042 0208 	orr.w	r2, r2, #8
 8008eec:	619a      	str	r2, [r3, #24]
}
 8008eee:	bf00      	nop
 8008ef0:	37a0      	adds	r7, #160	; 0xa0
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	080087a3 	.word	0x080087a3

08008efc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d101      	bne.n	8008f4e <HAL_UARTEx_DisableFifoMode+0x16>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e027      	b.n	8008f9e <HAL_UARTEx_DisableFifoMode+0x66>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2224      	movs	r2, #36	; 0x24
 8008f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 0201 	bic.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d101      	bne.n	8008fc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e02d      	b.n	800901e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2224      	movs	r2, #36	; 0x24
 8008fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0201 	bic.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f850 	bl	80090a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800903a:	2302      	movs	r3, #2
 800903c:	e02d      	b.n	800909a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2224      	movs	r2, #36	; 0x24
 800904a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0201 	bic.w	r2, r2, #1
 8009064:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f812 	bl	80090a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d108      	bne.n	80090c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090c4:	e031      	b.n	800912a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090c6:	2308      	movs	r3, #8
 80090c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090ca:	2308      	movs	r3, #8
 80090cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	0e5b      	lsrs	r3, r3, #25
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	0f5b      	lsrs	r3, r3, #29
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	7b3a      	ldrb	r2, [r7, #12]
 80090f2:	4911      	ldr	r1, [pc, #68]	; (8009138 <UARTEx_SetNbDataToProcess+0x94>)
 80090f4:	5c8a      	ldrb	r2, [r1, r2]
 80090f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090fa:	7b3a      	ldrb	r2, [r7, #12]
 80090fc:	490f      	ldr	r1, [pc, #60]	; (800913c <UARTEx_SetNbDataToProcess+0x98>)
 80090fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009100:	fb93 f3f2 	sdiv	r3, r3, r2
 8009104:	b29a      	uxth	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	7b7a      	ldrb	r2, [r7, #13]
 8009110:	4909      	ldr	r1, [pc, #36]	; (8009138 <UARTEx_SetNbDataToProcess+0x94>)
 8009112:	5c8a      	ldrb	r2, [r1, r2]
 8009114:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009118:	7b7a      	ldrb	r2, [r7, #13]
 800911a:	4908      	ldr	r1, [pc, #32]	; (800913c <UARTEx_SetNbDataToProcess+0x98>)
 800911c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800911e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009122:	b29a      	uxth	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	0800cb40 	.word	0x0800cb40
 800913c:	0800cb48 	.word	0x0800cb48

08009140 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009146:	f3ef 8310 	mrs	r3, PRIMASK
 800914a:	60fb      	str	r3, [r7, #12]
  return(result);
 800914c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800914e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009150:	b672      	cpsid	i
}
 8009152:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009154:	1cbb      	adds	r3, r7, #2
 8009156:	4619      	mov	r1, r3
 8009158:	4812      	ldr	r0, [pc, #72]	; (80091a4 <DbgTrace_TxCpltCallback+0x64>)
 800915a:	f000 fe0e 	bl	8009d7a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800915e:	1cbb      	adds	r3, r7, #2
 8009160:	4619      	mov	r1, r3
 8009162:	4810      	ldr	r0, [pc, #64]	; (80091a4 <DbgTrace_TxCpltCallback+0x64>)
 8009164:	f000 fefa 	bl	8009f5c <CircularQueue_Sense>
 8009168:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00c      	beq.n	800918a <DbgTrace_TxCpltCallback+0x4a>
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f383 8810 	msr	PRIMASK, r3
}
 800917a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800917c:	887b      	ldrh	r3, [r7, #2]
 800917e:	4a0a      	ldr	r2, [pc, #40]	; (80091a8 <DbgTrace_TxCpltCallback+0x68>)
 8009180:	4619      	mov	r1, r3
 8009182:	6938      	ldr	r0, [r7, #16]
 8009184:	f7f7 fbc0 	bl	8000908 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009188:	e008      	b.n	800919c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <DbgTrace_TxCpltCallback+0x6c>)
 800918c:	2201      	movs	r2, #1
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f383 8810 	msr	PRIMASK, r3
}
 800919a:	bf00      	nop
}
 800919c:	bf00      	nop
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	20004340 	.word	0x20004340
 80091a8:	08009141 	.word	0x08009141
 80091ac:	2000004c 	.word	0x2000004c

080091b0 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80091b6:	f7f7 fba1 	bl	80008fc <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80091ba:	2302      	movs	r3, #2
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	2300      	movs	r3, #0
 80091c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80091c4:	4903      	ldr	r1, [pc, #12]	; (80091d4 <DbgTraceInit+0x24>)
 80091c6:	4804      	ldr	r0, [pc, #16]	; (80091d8 <DbgTraceInit+0x28>)
 80091c8:	f000 fb7e 	bl	80098c8 <CircularQueue_Init>
#endif 
#endif
  return;
 80091cc:	bf00      	nop
}
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20004360 	.word	0x20004360
 80091d8:	20004340 	.word	0x20004340

080091dc <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f805 	bl	80091fc <DbgTraceWrite>
 80091f2:	4603      	mov	r3, r0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08a      	sub	sp, #40	; 0x28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800920c:	f3ef 8310 	mrs	r3, PRIMASK
 8009210:	61bb      	str	r3, [r7, #24]
  return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009214:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d102      	bne.n	8009224 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800921e:	2300      	movs	r3, #0
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
 8009222:	e037      	b.n	8009294 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d006      	beq.n	8009238 <DbgTraceWrite+0x3c>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d003      	beq.n	8009238 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009230:	f04f 33ff 	mov.w	r3, #4294967295
 8009234:	627b      	str	r3, [r7, #36]	; 0x24
 8009236:	e02d      	b.n	8009294 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d02a      	beq.n	8009294 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009242:	b672      	cpsid	i
}
 8009244:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	b29a      	uxth	r2, r3
 800924a:	2301      	movs	r3, #1
 800924c:	68b9      	ldr	r1, [r7, #8]
 800924e:	4814      	ldr	r0, [pc, #80]	; (80092a0 <DbgTraceWrite+0xa4>)
 8009250:	f000 fb6c 	bl	800992c <CircularQueue_Add>
 8009254:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d015      	beq.n	8009288 <DbgTraceWrite+0x8c>
 800925c:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <DbgTraceWrite+0xa8>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d010      	beq.n	8009288 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <DbgTraceWrite+0xa8>)
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	b29b      	uxth	r3, r3
 800927c:	4a0a      	ldr	r2, [pc, #40]	; (80092a8 <DbgTraceWrite+0xac>)
 800927e:	4619      	mov	r1, r3
 8009280:	69f8      	ldr	r0, [r7, #28]
 8009282:	f7f7 fb41 	bl	8000908 <DbgOutputTraces>
 8009286:	e005      	b.n	8009294 <DbgTraceWrite+0x98>
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009296:	4618      	mov	r0, r3
 8009298:	3728      	adds	r7, #40	; 0x28
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20004340 	.word	0x20004340
 80092a4:	2000004c 	.word	0x2000004c
 80092a8:	08009141 	.word	0x08009141

080092ac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80092b6:	4b0f      	ldr	r3, [pc, #60]	; (80092f4 <OTP_Read+0x48>)
 80092b8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80092ba:	e002      	b.n	80092c2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3b08      	subs	r3, #8
 80092c0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3307      	adds	r3, #7
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	79fa      	ldrb	r2, [r7, #7]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d003      	beq.n	80092d6 <OTP_Read+0x2a>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4a09      	ldr	r2, [pc, #36]	; (80092f8 <OTP_Read+0x4c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d1f2      	bne.n	80092bc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3307      	adds	r3, #7
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	79fa      	ldrb	r2, [r7, #7]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d001      	beq.n	80092e6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80092e6:	68fb      	ldr	r3, [r7, #12]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	1fff73f8 	.word	0x1fff73f8
 80092f8:	1fff7000 	.word	0x1fff7000

080092fc <SHCI_C2_LLDTESTS_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_LLDTESTS_Init( uint8_t param_size, uint8_t * p_param )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009308:	f107 030c 	add.w	r3, r7, #12
 800930c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_LLD_TESTS_INIT,
 800930e:	79f9      	ldrb	r1, [r7, #7]
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	f64f 4071 	movw	r0, #64625	; 0xfc71
 8009318:	f000 f94e 	bl	80095b8 <shci_send>
             param_size,
             p_param,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	330b      	adds	r3, #11
 8009320:	78db      	ldrb	r3, [r3, #3]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <SHCI_C2_ExtpaConfig>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ExtpaConfig(uint32_t gpio_port, uint16_t gpio_pin_number, uint8_t gpio_polarity, uint8_t gpio_status)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b088      	sub	sp, #32
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	4608      	mov	r0, r1
 8009334:	4611      	mov	r1, r2
 8009336:	461a      	mov	r2, r3
 8009338:	4603      	mov	r3, r0
 800933a:	807b      	strh	r3, [r7, #2]
 800933c:	460b      	mov	r3, r1
 800933e:	707b      	strb	r3, [r7, #1]
 8009340:	4613      	mov	r3, r2
 8009342:	703b      	strb	r3, [r7, #0]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009344:	f107 030c 	add.w	r3, r7, #12
 8009348:	61fb      	str	r3, [r7, #28]

  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_port = gpio_port;
 800934a:	f107 030c 	add.w	r3, r7, #12
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_pin_number = gpio_pin_number;
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	887a      	ldrh	r2, [r7, #2]
 8009358:	809a      	strh	r2, [r3, #4]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_polarity = gpio_polarity;
 800935a:	f107 030c 	add.w	r3, r7, #12
 800935e:	787a      	ldrb	r2, [r7, #1]
 8009360:	719a      	strb	r2, [r3, #6]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_status = gpio_status;
 8009362:	f107 030c 	add.w	r3, r7, #12
 8009366:	783a      	ldrb	r2, [r7, #0]
 8009368:	71da      	strb	r2, [r3, #7]

  shci_send( SHCI_OPCODE_C2_EXTPA_CONFIG,
 800936a:	f107 020c 	add.w	r2, r7, #12
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2108      	movs	r1, #8
 8009372:	f64f 4072 	movw	r0, #64626	; 0xfc72
 8009376:	f000 f91f 	bl	80095b8 <shci_send>
             8,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	330b      	adds	r3, #11
 800937e:	78db      	ldrb	r3, [r3, #3]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009388:	b480      	push	{r7}
 800938a:	b08b      	sub	sp, #44	; 0x2c
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800939c:	2300      	movs	r3, #0
 800939e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80093b0:	4b4a      	ldr	r3, [pc, #296]	; (80094dc <SHCI_GetWirelessFwInfo+0x154>)
 80093b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80093b8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80093c2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a44      	ldr	r2, [pc, #272]	; (80094e0 <SHCI_GetWirelessFwInfo+0x158>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d10f      	bne.n	80093f4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	e01a      	b.n	800942a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80093fc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009400:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	0e1b      	lsrs	r3, r3, #24
 800942e:	b2da      	uxtb	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	0c1b      	lsrs	r3, r3, #16
 8009438:	b2da      	uxtb	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	0a1b      	lsrs	r3, r3, #8
 8009442:	b2da      	uxtb	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	091b      	lsrs	r3, r3, #4
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	b2da      	uxtb	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	b2da      	uxtb	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	0e1b      	lsrs	r3, r3, #24
 800946a:	b2da      	uxtb	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	0c1b      	lsrs	r3, r3, #16
 8009474:	b2da      	uxtb	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	b2da      	uxtb	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	b2da      	uxtb	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	0e1b      	lsrs	r3, r3, #24
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	0e1b      	lsrs	r3, r3, #24
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	372c      	adds	r7, #44	; 0x2c
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	58004000 	.word	0x58004000
 80094e0:	a94656b9 	.word	0xa94656b9

080094e4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	4a08      	ldr	r2, [pc, #32]	; (8009514 <shci_init+0x30>)
 80094f4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80094f6:	4a08      	ldr	r2, [pc, #32]	; (8009518 <shci_init+0x34>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80094fc:	4806      	ldr	r0, [pc, #24]	; (8009518 <shci_init+0x34>)
 80094fe:	f000 f911 	bl	8009724 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f894 	bl	8009634 <TlInit>

  return;
 800950c:	bf00      	nop
}
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20005380 	.word	0x20005380
 8009518:	20005360 	.word	0x20005360

0800951c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009522:	4822      	ldr	r0, [pc, #136]	; (80095ac <shci_user_evt_proc+0x90>)
 8009524:	f000 f922 	bl	800976c <LST_is_empty>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d12b      	bne.n	8009586 <shci_user_evt_proc+0x6a>
 800952e:	4b20      	ldr	r3, [pc, #128]	; (80095b0 <shci_user_evt_proc+0x94>)
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d027      	beq.n	8009586 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009536:	f107 030c 	add.w	r3, r7, #12
 800953a:	4619      	mov	r1, r3
 800953c:	481b      	ldr	r0, [pc, #108]	; (80095ac <shci_user_evt_proc+0x90>)
 800953e:	f000 f9a4 	bl	800988a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009542:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <shci_user_evt_proc+0x98>)
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800954e:	2301      	movs	r3, #1
 8009550:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009552:	4b18      	ldr	r3, [pc, #96]	; (80095b4 <shci_user_evt_proc+0x98>)
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	1d3a      	adds	r2, r7, #4
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800955c:	793a      	ldrb	r2, [r7, #4]
 800955e:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <shci_user_evt_proc+0x94>)
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e002      	b.n	800956a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009564:	4b12      	ldr	r3, [pc, #72]	; (80095b0 <shci_user_evt_proc+0x94>)
 8009566:	2201      	movs	r2, #1
 8009568:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <shci_user_evt_proc+0x94>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4618      	mov	r0, r3
 8009576:	f000 ff27 	bl	800a3c8 <TL_MM_EvtDone>
 800957a:	e004      	b.n	8009586 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4619      	mov	r1, r3
 8009580:	480a      	ldr	r0, [pc, #40]	; (80095ac <shci_user_evt_proc+0x90>)
 8009582:	f000 f915 	bl	80097b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009586:	4809      	ldr	r0, [pc, #36]	; (80095ac <shci_user_evt_proc+0x90>)
 8009588:	f000 f8f0 	bl	800976c <LST_is_empty>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <shci_user_evt_proc+0x86>
 8009592:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <shci_user_evt_proc+0x94>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800959a:	4804      	ldr	r0, [pc, #16]	; (80095ac <shci_user_evt_proc+0x90>)
 800959c:	f7f7 f977 	bl	800088e <shci_notify_asynch_evt>
  }


  return;
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
}
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	200000c0 	.word	0x200000c0
 80095b0:	200000d0 	.word	0x200000d0
 80095b4:	20005360 	.word	0x20005360

080095b8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60ba      	str	r2, [r7, #8]
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	4603      	mov	r3, r0
 80095c4:	81fb      	strh	r3, [r7, #14]
 80095c6:	460b      	mov	r3, r1
 80095c8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80095ca:	2000      	movs	r0, #0
 80095cc:	f000 f864 	bl	8009698 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80095d0:	4b16      	ldr	r3, [pc, #88]	; (800962c <shci_send+0x74>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	89fa      	ldrh	r2, [r7, #14]
 80095d6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80095da:	4b14      	ldr	r3, [pc, #80]	; (800962c <shci_send+0x74>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	7b7a      	ldrb	r2, [r7, #13]
 80095e0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <shci_send+0x74>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	330c      	adds	r3, #12
 80095e8:	7b7a      	ldrb	r2, [r7, #13]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fa69 	bl	800aac4 <memcpy>

  shciContext.io.Send(0,0);
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <shci_send+0x78>)
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	2100      	movs	r1, #0
 80095f8:	2000      	movs	r0, #0
 80095fa:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80095fc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009600:	f7f7 f95c 	bl	80008bc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f103 0008 	add.w	r0, r3, #8
 800960a:	4b08      	ldr	r3, [pc, #32]	; (800962c <shci_send+0x74>)
 800960c:	6819      	ldr	r1, [r3, #0]
 800960e:	4b07      	ldr	r3, [pc, #28]	; (800962c <shci_send+0x74>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	789b      	ldrb	r3, [r3, #2]
 8009614:	3303      	adds	r3, #3
 8009616:	461a      	mov	r2, r3
 8009618:	f001 fa54 	bl	800aac4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800961c:	2001      	movs	r0, #1
 800961e:	f000 f83b 	bl	8009698 <Cmd_SetStatus>

  return;
 8009622:	bf00      	nop
}
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	200000cc 	.word	0x200000cc
 8009630:	20005360 	.word	0x20005360

08009634 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800963c:	4a10      	ldr	r2, [pc, #64]	; (8009680 <TlInit+0x4c>)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009642:	4810      	ldr	r0, [pc, #64]	; (8009684 <TlInit+0x50>)
 8009644:	f000 f882 	bl	800974c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009648:	2001      	movs	r0, #1
 800964a:	f000 f825 	bl	8009698 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800964e:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <TlInit+0x54>)
 8009650:	2201      	movs	r2, #1
 8009652:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009654:	4b0d      	ldr	r3, [pc, #52]	; (800968c <TlInit+0x58>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00c      	beq.n	8009676 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009660:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <TlInit+0x5c>)
 8009662:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009664:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <TlInit+0x60>)
 8009666:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009668:	4b08      	ldr	r3, [pc, #32]	; (800968c <TlInit+0x58>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f107 020c 	add.w	r2, r7, #12
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
  }

  return;
 8009674:	bf00      	nop
 8009676:	bf00      	nop
}
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	200000cc 	.word	0x200000cc
 8009684:	200000c0 	.word	0x200000c0
 8009688:	200000d0 	.word	0x200000d0
 800968c:	20005360 	.word	0x20005360
 8009690:	080096e9 	.word	0x080096e9
 8009694:	08009701 	.word	0x08009701

08009698 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10b      	bne.n	80096c0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <Cmd_SetStatus+0x48>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80096b0:	4b0b      	ldr	r3, [pc, #44]	; (80096e0 <Cmd_SetStatus+0x48>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2000      	movs	r0, #0
 80096b6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <Cmd_SetStatus+0x4c>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80096be:	e00b      	b.n	80096d8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80096c0:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <Cmd_SetStatus+0x4c>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <Cmd_SetStatus+0x48>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80096ce:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <Cmd_SetStatus+0x48>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2001      	movs	r0, #1
 80096d4:	4798      	blx	r3
  return;
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
}
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20005380 	.word	0x20005380
 80096e4:	200000c8 	.word	0x200000c8

080096e8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80096f0:	2000      	movs	r0, #0
 80096f2:	f7f7 f8d8 	bl	80008a6 <shci_cmd_resp_release>

  return;
 80096f6:	bf00      	nop
}
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	4805      	ldr	r0, [pc, #20]	; (8009720 <TlUserEvtReceived+0x20>)
 800970c:	f000 f876 	bl	80097fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009710:	4803      	ldr	r0, [pc, #12]	; (8009720 <TlUserEvtReceived+0x20>)
 8009712:	f7f7 f8bc 	bl	800088e <shci_notify_asynch_evt>

  return;
 8009716:	bf00      	nop
}
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	200000c0 	.word	0x200000c0

08009724 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a05      	ldr	r2, [pc, #20]	; (8009744 <shci_register_io_bus+0x20>)
 8009730:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a04      	ldr	r2, [pc, #16]	; (8009748 <shci_register_io_bus+0x24>)
 8009736:	611a      	str	r2, [r3, #16]

  return;
 8009738:	bf00      	nop
}
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr
 8009744:	0800a1c1 	.word	0x0800a1c1
 8009748:	0800a215 	.word	0x0800a215

0800974c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	605a      	str	r2, [r3, #4]
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009774:	f3ef 8310 	mrs	r3, PRIMASK
 8009778:	60fb      	str	r3, [r7, #12]
  return(result);
 800977a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800977c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800977e:	b672      	cpsid	i
}
 8009780:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	429a      	cmp	r2, r3
 800978a:	d102      	bne.n	8009792 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800978c:	2301      	movs	r3, #1
 800978e:	75fb      	strb	r3, [r7, #23]
 8009790:	e001      	b.n	8009796 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f383 8810 	msr	PRIMASK, r3
}
 80097a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ba:	f3ef 8310 	mrs	r3, PRIMASK
 80097be:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097c4:	b672      	cpsid	i
}
 80097c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	683a      	ldr	r2, [r7, #0]
 80097da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	605a      	str	r2, [r3, #4]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f383 8810 	msr	PRIMASK, r3
}
 80097ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80097f0:	bf00      	nop
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009806:	f3ef 8310 	mrs	r3, PRIMASK
 800980a:	60fb      	str	r3, [r7, #12]
  return(result);
 800980c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800980e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009810:	b672      	cpsid	i
}
 8009812:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f383 8810 	msr	PRIMASK, r3
}
 800983a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800983c:	bf00      	nop
 800983e:	371c      	adds	r7, #28
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009850:	f3ef 8310 	mrs	r3, PRIMASK
 8009854:	60fb      	str	r3, [r7, #12]
  return(result);
 8009856:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800985a:	b672      	cpsid	i
}
 800985c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6812      	ldr	r2, [r2, #0]
 8009866:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6852      	ldr	r2, [r2, #4]
 8009870:	605a      	str	r2, [r3, #4]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f383 8810 	msr	PRIMASK, r3
}
 800987c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800987e:	bf00      	nop
 8009880:	371c      	adds	r7, #28
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b086      	sub	sp, #24
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009894:	f3ef 8310 	mrs	r3, PRIMASK
 8009898:	60fb      	str	r3, [r7, #12]
  return(result);
 800989a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800989c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800989e:	b672      	cpsid	i
}
 80098a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff ffca 	bl	8009848 <LST_remove_node>
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f383 8810 	msr	PRIMASK, r3
}
 80098be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098c0:	bf00      	nop
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	887a      	ldrh	r2, [r7, #2]
 80098fe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	7e3a      	ldrb	r2, [r7, #24]
 8009904:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009906:	7e3b      	ldrb	r3, [r7, #24]
 8009908:	f003 0302 	and.w	r3, r3, #2
 800990c:	2b00      	cmp	r3, #0
 800990e:	d006      	beq.n	800991e <CircularQueue_Init+0x56>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	891b      	ldrh	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009918:	f04f 33ff 	mov.w	r3, #4294967295
 800991c:	e000      	b.n	8009920 <CircularQueue_Init+0x58>
  }
  return 0;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08e      	sub	sp, #56	; 0x38
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	4613      	mov	r3, r2
 800993a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800993c:	2300      	movs	r3, #0
 800993e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009940:	2300      	movs	r3, #0
 8009942:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009948:	2300      	movs	r3, #0
 800994a:	62bb      	str	r3, [r7, #40]	; 0x28
 800994c:	2300      	movs	r3, #0
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009950:	2300      	movs	r3, #0
 8009952:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009954:	2300      	movs	r3, #0
 8009956:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	891b      	ldrh	r3, [r3, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <CircularQueue_Add+0x38>
 8009960:	2302      	movs	r3, #2
 8009962:	e000      	b.n	8009966 <CircularQueue_Add+0x3a>
 8009964:	2300      	movs	r3, #0
 8009966:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d02a      	beq.n	80099c6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	891b      	ldrh	r3, [r3, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d123      	bne.n	80099c0 <CircularQueue_Add+0x94>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	4413      	add	r3, r2
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6819      	ldr	r1, [r3, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	1c58      	adds	r0, r3, #1
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	4298      	cmp	r0, r3
 8009996:	d306      	bcc.n	80099a6 <CircularQueue_Add+0x7a>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6918      	ldr	r0, [r3, #16]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	1ac3      	subs	r3, r0, r3
 80099a2:	3301      	adds	r3, #1
 80099a4:	e002      	b.n	80099ac <CircularQueue_Add+0x80>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	3301      	adds	r3, #1
 80099ac:	440b      	add	r3, r1
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	021b      	lsls	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	4413      	add	r3, r2
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	3302      	adds	r3, #2
 80099bc:	b29b      	uxth	r3, r3
 80099be:	e001      	b.n	80099c4 <CircularQueue_Add+0x98>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	891b      	ldrh	r3, [r3, #8]
 80099c4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	891b      	ldrh	r3, [r3, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	891b      	ldrh	r3, [r3, #8]
 80099d2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	691a      	ldr	r2, [r3, #16]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d307      	bcc.n	80099f0 <CircularQueue_Add+0xc4>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6919      	ldr	r1, [r3, #16]
 80099e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099ea:	440b      	add	r3, r1
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	e000      	b.n	80099f2 <CircularQueue_Add+0xc6>
 80099f0:	2300      	movs	r3, #0
 80099f2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80099f4:	88fa      	ldrh	r2, [r7, #6]
 80099f6:	7ffb      	ldrb	r3, [r7, #31]
 80099f8:	4413      	add	r3, r2
 80099fa:	461a      	mov	r2, r3
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	fb02 f303 	mul.w	r3, r2, r3
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d80b      	bhi.n	8009a20 <CircularQueue_Add+0xf4>
 8009a08:	88fa      	ldrh	r2, [r7, #6]
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	461a      	mov	r2, r3
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a16:	fb01 f202 	mul.w	r2, r1, r2
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	e000      	b.n	8009a22 <CircularQueue_Add+0xf6>
 8009a20:	2300      	movs	r3, #0
 8009a22:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009a24:	7dfa      	ldrb	r2, [r7, #23]
 8009a26:	7ffb      	ldrb	r3, [r7, #31]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	bf8c      	ite	hi
 8009a2c:	2301      	movhi	r3, #1
 8009a2e:	2300      	movls	r3, #0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009a34:	7fbb      	ldrb	r3, [r7, #30]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d008      	beq.n	8009a4c <CircularQueue_Add+0x120>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	7f1b      	ldrb	r3, [r3, #28]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d002      	beq.n	8009a4c <CircularQueue_Add+0x120>
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	e000      	b.n	8009a4e <CircularQueue_Add+0x122>
 8009a4c:	8bbb      	ldrh	r3, [r7, #28]
 8009a4e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009a50:	7fbb      	ldrb	r3, [r7, #30]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d008      	beq.n	8009a68 <CircularQueue_Add+0x13c>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	7f1b      	ldrb	r3, [r3, #28]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <CircularQueue_Add+0x13c>
 8009a62:	7ffb      	ldrb	r3, [r7, #31]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	e000      	b.n	8009a6a <CircularQueue_Add+0x13e>
 8009a68:	8bbb      	ldrh	r3, [r7, #28]
 8009a6a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009a6c:	88fb      	ldrh	r3, [r7, #6]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 817e 	beq.w	8009d70 <CircularQueue_Add+0x444>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	695a      	ldr	r2, [r3, #20]
 8009a78:	88f9      	ldrh	r1, [r7, #6]
 8009a7a:	7ffb      	ldrb	r3, [r7, #31]
 8009a7c:	440b      	add	r3, r1
 8009a7e:	4619      	mov	r1, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	441a      	add	r2, r3
 8009a88:	8bbb      	ldrh	r3, [r7, #28]
 8009a8a:	441a      	add	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	f200 816d 	bhi.w	8009d70 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009a96:	2300      	movs	r3, #0
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a9a:	e14a      	b.n	8009d32 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009aa2:	441a      	add	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d307      	bcc.n	8009abc <CircularQueue_Add+0x190>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	691a      	ldr	r2, [r3, #16]
 8009ab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ab2:	441a      	add	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	e003      	b.n	8009ac4 <CircularQueue_Add+0x198>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	691a      	ldr	r2, [r3, #16]
 8009ac0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ac2:	4413      	add	r3, r2
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	891b      	ldrh	r3, [r3, #8]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d130      	bne.n	8009b38 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	1c59      	adds	r1, r3, #1
 8009ade:	6339      	str	r1, [r7, #48]	; 0x30
 8009ae0:	4413      	add	r3, r2
 8009ae2:	88fa      	ldrh	r2, [r7, #6]
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d304      	bcc.n	8009afc <CircularQueue_Add+0x1d0>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	e000      	b.n	8009afe <CircularQueue_Add+0x1d2>
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	b298      	uxth	r0, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	1c59      	adds	r1, r3, #1
 8009b0e:	6339      	str	r1, [r7, #48]	; 0x30
 8009b10:	4413      	add	r3, r2
 8009b12:	b2c2      	uxtb	r2, r0
 8009b14:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d304      	bcc.n	8009b2a <CircularQueue_Add+0x1fe>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	e000      	b.n	8009b2c <CircularQueue_Add+0x200>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	1c9a      	adds	r2, r3, #2
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009b38:	88fa      	ldrh	r2, [r7, #6]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6859      	ldr	r1, [r3, #4]
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	1acb      	subs	r3, r1, r3
 8009b42:	4293      	cmp	r3, r2
 8009b44:	bf28      	it	cs
 8009b46:	4613      	movcs	r3, r2
 8009b48:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d007      	beq.n	8009b62 <CircularQueue_Add+0x236>
 8009b52:	88fb      	ldrh	r3, [r7, #6]
 8009b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d225      	bcs.n	8009ba6 <CircularQueue_Add+0x27a>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	7f1b      	ldrb	r3, [r3, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d121      	bne.n	8009ba6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	18d0      	adds	r0, r2, r3
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	4413      	add	r3, r2
 8009b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f000 ffa3 	bl	800aac4 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	695a      	ldr	r2, [r3, #20]
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	441a      	add	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009b92:	88fa      	ldrh	r2, [r7, #6]
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009b9a:	7ffb      	ldrb	r3, [r7, #31]
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009ba4:	e0a4      	b.n	8009cf0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80a1 	beq.w	8009cf0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	7f1b      	ldrb	r3, [r3, #28]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d03a      	beq.n	8009c30 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	891b      	ldrh	r3, [r3, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10d      	bne.n	8009bde <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	3b02      	subs	r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	4413      	add	r3, r2
 8009bda:	22ff      	movs	r2, #255	; 0xff
 8009bdc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	695a      	ldr	r2, [r3, #20]
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	441a      	add	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009bee:	88fb      	ldrh	r3, [r7, #6]
 8009bf0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	891b      	ldrh	r3, [r3, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d16f      	bne.n	8009cde <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	1c59      	adds	r1, r3, #1
 8009c06:	6339      	str	r1, [r7, #48]	; 0x30
 8009c08:	4413      	add	r3, r2
 8009c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c0c:	b2d2      	uxtb	r2, r2
 8009c0e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c12:	0a18      	lsrs	r0, r3, #8
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	1c59      	adds	r1, r3, #1
 8009c1c:	6339      	str	r1, [r7, #48]	; 0x30
 8009c1e:	4413      	add	r3, r2
 8009c20:	b2c2      	uxtb	r2, r0
 8009c22:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	1c9a      	adds	r2, r3, #2
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	615a      	str	r2, [r3, #20]
 8009c2e:	e056      	b.n	8009cde <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	7f1b      	ldrb	r3, [r3, #28]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d050      	beq.n	8009cde <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	891b      	ldrh	r3, [r3, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d14a      	bne.n	8009cda <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	3b02      	subs	r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c56:	0a19      	lsrs	r1, r3, #8
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	4413      	add	r3, r2
 8009c62:	b2ca      	uxtb	r2, r1
 8009c64:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	18d0      	adds	r0, r2, r3
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c72:	fb02 f303 	mul.w	r3, r2, r3
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	4413      	add	r3, r2
 8009c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	f000 ff21 	bl	800aac4 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	695a      	ldr	r2, [r3, #20]
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	441a      	add	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009c92:	88fa      	ldrh	r2, [r7, #6]
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	1c59      	adds	r1, r3, #1
 8009cb0:	6339      	str	r1, [r7, #48]	; 0x30
 8009cb2:	4413      	add	r3, r2
 8009cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	0a18      	lsrs	r0, r3, #8
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	6339      	str	r1, [r7, #48]	; 0x30
 8009cc8:	4413      	add	r3, r2
 8009cca:	b2c2      	uxtb	r2, r0
 8009ccc:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	1c9a      	adds	r2, r3, #2
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	615a      	str	r2, [r3, #20]
 8009cd8:	e001      	b.n	8009cde <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e049      	b.n	8009d72 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	4413      	add	r3, r2
 8009ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	18d0      	adds	r0, r2, r3
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d02:	fb03 f202 	mul.w	r2, r3, r2
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	4413      	add	r3, r2
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d10:	4619      	mov	r1, r3
 8009d12:	f000 fed7 	bl	800aac4 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1c:	441a      	add	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2e:	3301      	adds	r3, #1
 8009d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	f4ff aeb0 	bcc.w	8009a9c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6919      	ldr	r1, [r3, #16]
 8009d44:	7ffb      	ldrb	r3, [r7, #31]
 8009d46:	4419      	add	r1, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	d307      	bcc.n	8009d60 <CircularQueue_Add+0x434>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6919      	ldr	r1, [r3, #16]
 8009d54:	7ffb      	ldrb	r3, [r7, #31]
 8009d56:	4419      	add	r1, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	1acb      	subs	r3, r1, r3
 8009d5e:	e003      	b.n	8009d68 <CircularQueue_Add+0x43c>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6919      	ldr	r1, [r3, #16]
 8009d64:	7ffb      	ldrb	r3, [r7, #31]
 8009d66:	440b      	add	r3, r1
 8009d68:	4413      	add	r3, r2
 8009d6a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	e000      	b.n	8009d72 <CircularQueue_Add+0x446>
    return NULL;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3738      	adds	r7, #56	; 0x38
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	891b      	ldrh	r3, [r3, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <CircularQueue_Remove+0x1e>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e000      	b.n	8009d9a <CircularQueue_Remove+0x20>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 80cc 	beq.w	8009f42 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	891b      	ldrh	r3, [r3, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d121      	bne.n	8009df6 <CircularQueue_Remove+0x7c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	1c58      	adds	r0, r3, #1
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	4298      	cmp	r0, r3
 8009dd0:	d306      	bcc.n	8009de0 <CircularQueue_Remove+0x66>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68d8      	ldr	r0, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	1ac3      	subs	r3, r0, r3
 8009ddc:	3301      	adds	r3, #1
 8009dde:	e002      	b.n	8009de6 <CircularQueue_Remove+0x6c>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	440b      	add	r3, r1
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4413      	add	r3, r2
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	e001      	b.n	8009dfa <CircularQueue_Remove+0x80>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	891b      	ldrh	r3, [r3, #8]
 8009dfa:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	7f1b      	ldrb	r3, [r3, #28]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d057      	beq.n	8009eb8 <CircularQueue_Remove+0x13e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	7f1b      	ldrb	r3, [r3, #28]
 8009e0c:	f003 0302 	and.w	r3, r3, #2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d151      	bne.n	8009eb8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009e14:	897b      	ldrh	r3, [r7, #10]
 8009e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d103      	bne.n	8009e26 <CircularQueue_Remove+0xac>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	891b      	ldrh	r3, [r3, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d012      	beq.n	8009e4c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d942      	bls.n	8009eb8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	891b      	ldrh	r3, [r3, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d03e      	beq.n	8009eb8 <CircularQueue_Remove+0x13e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	8912      	ldrh	r2, [r2, #8]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d235      	bcs.n	8009eb8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	695a      	ldr	r2, [r3, #20]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68d9      	ldr	r1, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	1acb      	subs	r3, r1, r3
 8009e5a:	441a      	add	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	891b      	ldrh	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d121      	bne.n	8009eb2 <CircularQueue_Remove+0x138>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	4413      	add	r3, r2
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6819      	ldr	r1, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	1c58      	adds	r0, r3, #1
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	4298      	cmp	r0, r3
 8009e8c:	d306      	bcc.n	8009e9c <CircularQueue_Remove+0x122>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68d8      	ldr	r0, [r3, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	1ac3      	subs	r3, r0, r3
 8009e98:	3301      	adds	r3, #1
 8009e9a:	e002      	b.n	8009ea2 <CircularQueue_Remove+0x128>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	440b      	add	r3, r1
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	021b      	lsls	r3, r3, #8
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	4413      	add	r3, r2
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	e001      	b.n	8009eb6 <CircularQueue_Remove+0x13c>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	891b      	ldrh	r3, [r3, #8]
 8009eb6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68d9      	ldr	r1, [r3, #12]
 8009ec0:	7a7b      	ldrb	r3, [r7, #9]
 8009ec2:	4419      	add	r1, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	d307      	bcc.n	8009edc <CircularQueue_Remove+0x162>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68d9      	ldr	r1, [r3, #12]
 8009ed0:	7a7b      	ldrb	r3, [r7, #9]
 8009ed2:	4419      	add	r1, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	1acb      	subs	r3, r1, r3
 8009eda:	e003      	b.n	8009ee4 <CircularQueue_Remove+0x16a>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68d9      	ldr	r1, [r3, #12]
 8009ee0:	7a7b      	ldrb	r3, [r7, #9]
 8009ee2:	440b      	add	r3, r1
 8009ee4:	4413      	add	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	8979      	ldrh	r1, [r7, #10]
 8009eee:	7a7a      	ldrb	r2, [r7, #9]
 8009ef0:	440a      	add	r2, r1
 8009ef2:	1a9a      	subs	r2, r3, r2
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01b      	beq.n	8009f38 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	897b      	ldrh	r3, [r7, #10]
 8009f06:	441a      	add	r2, r3
 8009f08:	7a7b      	ldrb	r3, [r7, #9]
 8009f0a:	441a      	add	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d309      	bcc.n	8009f28 <CircularQueue_Remove+0x1ae>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68da      	ldr	r2, [r3, #12]
 8009f18:	897b      	ldrh	r3, [r7, #10]
 8009f1a:	441a      	add	r2, r3
 8009f1c:	7a7b      	ldrb	r3, [r7, #9]
 8009f1e:	441a      	add	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	e005      	b.n	8009f34 <CircularQueue_Remove+0x1ba>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	897b      	ldrh	r3, [r7, #10]
 8009f2e:	441a      	add	r2, r3
 8009f30:	7a7b      	ldrb	r3, [r7, #9]
 8009f32:	4413      	add	r3, r2
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	1e5a      	subs	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	897a      	ldrh	r2, [r7, #10]
 8009f4c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	891b      	ldrh	r3, [r3, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <CircularQueue_Sense+0x1e>
 8009f76:	2302      	movs	r3, #2
 8009f78:	e000      	b.n	8009f7c <CircularQueue_Sense+0x20>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8090 	beq.w	800a0b0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	891b      	ldrh	r3, [r3, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d121      	bne.n	8009fe2 <CircularQueue_Sense+0x86>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6819      	ldr	r1, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	1c58      	adds	r0, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4298      	cmp	r0, r3
 8009fbc:	d306      	bcc.n	8009fcc <CircularQueue_Sense+0x70>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68d8      	ldr	r0, [r3, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	1ac3      	subs	r3, r0, r3
 8009fc8:	3301      	adds	r3, #1
 8009fca:	e002      	b.n	8009fd2 <CircularQueue_Sense+0x76>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	440b      	add	r3, r1
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4413      	add	r3, r2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	e001      	b.n	8009fe6 <CircularQueue_Sense+0x8a>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	891b      	ldrh	r3, [r3, #8]
 8009fe6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	7f1b      	ldrb	r3, [r3, #28]
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d048      	beq.n	800a086 <CircularQueue_Sense+0x12a>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7f1b      	ldrb	r3, [r3, #28]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d142      	bne.n	800a086 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a000:	8a7b      	ldrh	r3, [r7, #18]
 800a002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a006:	4293      	cmp	r3, r2
 800a008:	d103      	bne.n	800a012 <CircularQueue_Sense+0xb6>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	891b      	ldrh	r3, [r3, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d012      	beq.n	800a038 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d933      	bls.n	800a086 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	891b      	ldrh	r3, [r3, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d02f      	beq.n	800a086 <CircularQueue_Sense+0x12a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	8912      	ldrh	r2, [r2, #8]
 800a034:	4293      	cmp	r3, r2
 800a036:	d226      	bcs.n	800a086 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	891b      	ldrh	r3, [r3, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d11d      	bne.n	800a080 <CircularQueue_Sense+0x124>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	1c58      	adds	r0, r3, #1
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4298      	cmp	r0, r3
 800a05e:	d305      	bcc.n	800a06c <CircularQueue_Sense+0x110>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	1ac3      	subs	r3, r0, r3
 800a068:	3301      	adds	r3, #1
 800a06a:	e001      	b.n	800a070 <CircularQueue_Sense+0x114>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3301      	adds	r3, #1
 800a070:	440b      	add	r3, r1
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	b29b      	uxth	r3, r3
 800a076:	021b      	lsls	r3, r3, #8
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4413      	add	r3, r2
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	e001      	b.n	800a084 <CircularQueue_Sense+0x128>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	891b      	ldrh	r3, [r3, #8]
 800a084:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	7af9      	ldrb	r1, [r7, #11]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4419      	add	r1, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4299      	cmp	r1, r3
 800a096:	d306      	bcc.n	800a0a6 <CircularQueue_Sense+0x14a>
 800a098:	7af9      	ldrb	r1, [r7, #11]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4419      	add	r1, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	1acb      	subs	r3, r1, r3
 800a0a4:	e002      	b.n	800a0ac <CircularQueue_Sense+0x150>
 800a0a6:	7af9      	ldrb	r1, [r7, #11]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	440b      	add	r3, r1
 800a0ac:	4413      	add	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	8a7a      	ldrh	r2, [r7, #18]
 800a0ba:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a0bc:	697b      	ldr	r3, [r7, #20]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a0ce:	f7f7 fe89 	bl	8001de4 <HW_IPCC_Enable>

  return;
 800a0d2:	bf00      	nop
}
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <TL_Init>:


void TL_Init( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a0dc:	4b10      	ldr	r3, [pc, #64]	; (800a120 <TL_Init+0x48>)
 800a0de:	4a11      	ldr	r2, [pc, #68]	; (800a124 <TL_Init+0x4c>)
 800a0e0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a0e2:	4b0f      	ldr	r3, [pc, #60]	; (800a120 <TL_Init+0x48>)
 800a0e4:	4a10      	ldr	r2, [pc, #64]	; (800a128 <TL_Init+0x50>)
 800a0e6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <TL_Init+0x48>)
 800a0ea:	4a10      	ldr	r2, [pc, #64]	; (800a12c <TL_Init+0x54>)
 800a0ec:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <TL_Init+0x48>)
 800a0f0:	4a0f      	ldr	r2, [pc, #60]	; (800a130 <TL_Init+0x58>)
 800a0f2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a0f4:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <TL_Init+0x48>)
 800a0f6:	4a0f      	ldr	r2, [pc, #60]	; (800a134 <TL_Init+0x5c>)
 800a0f8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <TL_Init+0x48>)
 800a0fc:	4a0e      	ldr	r2, [pc, #56]	; (800a138 <TL_Init+0x60>)
 800a0fe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a100:	4b07      	ldr	r3, [pc, #28]	; (800a120 <TL_Init+0x48>)
 800a102:	4a0e      	ldr	r2, [pc, #56]	; (800a13c <TL_Init+0x64>)
 800a104:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <TL_Init+0x48>)
 800a108:	4a0d      	ldr	r2, [pc, #52]	; (800a140 <TL_Init+0x68>)
 800a10a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <TL_Init+0x48>)
 800a10e:	4a0d      	ldr	r2, [pc, #52]	; (800a144 <TL_Init+0x6c>)
 800a110:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a112:	4b03      	ldr	r3, [pc, #12]	; (800a120 <TL_Init+0x48>)
 800a114:	4a0c      	ldr	r2, [pc, #48]	; (800a148 <TL_Init+0x70>)
 800a116:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a118:	f7f7 fe78 	bl	8001e0c <HW_IPCC_Init>

  return;
 800a11c:	bf00      	nop
}
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20030000 	.word	0x20030000
 800a124:	20030030 	.word	0x20030030
 800a128:	20030050 	.word	0x20030050
 800a12c:	20030060 	.word	0x20030060
 800a130:	2003006c 	.word	0x2003006c
 800a134:	20030074 	.word	0x20030074
 800a138:	2003007c 	.word	0x2003007c
 800a13c:	20030084 	.word	0x20030084
 800a140:	200300a0 	.word	0x200300a0
 800a144:	200300a4 	.word	0x200300a4
 800a148:	200300b0 	.word	0x200300b0

0800a14c <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a152:	e01c      	b.n	800a18e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a154:	1d3b      	adds	r3, r7, #4
 800a156:	4619      	mov	r1, r3
 800a158:	4812      	ldr	r0, [pc, #72]	; (800a1a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a15a:	f7ff fb96 	bl	800988a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	7a5b      	ldrb	r3, [r3, #9]
 800a162:	2b0f      	cmp	r3, #15
 800a164:	d003      	beq.n	800a16e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	7a5b      	ldrb	r3, [r3, #9]
 800a16a:	2b0e      	cmp	r3, #14
 800a16c:	d105      	bne.n	800a17a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4619      	mov	r1, r3
 800a172:	2002      	movs	r0, #2
 800a174:	f000 f98c 	bl	800a490 <OutputDbgTrace>
 800a178:	e004      	b.n	800a184 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4619      	mov	r1, r3
 800a17e:	2003      	movs	r0, #3
 800a180:	f000 f986 	bl	800a490 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a184:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	4610      	mov	r0, r2
 800a18c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a18e:	4805      	ldr	r0, [pc, #20]	; (800a1a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a190:	f7ff faec 	bl	800976c <LST_is_empty>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0dc      	beq.n	800a154 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a19a:	bf00      	nop
}
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200300cc 	.word	0x200300cc
 800a1a8:	2000538c 	.word	0x2000538c

0800a1ac <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a1b0:	4b02      	ldr	r3, [pc, #8]	; (800a1bc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4798      	blx	r3

  return;
 800a1b6:	bf00      	nop
}
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20005390 	.word	0x20005390

0800a1c0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a1cc:	480d      	ldr	r0, [pc, #52]	; (800a204 <TL_SYS_Init+0x44>)
 800a1ce:	f7ff fabd 	bl	800974c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <TL_SYS_Init+0x48>)
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4a08      	ldr	r2, [pc, #32]	; (800a204 <TL_SYS_Init+0x44>)
 800a1e4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a1e6:	f7f7 fe3f 	bl	8001e68 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a07      	ldr	r2, [pc, #28]	; (800a20c <TL_SYS_Init+0x4c>)
 800a1f0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	4a06      	ldr	r2, [pc, #24]	; (800a210 <TL_SYS_Init+0x50>)
 800a1f8:	6013      	str	r3, [r2, #0]

  return 0;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	200300d4 	.word	0x200300d4
 800a208:	20030000 	.word	0x20030000
 800a20c:	20005394 	.word	0x20005394
 800a210:	20005398 	.word	0x20005398

0800a214 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a220:	4b09      	ldr	r3, [pc, #36]	; (800a248 <TL_SYS_SendCmd+0x34>)
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2210      	movs	r2, #16
 800a228:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a22a:	4b07      	ldr	r3, [pc, #28]	; (800a248 <TL_SYS_SendCmd+0x34>)
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4619      	mov	r1, r3
 800a232:	2004      	movs	r0, #4
 800a234:	f000 f92c 	bl	800a490 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a238:	f7f7 fe20 	bl	8001e7c <HW_IPCC_SYS_SendCmd>

  return 0;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20030000 	.word	0x20030000

0800a24c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4619      	mov	r1, r3
 800a258:	2005      	movs	r0, #5
 800a25a:	f000 f919 	bl	800a490 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a03      	ldr	r2, [pc, #12]	; (800a270 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a264:	68d2      	ldr	r2, [r2, #12]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	4610      	mov	r0, r2
 800a26a:	4798      	blx	r3

  return;
 800a26c:	bf00      	nop
}
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20030000 	.word	0x20030000
 800a274:	20005394 	.word	0x20005394

0800a278 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a27e:	e00e      	b.n	800a29e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a280:	1d3b      	adds	r3, r7, #4
 800a282:	4619      	mov	r1, r3
 800a284:	480b      	ldr	r0, [pc, #44]	; (800a2b4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a286:	f7ff fb00 	bl	800988a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4619      	mov	r1, r3
 800a28e:	2006      	movs	r0, #6
 800a290:	f000 f8fe 	bl	800a490 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a294:	4b08      	ldr	r3, [pc, #32]	; (800a2b8 <HW_IPCC_SYS_EvtNot+0x40>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	4610      	mov	r0, r2
 800a29c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a29e:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a2a0:	f7ff fa64 	bl	800976c <LST_is_empty>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0ea      	beq.n	800a280 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a2aa:	bf00      	nop
}
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200300d4 	.word	0x200300d4
 800a2b8:	20005398 	.word	0x20005398

0800a2bc <TL_LLDTESTS_Init>:
/******************************************************************************
 * LLD TESTS
 ******************************************************************************/
#ifdef LLD_TESTS_WB
void TL_LLDTESTS_Init( TL_LLD_tests_Config_t *p_Config )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  MB_LldTestsTable_t  * p_lld_tests_table;

  p_lld_tests_table = TL_RefTable.p_lld_tests_table;
 800a2c4:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <TL_LLDTESTS_Init+0x2c>)
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	60fb      	str	r3, [r7, #12]
  p_lld_tests_table->clicmdrsp_buffer = p_Config->p_LldTestsCliCmdRspBuffer;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	601a      	str	r2, [r3, #0]
  p_lld_tests_table->m0cmd_buffer = p_Config->p_LldTestsM0CmdBuffer;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	605a      	str	r2, [r3, #4]
  HW_IPCC_LLDTESTS_Init();
 800a2da:	f7f7 fdf5 	bl	8001ec8 <HW_IPCC_LLDTESTS_Init>
  return;
 800a2de:	bf00      	nop
}
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20030000 	.word	0x20030000

0800a2ec <TL_LLDTESTS_SendCliCmd>:

void TL_LLDTESTS_SendCliCmd( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_lld_tests_table->clicmdrsp_buffer))->cmdserial.type = TL_CLICMD_PKT_TYPE;
 800a2f0:	4b04      	ldr	r3, [pc, #16]	; (800a304 <TL_LLDTESTS_SendCliCmd+0x18>)
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	721a      	strb	r2, [r3, #8]
  HW_IPCC_LLDTESTS_SendCliCmd();
 800a2fa:	f7f7 fdf3 	bl	8001ee4 <HW_IPCC_LLDTESTS_SendCliCmd>
  return;
 800a2fe:	bf00      	nop
}
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20030000 	.word	0x20030000

0800a308 <HW_IPCC_LLDTESTS_ReceiveCliRsp>:

void HW_IPCC_LLDTESTS_ReceiveCliRsp( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  TL_LLDTESTS_ReceiveCliRsp( (TL_CmdPacket_t*)(TL_RefTable.p_lld_tests_table->clicmdrsp_buffer) );
 800a30c:	4b03      	ldr	r3, [pc, #12]	; (800a31c <HW_IPCC_LLDTESTS_ReceiveCliRsp+0x14>)
 800a30e:	6a1b      	ldr	r3, [r3, #32]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f7f7 f926 	bl	8001564 <TL_LLDTESTS_ReceiveCliRsp>
  return;
 800a318:	bf00      	nop
}
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20030000 	.word	0x20030000

0800a320 <TL_LLDTESTS_SendCliRspAck>:

void TL_LLDTESTS_SendCliRspAck( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
  HW_IPCC_LLDTESTS_SendCliRspAck();
 800a324:	f7f7 fdf4 	bl	8001f10 <HW_IPCC_LLDTESTS_SendCliRspAck>
  return;
 800a328:	bf00      	nop
}
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HW_IPCC_LLDTESTS_ReceiveM0Cmd>:

void HW_IPCC_LLDTESTS_ReceiveM0Cmd( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  TL_LLDTESTS_ReceiveM0Cmd( (TL_CmdPacket_t*)(TL_RefTable.p_lld_tests_table->m0cmd_buffer) );
 800a330:	4b03      	ldr	r3, [pc, #12]	; (800a340 <HW_IPCC_LLDTESTS_ReceiveM0Cmd+0x14>)
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	4618      	mov	r0, r3
 800a338:	f7f7 f960 	bl	80015fc <TL_LLDTESTS_ReceiveM0Cmd>
  return;
 800a33c:	bf00      	nop
}
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20030000 	.word	0x20030000

0800a344 <TL_LLDTESTS_SendM0CmdAck>:


void TL_LLDTESTS_SendM0CmdAck( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  HW_IPCC_LLDTESTS_SendM0CmdAck();
 800a348:	f7f7 fdfc 	bl	8001f44 <HW_IPCC_LLDTESTS_SendM0CmdAck>
  return;
 800a34c:	bf00      	nop
}
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a358:	4817      	ldr	r0, [pc, #92]	; (800a3b8 <TL_MM_Init+0x68>)
 800a35a:	f7ff f9f7 	bl	800974c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a35e:	4817      	ldr	r0, [pc, #92]	; (800a3bc <TL_MM_Init+0x6c>)
 800a360:	f7ff f9f4 	bl	800974c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a364:	4b16      	ldr	r3, [pc, #88]	; (800a3c0 <TL_MM_Init+0x70>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	4a16      	ldr	r2, [pc, #88]	; (800a3c4 <TL_MM_Init+0x74>)
 800a36a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a36c:	4b15      	ldr	r3, [pc, #84]	; (800a3c4 <TL_MM_Init+0x74>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6892      	ldr	r2, [r2, #8]
 800a374:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a376:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <TL_MM_Init+0x74>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	68d2      	ldr	r2, [r2, #12]
 800a37e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a380:	4b10      	ldr	r3, [pc, #64]	; (800a3c4 <TL_MM_Init+0x74>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a0c      	ldr	r2, [pc, #48]	; (800a3b8 <TL_MM_Init+0x68>)
 800a386:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a388:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <TL_MM_Init+0x74>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a392:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <TL_MM_Init+0x74>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	6852      	ldr	r2, [r2, #4]
 800a39a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <TL_MM_Init+0x74>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	6912      	ldr	r2, [r2, #16]
 800a3a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <TL_MM_Init+0x74>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	6952      	ldr	r2, [r2, #20]
 800a3ae:	619a      	str	r2, [r3, #24]

  return;
 800a3b0:	bf00      	nop
}
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	200300bc 	.word	0x200300bc
 800a3bc:	20005384 	.word	0x20005384
 800a3c0:	20030000 	.word	0x20030000
 800a3c4:	2000539c 	.word	0x2000539c

0800a3c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4807      	ldr	r0, [pc, #28]	; (800a3f0 <TL_MM_EvtDone+0x28>)
 800a3d4:	f7ff fa12 	bl	80097fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f000 f858 	bl	800a490 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a3e0:	4804      	ldr	r0, [pc, #16]	; (800a3f4 <TL_MM_EvtDone+0x2c>)
 800a3e2:	f7f7 fdbd 	bl	8001f60 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a3e6:	bf00      	nop
}
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20005384 	.word	0x20005384
 800a3f4:	0800a3f9 	.word	0x0800a3f9

0800a3f8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a3fe:	e00c      	b.n	800a41a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a400:	1d3b      	adds	r3, r7, #4
 800a402:	4619      	mov	r1, r3
 800a404:	480a      	ldr	r0, [pc, #40]	; (800a430 <SendFreeBuf+0x38>)
 800a406:	f7ff fa40 	bl	800988a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a40a:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <SendFreeBuf+0x3c>)
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4611      	mov	r1, r2
 800a414:	4618      	mov	r0, r3
 800a416:	f7ff f9f1 	bl	80097fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a41a:	4805      	ldr	r0, [pc, #20]	; (800a430 <SendFreeBuf+0x38>)
 800a41c:	f7ff f9a6 	bl	800976c <LST_is_empty>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0ec      	beq.n	800a400 <SendFreeBuf+0x8>
  }

  return;
 800a426:	bf00      	nop
}
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20005384 	.word	0x20005384
 800a434:	20030000 	.word	0x20030000

0800a438 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a43c:	4805      	ldr	r0, [pc, #20]	; (800a454 <TL_TRACES_Init+0x1c>)
 800a43e:	f7ff f985 	bl	800974c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <TL_TRACES_Init+0x20>)
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	4a03      	ldr	r2, [pc, #12]	; (800a454 <TL_TRACES_Init+0x1c>)
 800a448:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a44a:	f7f7 fdbf 	bl	8001fcc <HW_IPCC_TRACES_Init>

  return;
 800a44e:	bf00      	nop
}
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	200300c4 	.word	0x200300c4
 800a458:	20030000 	.word	0x20030000

0800a45c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a462:	e008      	b.n	800a476 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a464:	1d3b      	adds	r3, r7, #4
 800a466:	4619      	mov	r1, r3
 800a468:	4808      	ldr	r0, [pc, #32]	; (800a48c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a46a:	f7ff fa0e 	bl	800988a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4618      	mov	r0, r3
 800a472:	f7f6 fa2e 	bl	80008d2 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a476:	4805      	ldr	r0, [pc, #20]	; (800a48c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a478:	f7ff f978 	bl	800976c <LST_is_empty>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0f0      	beq.n	800a464 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a482:	bf00      	nop
}
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	200300c4 	.word	0x200300c4

0800a490 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	2b06      	cmp	r3, #6
 800a4a0:	d845      	bhi.n	800a52e <OutputDbgTrace+0x9e>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <OutputDbgTrace+0x18>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	0800a4e9 	.word	0x0800a4e9
 800a4b0:	0800a4ef 	.word	0x0800a4ef
 800a4b4:	0800a503 	.word	0x0800a503
 800a4b8:	0800a50f 	.word	0x0800a50f
 800a4bc:	0800a515 	.word	0x0800a515
 800a4c0:	0800a523 	.word	0x0800a523
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	7a5b      	ldrb	r3, [r3, #9]
 800a4cc:	2bff      	cmp	r3, #255	; 0xff
 800a4ce:	d005      	beq.n	800a4dc <OutputDbgTrace+0x4c>
 800a4d0:	2bff      	cmp	r3, #255	; 0xff
 800a4d2:	dc05      	bgt.n	800a4e0 <OutputDbgTrace+0x50>
 800a4d4:	2b0e      	cmp	r3, #14
 800a4d6:	d005      	beq.n	800a4e4 <OutputDbgTrace+0x54>
 800a4d8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a4da:	e001      	b.n	800a4e0 <OutputDbgTrace+0x50>
          break;
 800a4dc:	bf00      	nop
 800a4de:	e027      	b.n	800a530 <OutputDbgTrace+0xa0>
          break;
 800a4e0:	bf00      	nop
 800a4e2:	e025      	b.n	800a530 <OutputDbgTrace+0xa0>
          break;
 800a4e4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a4e6:	e023      	b.n	800a530 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a4ec:	e020      	b.n	800a530 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	7a5b      	ldrb	r3, [r3, #9]
 800a4f6:	2b0e      	cmp	r3, #14
 800a4f8:	d001      	beq.n	800a4fe <OutputDbgTrace+0x6e>
 800a4fa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a4fc:	e000      	b.n	800a500 <OutputDbgTrace+0x70>
          break;
 800a4fe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a500:	e016      	b.n	800a530 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	7a5b      	ldrb	r3, [r3, #9]
 800a50a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a50c:	e010      	b.n	800a530 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a512:	e00d      	b.n	800a530 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	7a5b      	ldrb	r3, [r3, #9]
 800a51c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a51e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a520:	e006      	b.n	800a530 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	7a5b      	ldrb	r3, [r3, #9]
 800a52a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a52c:	e000      	b.n	800a530 <OutputDbgTrace+0xa0>

    default:
      break;
 800a52e:	bf00      	nop
  }

  return;
 800a530:	bf00      	nop
}
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <UTIL_LPM_Init+0x1c>)
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a546:	4b05      	ldr	r3, [pc, #20]	; (800a55c <UTIL_LPM_Init+0x20>)
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a54c:	bf00      	nop
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	200053a0 	.word	0x200053a0
 800a55c:	200053a4 	.word	0x200053a4

0800a560 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56c:	f3ef 8310 	mrs	r3, PRIMASK
 800a570:	613b      	str	r3, [r7, #16]
  return(result);
 800a572:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a576:	b672      	cpsid	i
}
 800a578:	bf00      	nop
  
  switch( state )
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <UTIL_LPM_SetStopMode+0x32>
 800a580:	2b01      	cmp	r3, #1
 800a582:	d10e      	bne.n	800a5a2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a584:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <UTIL_LPM_SetStopMode+0x5c>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	4a0b      	ldr	r2, [pc, #44]	; (800a5bc <UTIL_LPM_SetStopMode+0x5c>)
 800a58e:	6013      	str	r3, [r2, #0]
      break;
 800a590:	e008      	b.n	800a5a4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	43da      	mvns	r2, r3
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <UTIL_LPM_SetStopMode+0x5c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4013      	ands	r3, r2
 800a59c:	4a07      	ldr	r2, [pc, #28]	; (800a5bc <UTIL_LPM_SetStopMode+0x5c>)
 800a59e:	6013      	str	r3, [r2, #0]
      break;
 800a5a0:	e000      	b.n	800a5a4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a5a2:	bf00      	nop
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f383 8810 	msr	PRIMASK, r3
}
 800a5ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a5b0:	bf00      	nop
 800a5b2:	371c      	adds	r7, #28
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	200053a0 	.word	0x200053a0

0800a5c0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a5d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d6:	b672      	cpsid	i
}
 800a5d8:	bf00      	nop
  
  switch(state)
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <UTIL_LPM_SetOffMode+0x32>
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d10e      	bne.n	800a602 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a5e4:	4b0d      	ldr	r3, [pc, #52]	; (800a61c <UTIL_LPM_SetOffMode+0x5c>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	4a0b      	ldr	r2, [pc, #44]	; (800a61c <UTIL_LPM_SetOffMode+0x5c>)
 800a5ee:	6013      	str	r3, [r2, #0]
      break;
 800a5f0:	e008      	b.n	800a604 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	43da      	mvns	r2, r3
 800a5f6:	4b09      	ldr	r3, [pc, #36]	; (800a61c <UTIL_LPM_SetOffMode+0x5c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	4a07      	ldr	r2, [pc, #28]	; (800a61c <UTIL_LPM_SetOffMode+0x5c>)
 800a5fe:	6013      	str	r3, [r2, #0]
      break;
 800a600:	e000      	b.n	800a604 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a602:	bf00      	nop
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f383 8810 	msr	PRIMASK, r3
}
 800a60e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	200053a4 	.word	0x200053a4

0800a620 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a626:	f3ef 8310 	mrs	r3, PRIMASK
 800a62a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a62c:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a62e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a630:	b672      	cpsid	i
}
 800a632:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a634:	4b12      	ldr	r3, [pc, #72]	; (800a680 <UTIL_LPM_EnterLowPower+0x60>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d006      	beq.n	800a64a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a63c:	4b11      	ldr	r3, [pc, #68]	; (800a684 <UTIL_LPM_EnterLowPower+0x64>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a642:	4b10      	ldr	r3, [pc, #64]	; (800a684 <UTIL_LPM_EnterLowPower+0x64>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4798      	blx	r3
 800a648:	e010      	b.n	800a66c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a64a:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <UTIL_LPM_EnterLowPower+0x68>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d006      	beq.n	800a660 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a652:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <UTIL_LPM_EnterLowPower+0x64>)
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a658:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <UTIL_LPM_EnterLowPower+0x64>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	4798      	blx	r3
 800a65e:	e005      	b.n	800a66c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a660:	4b08      	ldr	r3, [pc, #32]	; (800a684 <UTIL_LPM_EnterLowPower+0x64>)
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a666:	4b07      	ldr	r3, [pc, #28]	; (800a684 <UTIL_LPM_EnterLowPower+0x64>)
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	4798      	blx	r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f383 8810 	msr	PRIMASK, r3
}
 800a676:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	200053a0 	.word	0x200053a0
 800a684:	0800ca5c 	.word	0x0800ca5c
 800a688:	200053a4 	.word	0x200053a4

0800a68c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08c      	sub	sp, #48	; 0x30
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a694:	4b6a      	ldr	r3, [pc, #424]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800a69a:	4b69      	ldr	r3, [pc, #420]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	4a67      	ldr	r2, [pc, #412]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a6a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a6a6:	4b67      	ldr	r3, [pc, #412]	; (800a844 <UTIL_SEQ_Run+0x1b8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a6ac:	e086      	b.n	800a7bc <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a6b2:	e002      	b.n	800a6ba <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a6ba:	4a63      	ldr	r2, [pc, #396]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6c2:	4b62      	ldr	r3, [pc, #392]	; (800a84c <UTIL_SEQ_Run+0x1c0>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	401a      	ands	r2, r3
 800a6c8:	4b5d      	ldr	r3, [pc, #372]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0f0      	beq.n	800a6b4 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a6d2:	4a5d      	ldr	r2, [pc, #372]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a6da:	4b5c      	ldr	r3, [pc, #368]	; (800a84c <UTIL_SEQ_Run+0x1c0>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	401a      	ands	r2, r3
 800a6e0:	4b57      	ldr	r3, [pc, #348]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a6e8:	4a57      	ldr	r2, [pc, #348]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	00db      	lsls	r3, r3, #3
 800a6ee:	4413      	add	r3, r2
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a6fa:	4a53      	ldr	r2, [pc, #332]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	4413      	add	r3, r2
 800a702:	f04f 32ff 	mov.w	r2, #4294967295
 800a706:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a708:	4a4f      	ldr	r2, [pc, #316]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	4413      	add	r3, r2
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	4013      	ands	r3, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f000 f96c 	bl	800a9f4 <SEQ_BitPosition>
 800a71c:	4603      	mov	r3, r0
 800a71e:	461a      	mov	r2, r3
 800a720:	4b4b      	ldr	r3, [pc, #300]	; (800a850 <UTIL_SEQ_Run+0x1c4>)
 800a722:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a724:	4a48      	ldr	r2, [pc, #288]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	4413      	add	r3, r2
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	4b48      	ldr	r3, [pc, #288]	; (800a850 <UTIL_SEQ_Run+0x1c4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2101      	movs	r1, #1
 800a734:	fa01 f303 	lsl.w	r3, r1, r3
 800a738:	43db      	mvns	r3, r3
 800a73a:	401a      	ands	r2, r3
 800a73c:	4942      	ldr	r1, [pc, #264]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	00db      	lsls	r3, r3, #3
 800a742:	440b      	add	r3, r1
 800a744:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a746:	f3ef 8310 	mrs	r3, PRIMASK
 800a74a:	617b      	str	r3, [r7, #20]
  return(result);
 800a74c:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a74e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a750:	b672      	cpsid	i
}
 800a752:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a754:	4b3e      	ldr	r3, [pc, #248]	; (800a850 <UTIL_SEQ_Run+0x1c4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2201      	movs	r2, #1
 800a75a:	fa02 f303 	lsl.w	r3, r2, r3
 800a75e:	43da      	mvns	r2, r3
 800a760:	4b38      	ldr	r3, [pc, #224]	; (800a844 <UTIL_SEQ_Run+0x1b8>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4013      	ands	r3, r2
 800a766:	4a37      	ldr	r2, [pc, #220]	; (800a844 <UTIL_SEQ_Run+0x1b8>)
 800a768:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a76a:	2302      	movs	r3, #2
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a76e:	e013      	b.n	800a798 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a772:	3b01      	subs	r3, #1
 800a774:	4a34      	ldr	r2, [pc, #208]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a776:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a77a:	4b35      	ldr	r3, [pc, #212]	; (800a850 <UTIL_SEQ_Run+0x1c4>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2201      	movs	r2, #1
 800a780:	fa02 f303 	lsl.w	r3, r2, r3
 800a784:	43da      	mvns	r2, r3
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	3b01      	subs	r3, #1
 800a78a:	400a      	ands	r2, r1
 800a78c:	492e      	ldr	r1, [pc, #184]	; (800a848 <UTIL_SEQ_Run+0x1bc>)
 800a78e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a794:	3b01      	subs	r3, #1
 800a796:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1e8      	bne.n	800a770 <UTIL_SEQ_Run+0xe4>
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f383 8810 	msr	PRIMASK, r3
}
 800a7a8:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a7aa:	4b29      	ldr	r3, [pc, #164]	; (800a850 <UTIL_SEQ_Run+0x1c4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a29      	ldr	r2, [pc, #164]	; (800a854 <UTIL_SEQ_Run+0x1c8>)
 800a7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b4:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800a7b6:	4b23      	ldr	r3, [pc, #140]	; (800a844 <UTIL_SEQ_Run+0x1b8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a7bc:	4b23      	ldr	r3, [pc, #140]	; (800a84c <UTIL_SEQ_Run+0x1c0>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4013      	ands	r3, r2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d007      	beq.n	800a7de <UTIL_SEQ_Run+0x152>
 800a7ce:	4b22      	ldr	r3, [pc, #136]	; (800a858 <UTIL_SEQ_Run+0x1cc>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b22      	ldr	r3, [pc, #136]	; (800a85c <UTIL_SEQ_Run+0x1d0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f43f af68 	beq.w	800a6ae <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a7de:	4b1c      	ldr	r3, [pc, #112]	; (800a850 <UTIL_SEQ_Run+0x1c4>)
 800a7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a7e6:	f000 f8f7 	bl	800a9d8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7ea:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a7f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7f4:	b672      	cpsid	i
}
 800a7f6:	bf00      	nop
  local_taskset = TaskSet;
 800a7f8:	4b12      	ldr	r3, [pc, #72]	; (800a844 <UTIL_SEQ_Run+0x1b8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <UTIL_SEQ_Run+0x1c0>)
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	401a      	ands	r2, r3
 800a806:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d108      	bne.n	800a822 <UTIL_SEQ_Run+0x196>
 800a810:	4b11      	ldr	r3, [pc, #68]	; (800a858 <UTIL_SEQ_Run+0x1cc>)
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	4b11      	ldr	r3, [pc, #68]	; (800a85c <UTIL_SEQ_Run+0x1d0>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4013      	ands	r3, r2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800a81e:	f7f6 f822 	bl	8000866 <UTIL_SEQ_Idle>
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f383 8810 	msr	PRIMASK, r3
}
 800a82c:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a82e:	f000 f8da 	bl	800a9e6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a832:	4a03      	ldr	r2, [pc, #12]	; (800a840 <UTIL_SEQ_Run+0x1b4>)
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	6013      	str	r3, [r2, #0]

  return;
 800a838:	bf00      	nop
}
 800a83a:	3730      	adds	r7, #48	; 0x30
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000054 	.word	0x20000054
 800a844:	200053a8 	.word	0x200053a8
 800a848:	20005438 	.word	0x20005438
 800a84c:	20000050 	.word	0x20000050
 800a850:	200053b4 	.word	0x200053b4
 800a854:	200053b8 	.word	0x200053b8
 800a858:	200053ac 	.word	0x200053ac
 800a85c:	200053b0 	.word	0x200053b0

0800a860 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a86c:	f3ef 8310 	mrs	r3, PRIMASK
 800a870:	617b      	str	r3, [r7, #20]
  return(result);
 800a872:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a874:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a876:	b672      	cpsid	i
}
 800a878:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f000 f8ba 	bl	800a9f4 <SEQ_BitPosition>
 800a880:	4603      	mov	r3, r0
 800a882:	4619      	mov	r1, r3
 800a884:	4a06      	ldr	r2, [pc, #24]	; (800a8a0 <UTIL_SEQ_RegTask+0x40>)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f383 8810 	msr	PRIMASK, r3
}
 800a896:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a898:	bf00      	nop
}
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	200053b8 	.word	0x200053b8

0800a8a4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8b8:	b672      	cpsid	i
}
 800a8ba:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	; (800a8f4 <UTIL_SEQ_SetTask+0x50>)
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	4a0b      	ldr	r2, [pc, #44]	; (800a8f4 <UTIL_SEQ_SetTask+0x50>)
 800a8c6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a8c8:	4a0b      	ldr	r2, [pc, #44]	; (800a8f8 <UTIL_SEQ_SetTask+0x54>)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	4908      	ldr	r1, [pc, #32]	; (800a8f8 <UTIL_SEQ_SetTask+0x54>)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	f383 8810 	msr	PRIMASK, r3
}
 800a8e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8e8:	bf00      	nop
}
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	200053a8 	.word	0x200053a8
 800a8f8:	20005438 	.word	0x20005438

0800a8fc <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b087      	sub	sp, #28
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a904:	f3ef 8310 	mrs	r3, PRIMASK
 800a908:	60fb      	str	r3, [r7, #12]
  return(result);
 800a90a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a90c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a90e:	b672      	cpsid	i
}
 800a910:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <UTIL_SEQ_SetEvt+0x3c>)
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4313      	orrs	r3, r2
 800a91a:	4a07      	ldr	r2, [pc, #28]	; (800a938 <UTIL_SEQ_SetEvt+0x3c>)
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f383 8810 	msr	PRIMASK, r3
}
 800a928:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a92a:	bf00      	nop
}
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	200053ac 	.word	0x200053ac

0800a93c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a944:	4b21      	ldr	r3, [pc, #132]	; (800a9cc <UTIL_SEQ_WaitEvt+0x90>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a94a:	4b20      	ldr	r3, [pc, #128]	; (800a9cc <UTIL_SEQ_WaitEvt+0x90>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a952:	d102      	bne.n	800a95a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	e005      	b.n	800a966 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a95a:	4b1c      	ldr	r3, [pc, #112]	; (800a9cc <UTIL_SEQ_WaitEvt+0x90>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2201      	movs	r2, #1
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a966:	4b1a      	ldr	r3, [pc, #104]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x94>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a96c:	4a18      	ldr	r2, [pc, #96]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x94>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a972:	e005      	b.n	800a980 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a974:	4b16      	ldr	r3, [pc, #88]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x94>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4619      	mov	r1, r3
 800a97a:	69f8      	ldr	r0, [r7, #28]
 800a97c:	f7f5 ff79 	bl	8000872 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a980:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x98>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	4b12      	ldr	r3, [pc, #72]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x94>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4013      	ands	r3, r2
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0f2      	beq.n	800a974 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a98e:	4a0f      	ldr	r2, [pc, #60]	; (800a9cc <UTIL_SEQ_WaitEvt+0x90>)
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a994:	f3ef 8310 	mrs	r3, PRIMASK
 800a998:	60bb      	str	r3, [r7, #8]
  return(result);
 800a99a:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a99e:	b672      	cpsid	i
}
 800a9a0:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x94>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	43da      	mvns	r2, r3
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x98>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x98>)
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f383 8810 	msr	PRIMASK, r3
}
 800a9bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a9be:	4a04      	ldr	r2, [pc, #16]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x94>)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	6013      	str	r3, [r2, #0]

  return;
 800a9c4:	bf00      	nop
}
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	200053b4 	.word	0x200053b4
 800a9d0:	200053b0 	.word	0x200053b0
 800a9d4:	200053ac 	.word	0x200053ac

0800a9d8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9dc:	bf00      	nop
}
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9ea:	bf00      	nop
}
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	0c1b      	lsrs	r3, r3, #16
 800aa04:	041b      	lsls	r3, r3, #16
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d104      	bne.n	800aa14 <SEQ_BitPosition+0x20>
 800aa0a:	2310      	movs	r3, #16
 800aa0c:	73fb      	strb	r3, [r7, #15]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	041b      	lsls	r3, r3, #16
 800aa12:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d105      	bne.n	800aa2a <SEQ_BitPosition+0x36>
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	3308      	adds	r3, #8
 800aa22:	73fb      	strb	r3, [r7, #15]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <SEQ_BitPosition+0x4c>
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	3304      	adds	r3, #4
 800aa38:	73fb      	strb	r3, [r7, #15]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	0f1b      	lsrs	r3, r3, #28
 800aa44:	4a07      	ldr	r2, [pc, #28]	; (800aa64 <SEQ_BitPosition+0x70>)
 800aa46:	5cd2      	ldrb	r2, [r2, r3]
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
 800aa50:	f1c3 031f 	rsb	r3, r3, #31
 800aa54:	b2db      	uxtb	r3, r3
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	0800cb50 	.word	0x0800cb50

0800aa68 <atol>:
 800aa68:	220a      	movs	r2, #10
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	f000 b9a6 	b.w	800adbc <strtol>

0800aa70 <__errno>:
 800aa70:	4b01      	ldr	r3, [pc, #4]	; (800aa78 <__errno+0x8>)
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20000058 	.word	0x20000058

0800aa7c <__libc_init_array>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	4d0d      	ldr	r5, [pc, #52]	; (800aab4 <__libc_init_array+0x38>)
 800aa80:	4c0d      	ldr	r4, [pc, #52]	; (800aab8 <__libc_init_array+0x3c>)
 800aa82:	1b64      	subs	r4, r4, r5
 800aa84:	10a4      	asrs	r4, r4, #2
 800aa86:	2600      	movs	r6, #0
 800aa88:	42a6      	cmp	r6, r4
 800aa8a:	d109      	bne.n	800aaa0 <__libc_init_array+0x24>
 800aa8c:	4d0b      	ldr	r5, [pc, #44]	; (800aabc <__libc_init_array+0x40>)
 800aa8e:	4c0c      	ldr	r4, [pc, #48]	; (800aac0 <__libc_init_array+0x44>)
 800aa90:	f001 fb80 	bl	800c194 <_init>
 800aa94:	1b64      	subs	r4, r4, r5
 800aa96:	10a4      	asrs	r4, r4, #2
 800aa98:	2600      	movs	r6, #0
 800aa9a:	42a6      	cmp	r6, r4
 800aa9c:	d105      	bne.n	800aaaa <__libc_init_array+0x2e>
 800aa9e:	bd70      	pop	{r4, r5, r6, pc}
 800aaa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa4:	4798      	blx	r3
 800aaa6:	3601      	adds	r6, #1
 800aaa8:	e7ee      	b.n	800aa88 <__libc_init_array+0xc>
 800aaaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaae:	4798      	blx	r3
 800aab0:	3601      	adds	r6, #1
 800aab2:	e7f2      	b.n	800aa9a <__libc_init_array+0x1e>
 800aab4:	0800cdb4 	.word	0x0800cdb4
 800aab8:	0800cdb4 	.word	0x0800cdb4
 800aabc:	0800cdb4 	.word	0x0800cdb4
 800aac0:	0800cdb8 	.word	0x0800cdb8

0800aac4 <memcpy>:
 800aac4:	440a      	add	r2, r1
 800aac6:	4291      	cmp	r1, r2
 800aac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aacc:	d100      	bne.n	800aad0 <memcpy+0xc>
 800aace:	4770      	bx	lr
 800aad0:	b510      	push	{r4, lr}
 800aad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aada:	4291      	cmp	r1, r2
 800aadc:	d1f9      	bne.n	800aad2 <memcpy+0xe>
 800aade:	bd10      	pop	{r4, pc}

0800aae0 <memset>:
 800aae0:	4402      	add	r2, r0
 800aae2:	4603      	mov	r3, r0
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d100      	bne.n	800aaea <memset+0xa>
 800aae8:	4770      	bx	lr
 800aaea:	f803 1b01 	strb.w	r1, [r3], #1
 800aaee:	e7f9      	b.n	800aae4 <memset+0x4>

0800aaf0 <iprintf>:
 800aaf0:	b40f      	push	{r0, r1, r2, r3}
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <iprintf+0x2c>)
 800aaf4:	b513      	push	{r0, r1, r4, lr}
 800aaf6:	681c      	ldr	r4, [r3, #0]
 800aaf8:	b124      	cbz	r4, 800ab04 <iprintf+0x14>
 800aafa:	69a3      	ldr	r3, [r4, #24]
 800aafc:	b913      	cbnz	r3, 800ab04 <iprintf+0x14>
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 fa16 	bl	800af30 <__sinit>
 800ab04:	ab05      	add	r3, sp, #20
 800ab06:	9a04      	ldr	r2, [sp, #16]
 800ab08:	68a1      	ldr	r1, [r4, #8]
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 fd2f 	bl	800b570 <_vfiprintf_r>
 800ab12:	b002      	add	sp, #8
 800ab14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab18:	b004      	add	sp, #16
 800ab1a:	4770      	bx	lr
 800ab1c:	20000058 	.word	0x20000058

0800ab20 <sniprintf>:
 800ab20:	b40c      	push	{r2, r3}
 800ab22:	b530      	push	{r4, r5, lr}
 800ab24:	4b17      	ldr	r3, [pc, #92]	; (800ab84 <sniprintf+0x64>)
 800ab26:	1e0c      	subs	r4, r1, #0
 800ab28:	681d      	ldr	r5, [r3, #0]
 800ab2a:	b09d      	sub	sp, #116	; 0x74
 800ab2c:	da08      	bge.n	800ab40 <sniprintf+0x20>
 800ab2e:	238b      	movs	r3, #139	; 0x8b
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	b01d      	add	sp, #116	; 0x74
 800ab38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab3c:	b002      	add	sp, #8
 800ab3e:	4770      	bx	lr
 800ab40:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab48:	bf14      	ite	ne
 800ab4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab4e:	4623      	moveq	r3, r4
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	9307      	str	r3, [sp, #28]
 800ab54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab58:	9002      	str	r0, [sp, #8]
 800ab5a:	9006      	str	r0, [sp, #24]
 800ab5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab62:	ab21      	add	r3, sp, #132	; 0x84
 800ab64:	a902      	add	r1, sp, #8
 800ab66:	4628      	mov	r0, r5
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	f000 fbd7 	bl	800b31c <_svfiprintf_r>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	bfbc      	itt	lt
 800ab72:	238b      	movlt	r3, #139	; 0x8b
 800ab74:	602b      	strlt	r3, [r5, #0]
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	d0dd      	beq.n	800ab36 <sniprintf+0x16>
 800ab7a:	9b02      	ldr	r3, [sp, #8]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	e7d9      	b.n	800ab36 <sniprintf+0x16>
 800ab82:	bf00      	nop
 800ab84:	20000058 	.word	0x20000058

0800ab88 <siprintf>:
 800ab88:	b40e      	push	{r1, r2, r3}
 800ab8a:	b500      	push	{lr}
 800ab8c:	b09c      	sub	sp, #112	; 0x70
 800ab8e:	ab1d      	add	r3, sp, #116	; 0x74
 800ab90:	9002      	str	r0, [sp, #8]
 800ab92:	9006      	str	r0, [sp, #24]
 800ab94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab98:	4809      	ldr	r0, [pc, #36]	; (800abc0 <siprintf+0x38>)
 800ab9a:	9107      	str	r1, [sp, #28]
 800ab9c:	9104      	str	r1, [sp, #16]
 800ab9e:	4909      	ldr	r1, [pc, #36]	; (800abc4 <siprintf+0x3c>)
 800aba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba4:	9105      	str	r1, [sp, #20]
 800aba6:	6800      	ldr	r0, [r0, #0]
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	a902      	add	r1, sp, #8
 800abac:	f000 fbb6 	bl	800b31c <_svfiprintf_r>
 800abb0:	9b02      	ldr	r3, [sp, #8]
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	b01c      	add	sp, #112	; 0x70
 800abb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abbc:	b003      	add	sp, #12
 800abbe:	4770      	bx	lr
 800abc0:	20000058 	.word	0x20000058
 800abc4:	ffff0208 	.word	0xffff0208

0800abc8 <strcpy>:
 800abc8:	4603      	mov	r3, r0
 800abca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abce:	f803 2b01 	strb.w	r2, [r3], #1
 800abd2:	2a00      	cmp	r2, #0
 800abd4:	d1f9      	bne.n	800abca <strcpy+0x2>
 800abd6:	4770      	bx	lr

0800abd8 <strncmp>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	b17a      	cbz	r2, 800abfc <strncmp+0x24>
 800abdc:	4603      	mov	r3, r0
 800abde:	3901      	subs	r1, #1
 800abe0:	1884      	adds	r4, r0, r2
 800abe2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abe6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800abea:	4290      	cmp	r0, r2
 800abec:	d101      	bne.n	800abf2 <strncmp+0x1a>
 800abee:	42a3      	cmp	r3, r4
 800abf0:	d101      	bne.n	800abf6 <strncmp+0x1e>
 800abf2:	1a80      	subs	r0, r0, r2
 800abf4:	bd10      	pop	{r4, pc}
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d1f3      	bne.n	800abe2 <strncmp+0xa>
 800abfa:	e7fa      	b.n	800abf2 <strncmp+0x1a>
 800abfc:	4610      	mov	r0, r2
 800abfe:	e7f9      	b.n	800abf4 <strncmp+0x1c>

0800ac00 <strtok>:
 800ac00:	4b16      	ldr	r3, [pc, #88]	; (800ac5c <strtok+0x5c>)
 800ac02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac04:	681e      	ldr	r6, [r3, #0]
 800ac06:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ac08:	4605      	mov	r5, r0
 800ac0a:	b9fc      	cbnz	r4, 800ac4c <strtok+0x4c>
 800ac0c:	2050      	movs	r0, #80	; 0x50
 800ac0e:	9101      	str	r1, [sp, #4]
 800ac10:	f000 fa40 	bl	800b094 <malloc>
 800ac14:	9901      	ldr	r1, [sp, #4]
 800ac16:	65b0      	str	r0, [r6, #88]	; 0x58
 800ac18:	4602      	mov	r2, r0
 800ac1a:	b920      	cbnz	r0, 800ac26 <strtok+0x26>
 800ac1c:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <strtok+0x60>)
 800ac1e:	4811      	ldr	r0, [pc, #68]	; (800ac64 <strtok+0x64>)
 800ac20:	2157      	movs	r1, #87	; 0x57
 800ac22:	f000 f90f 	bl	800ae44 <__assert_func>
 800ac26:	e9c0 4400 	strd	r4, r4, [r0]
 800ac2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ac2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ac32:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ac36:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ac3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ac3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ac42:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ac46:	6184      	str	r4, [r0, #24]
 800ac48:	7704      	strb	r4, [r0, #28]
 800ac4a:	6244      	str	r4, [r0, #36]	; 0x24
 800ac4c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4628      	mov	r0, r5
 800ac52:	b002      	add	sp, #8
 800ac54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac58:	f000 b806 	b.w	800ac68 <__strtok_r>
 800ac5c:	20000058 	.word	0x20000058
 800ac60:	0800cb64 	.word	0x0800cb64
 800ac64:	0800cb7b 	.word	0x0800cb7b

0800ac68 <__strtok_r>:
 800ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6a:	b908      	cbnz	r0, 800ac70 <__strtok_r+0x8>
 800ac6c:	6810      	ldr	r0, [r2, #0]
 800ac6e:	b188      	cbz	r0, 800ac94 <__strtok_r+0x2c>
 800ac70:	4604      	mov	r4, r0
 800ac72:	4620      	mov	r0, r4
 800ac74:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac78:	460f      	mov	r7, r1
 800ac7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac7e:	b91e      	cbnz	r6, 800ac88 <__strtok_r+0x20>
 800ac80:	b965      	cbnz	r5, 800ac9c <__strtok_r+0x34>
 800ac82:	6015      	str	r5, [r2, #0]
 800ac84:	4628      	mov	r0, r5
 800ac86:	e005      	b.n	800ac94 <__strtok_r+0x2c>
 800ac88:	42b5      	cmp	r5, r6
 800ac8a:	d1f6      	bne.n	800ac7a <__strtok_r+0x12>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1f0      	bne.n	800ac72 <__strtok_r+0xa>
 800ac90:	6014      	str	r4, [r2, #0]
 800ac92:	7003      	strb	r3, [r0, #0]
 800ac94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac96:	461c      	mov	r4, r3
 800ac98:	e00c      	b.n	800acb4 <__strtok_r+0x4c>
 800ac9a:	b915      	cbnz	r5, 800aca2 <__strtok_r+0x3a>
 800ac9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aca0:	460e      	mov	r6, r1
 800aca2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aca6:	42ab      	cmp	r3, r5
 800aca8:	d1f7      	bne.n	800ac9a <__strtok_r+0x32>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0f3      	beq.n	800ac96 <__strtok_r+0x2e>
 800acae:	2300      	movs	r3, #0
 800acb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acb4:	6014      	str	r4, [r2, #0]
 800acb6:	e7ed      	b.n	800ac94 <__strtok_r+0x2c>

0800acb8 <_strtol_l.constprop.0>:
 800acb8:	2b01      	cmp	r3, #1
 800acba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbe:	d001      	beq.n	800acc4 <_strtol_l.constprop.0+0xc>
 800acc0:	2b24      	cmp	r3, #36	; 0x24
 800acc2:	d906      	bls.n	800acd2 <_strtol_l.constprop.0+0x1a>
 800acc4:	f7ff fed4 	bl	800aa70 <__errno>
 800acc8:	2316      	movs	r3, #22
 800acca:	6003      	str	r3, [r0, #0]
 800accc:	2000      	movs	r0, #0
 800acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800adb8 <_strtol_l.constprop.0+0x100>
 800acd6:	460d      	mov	r5, r1
 800acd8:	462e      	mov	r6, r5
 800acda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acde:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ace2:	f017 0708 	ands.w	r7, r7, #8
 800ace6:	d1f7      	bne.n	800acd8 <_strtol_l.constprop.0+0x20>
 800ace8:	2c2d      	cmp	r4, #45	; 0x2d
 800acea:	d132      	bne.n	800ad52 <_strtol_l.constprop.0+0x9a>
 800acec:	782c      	ldrb	r4, [r5, #0]
 800acee:	2701      	movs	r7, #1
 800acf0:	1cb5      	adds	r5, r6, #2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d05b      	beq.n	800adae <_strtol_l.constprop.0+0xf6>
 800acf6:	2b10      	cmp	r3, #16
 800acf8:	d109      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800acfa:	2c30      	cmp	r4, #48	; 0x30
 800acfc:	d107      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800acfe:	782c      	ldrb	r4, [r5, #0]
 800ad00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad04:	2c58      	cmp	r4, #88	; 0x58
 800ad06:	d14d      	bne.n	800ada4 <_strtol_l.constprop.0+0xec>
 800ad08:	786c      	ldrb	r4, [r5, #1]
 800ad0a:	2310      	movs	r3, #16
 800ad0c:	3502      	adds	r5, #2
 800ad0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad12:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad16:	f04f 0c00 	mov.w	ip, #0
 800ad1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad1e:	4666      	mov	r6, ip
 800ad20:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad28:	f1be 0f09 	cmp.w	lr, #9
 800ad2c:	d816      	bhi.n	800ad5c <_strtol_l.constprop.0+0xa4>
 800ad2e:	4674      	mov	r4, lr
 800ad30:	42a3      	cmp	r3, r4
 800ad32:	dd24      	ble.n	800ad7e <_strtol_l.constprop.0+0xc6>
 800ad34:	f1bc 0f00 	cmp.w	ip, #0
 800ad38:	db1e      	blt.n	800ad78 <_strtol_l.constprop.0+0xc0>
 800ad3a:	45b1      	cmp	r9, r6
 800ad3c:	d31c      	bcc.n	800ad78 <_strtol_l.constprop.0+0xc0>
 800ad3e:	d101      	bne.n	800ad44 <_strtol_l.constprop.0+0x8c>
 800ad40:	45a2      	cmp	sl, r4
 800ad42:	db19      	blt.n	800ad78 <_strtol_l.constprop.0+0xc0>
 800ad44:	fb06 4603 	mla	r6, r6, r3, r4
 800ad48:	f04f 0c01 	mov.w	ip, #1
 800ad4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad50:	e7e8      	b.n	800ad24 <_strtol_l.constprop.0+0x6c>
 800ad52:	2c2b      	cmp	r4, #43	; 0x2b
 800ad54:	bf04      	itt	eq
 800ad56:	782c      	ldrbeq	r4, [r5, #0]
 800ad58:	1cb5      	addeq	r5, r6, #2
 800ad5a:	e7ca      	b.n	800acf2 <_strtol_l.constprop.0+0x3a>
 800ad5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ad60:	f1be 0f19 	cmp.w	lr, #25
 800ad64:	d801      	bhi.n	800ad6a <_strtol_l.constprop.0+0xb2>
 800ad66:	3c37      	subs	r4, #55	; 0x37
 800ad68:	e7e2      	b.n	800ad30 <_strtol_l.constprop.0+0x78>
 800ad6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad6e:	f1be 0f19 	cmp.w	lr, #25
 800ad72:	d804      	bhi.n	800ad7e <_strtol_l.constprop.0+0xc6>
 800ad74:	3c57      	subs	r4, #87	; 0x57
 800ad76:	e7db      	b.n	800ad30 <_strtol_l.constprop.0+0x78>
 800ad78:	f04f 3cff 	mov.w	ip, #4294967295
 800ad7c:	e7e6      	b.n	800ad4c <_strtol_l.constprop.0+0x94>
 800ad7e:	f1bc 0f00 	cmp.w	ip, #0
 800ad82:	da05      	bge.n	800ad90 <_strtol_l.constprop.0+0xd8>
 800ad84:	2322      	movs	r3, #34	; 0x22
 800ad86:	6003      	str	r3, [r0, #0]
 800ad88:	4646      	mov	r6, r8
 800ad8a:	b942      	cbnz	r2, 800ad9e <_strtol_l.constprop.0+0xe6>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	e79e      	b.n	800acce <_strtol_l.constprop.0+0x16>
 800ad90:	b107      	cbz	r7, 800ad94 <_strtol_l.constprop.0+0xdc>
 800ad92:	4276      	negs	r6, r6
 800ad94:	2a00      	cmp	r2, #0
 800ad96:	d0f9      	beq.n	800ad8c <_strtol_l.constprop.0+0xd4>
 800ad98:	f1bc 0f00 	cmp.w	ip, #0
 800ad9c:	d000      	beq.n	800ada0 <_strtol_l.constprop.0+0xe8>
 800ad9e:	1e69      	subs	r1, r5, #1
 800ada0:	6011      	str	r1, [r2, #0]
 800ada2:	e7f3      	b.n	800ad8c <_strtol_l.constprop.0+0xd4>
 800ada4:	2430      	movs	r4, #48	; 0x30
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1b1      	bne.n	800ad0e <_strtol_l.constprop.0+0x56>
 800adaa:	2308      	movs	r3, #8
 800adac:	e7af      	b.n	800ad0e <_strtol_l.constprop.0+0x56>
 800adae:	2c30      	cmp	r4, #48	; 0x30
 800adb0:	d0a5      	beq.n	800acfe <_strtol_l.constprop.0+0x46>
 800adb2:	230a      	movs	r3, #10
 800adb4:	e7ab      	b.n	800ad0e <_strtol_l.constprop.0+0x56>
 800adb6:	bf00      	nop
 800adb8:	0800cc15 	.word	0x0800cc15

0800adbc <strtol>:
 800adbc:	4613      	mov	r3, r2
 800adbe:	460a      	mov	r2, r1
 800adc0:	4601      	mov	r1, r0
 800adc2:	4802      	ldr	r0, [pc, #8]	; (800adcc <strtol+0x10>)
 800adc4:	6800      	ldr	r0, [r0, #0]
 800adc6:	f7ff bf77 	b.w	800acb8 <_strtol_l.constprop.0>
 800adca:	bf00      	nop
 800adcc:	20000058 	.word	0x20000058

0800add0 <_vsniprintf_r>:
 800add0:	b530      	push	{r4, r5, lr}
 800add2:	4614      	mov	r4, r2
 800add4:	2c00      	cmp	r4, #0
 800add6:	b09b      	sub	sp, #108	; 0x6c
 800add8:	4605      	mov	r5, r0
 800adda:	461a      	mov	r2, r3
 800addc:	da05      	bge.n	800adea <_vsniprintf_r+0x1a>
 800adde:	238b      	movs	r3, #139	; 0x8b
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	b01b      	add	sp, #108	; 0x6c
 800ade8:	bd30      	pop	{r4, r5, pc}
 800adea:	f44f 7302 	mov.w	r3, #520	; 0x208
 800adee:	f8ad 300c 	strh.w	r3, [sp, #12]
 800adf2:	bf14      	ite	ne
 800adf4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800adf8:	4623      	moveq	r3, r4
 800adfa:	9302      	str	r3, [sp, #8]
 800adfc:	9305      	str	r3, [sp, #20]
 800adfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae02:	9100      	str	r1, [sp, #0]
 800ae04:	9104      	str	r1, [sp, #16]
 800ae06:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ae0a:	4669      	mov	r1, sp
 800ae0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ae0e:	f000 fa85 	bl	800b31c <_svfiprintf_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	bfbc      	itt	lt
 800ae16:	238b      	movlt	r3, #139	; 0x8b
 800ae18:	602b      	strlt	r3, [r5, #0]
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	d0e3      	beq.n	800ade6 <_vsniprintf_r+0x16>
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
 800ae24:	e7df      	b.n	800ade6 <_vsniprintf_r+0x16>
	...

0800ae28 <vsniprintf>:
 800ae28:	b507      	push	{r0, r1, r2, lr}
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	460a      	mov	r2, r1
 800ae30:	4601      	mov	r1, r0
 800ae32:	4803      	ldr	r0, [pc, #12]	; (800ae40 <vsniprintf+0x18>)
 800ae34:	6800      	ldr	r0, [r0, #0]
 800ae36:	f7ff ffcb 	bl	800add0 <_vsniprintf_r>
 800ae3a:	b003      	add	sp, #12
 800ae3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae40:	20000058 	.word	0x20000058

0800ae44 <__assert_func>:
 800ae44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae46:	4614      	mov	r4, r2
 800ae48:	461a      	mov	r2, r3
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <__assert_func+0x2c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4605      	mov	r5, r0
 800ae50:	68d8      	ldr	r0, [r3, #12]
 800ae52:	b14c      	cbz	r4, 800ae68 <__assert_func+0x24>
 800ae54:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <__assert_func+0x30>)
 800ae56:	9100      	str	r1, [sp, #0]
 800ae58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae5c:	4906      	ldr	r1, [pc, #24]	; (800ae78 <__assert_func+0x34>)
 800ae5e:	462b      	mov	r3, r5
 800ae60:	f000 f8e4 	bl	800b02c <fiprintf>
 800ae64:	f000 ff6e 	bl	800bd44 <abort>
 800ae68:	4b04      	ldr	r3, [pc, #16]	; (800ae7c <__assert_func+0x38>)
 800ae6a:	461c      	mov	r4, r3
 800ae6c:	e7f3      	b.n	800ae56 <__assert_func+0x12>
 800ae6e:	bf00      	nop
 800ae70:	20000058 	.word	0x20000058
 800ae74:	0800cbd8 	.word	0x0800cbd8
 800ae78:	0800cbe5 	.word	0x0800cbe5
 800ae7c:	0800cc13 	.word	0x0800cc13

0800ae80 <std>:
 800ae80:	2300      	movs	r3, #0
 800ae82:	b510      	push	{r4, lr}
 800ae84:	4604      	mov	r4, r0
 800ae86:	e9c0 3300 	strd	r3, r3, [r0]
 800ae8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae8e:	6083      	str	r3, [r0, #8]
 800ae90:	8181      	strh	r1, [r0, #12]
 800ae92:	6643      	str	r3, [r0, #100]	; 0x64
 800ae94:	81c2      	strh	r2, [r0, #14]
 800ae96:	6183      	str	r3, [r0, #24]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	2208      	movs	r2, #8
 800ae9c:	305c      	adds	r0, #92	; 0x5c
 800ae9e:	f7ff fe1f 	bl	800aae0 <memset>
 800aea2:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <std+0x38>)
 800aea4:	6263      	str	r3, [r4, #36]	; 0x24
 800aea6:	4b05      	ldr	r3, [pc, #20]	; (800aebc <std+0x3c>)
 800aea8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <std+0x40>)
 800aeac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <std+0x44>)
 800aeb0:	6224      	str	r4, [r4, #32]
 800aeb2:	6323      	str	r3, [r4, #48]	; 0x30
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	bf00      	nop
 800aeb8:	0800bb19 	.word	0x0800bb19
 800aebc:	0800bb3b 	.word	0x0800bb3b
 800aec0:	0800bb73 	.word	0x0800bb73
 800aec4:	0800bb97 	.word	0x0800bb97

0800aec8 <_cleanup_r>:
 800aec8:	4901      	ldr	r1, [pc, #4]	; (800aed0 <_cleanup_r+0x8>)
 800aeca:	f000 b8c1 	b.w	800b050 <_fwalk_reent>
 800aece:	bf00      	nop
 800aed0:	0800be81 	.word	0x0800be81

0800aed4 <__sfmoreglue>:
 800aed4:	b570      	push	{r4, r5, r6, lr}
 800aed6:	2268      	movs	r2, #104	; 0x68
 800aed8:	1e4d      	subs	r5, r1, #1
 800aeda:	4355      	muls	r5, r2
 800aedc:	460e      	mov	r6, r1
 800aede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aee2:	f000 f94b 	bl	800b17c <_malloc_r>
 800aee6:	4604      	mov	r4, r0
 800aee8:	b140      	cbz	r0, 800aefc <__sfmoreglue+0x28>
 800aeea:	2100      	movs	r1, #0
 800aeec:	e9c0 1600 	strd	r1, r6, [r0]
 800aef0:	300c      	adds	r0, #12
 800aef2:	60a0      	str	r0, [r4, #8]
 800aef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aef8:	f7ff fdf2 	bl	800aae0 <memset>
 800aefc:	4620      	mov	r0, r4
 800aefe:	bd70      	pop	{r4, r5, r6, pc}

0800af00 <__sfp_lock_acquire>:
 800af00:	4801      	ldr	r0, [pc, #4]	; (800af08 <__sfp_lock_acquire+0x8>)
 800af02:	f000 b8c5 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800af06:	bf00      	nop
 800af08:	20005449 	.word	0x20005449

0800af0c <__sfp_lock_release>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__sfp_lock_release+0x8>)
 800af0e:	f000 b8c0 	b.w	800b092 <__retarget_lock_release_recursive>
 800af12:	bf00      	nop
 800af14:	20005449 	.word	0x20005449

0800af18 <__sinit_lock_acquire>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__sinit_lock_acquire+0x8>)
 800af1a:	f000 b8b9 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	2000544a 	.word	0x2000544a

0800af24 <__sinit_lock_release>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__sinit_lock_release+0x8>)
 800af26:	f000 b8b4 	b.w	800b092 <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	2000544a 	.word	0x2000544a

0800af30 <__sinit>:
 800af30:	b510      	push	{r4, lr}
 800af32:	4604      	mov	r4, r0
 800af34:	f7ff fff0 	bl	800af18 <__sinit_lock_acquire>
 800af38:	69a3      	ldr	r3, [r4, #24]
 800af3a:	b11b      	cbz	r3, 800af44 <__sinit+0x14>
 800af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af40:	f7ff bff0 	b.w	800af24 <__sinit_lock_release>
 800af44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af48:	6523      	str	r3, [r4, #80]	; 0x50
 800af4a:	4b13      	ldr	r3, [pc, #76]	; (800af98 <__sinit+0x68>)
 800af4c:	4a13      	ldr	r2, [pc, #76]	; (800af9c <__sinit+0x6c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	62a2      	str	r2, [r4, #40]	; 0x28
 800af52:	42a3      	cmp	r3, r4
 800af54:	bf04      	itt	eq
 800af56:	2301      	moveq	r3, #1
 800af58:	61a3      	streq	r3, [r4, #24]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 f820 	bl	800afa0 <__sfp>
 800af60:	6060      	str	r0, [r4, #4]
 800af62:	4620      	mov	r0, r4
 800af64:	f000 f81c 	bl	800afa0 <__sfp>
 800af68:	60a0      	str	r0, [r4, #8]
 800af6a:	4620      	mov	r0, r4
 800af6c:	f000 f818 	bl	800afa0 <__sfp>
 800af70:	2200      	movs	r2, #0
 800af72:	60e0      	str	r0, [r4, #12]
 800af74:	2104      	movs	r1, #4
 800af76:	6860      	ldr	r0, [r4, #4]
 800af78:	f7ff ff82 	bl	800ae80 <std>
 800af7c:	68a0      	ldr	r0, [r4, #8]
 800af7e:	2201      	movs	r2, #1
 800af80:	2109      	movs	r1, #9
 800af82:	f7ff ff7d 	bl	800ae80 <std>
 800af86:	68e0      	ldr	r0, [r4, #12]
 800af88:	2202      	movs	r2, #2
 800af8a:	2112      	movs	r1, #18
 800af8c:	f7ff ff78 	bl	800ae80 <std>
 800af90:	2301      	movs	r3, #1
 800af92:	61a3      	str	r3, [r4, #24]
 800af94:	e7d2      	b.n	800af3c <__sinit+0xc>
 800af96:	bf00      	nop
 800af98:	0800cb60 	.word	0x0800cb60
 800af9c:	0800aec9 	.word	0x0800aec9

0800afa0 <__sfp>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	4607      	mov	r7, r0
 800afa4:	f7ff ffac 	bl	800af00 <__sfp_lock_acquire>
 800afa8:	4b1e      	ldr	r3, [pc, #120]	; (800b024 <__sfp+0x84>)
 800afaa:	681e      	ldr	r6, [r3, #0]
 800afac:	69b3      	ldr	r3, [r6, #24]
 800afae:	b913      	cbnz	r3, 800afb6 <__sfp+0x16>
 800afb0:	4630      	mov	r0, r6
 800afb2:	f7ff ffbd 	bl	800af30 <__sinit>
 800afb6:	3648      	adds	r6, #72	; 0x48
 800afb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	d503      	bpl.n	800afc8 <__sfp+0x28>
 800afc0:	6833      	ldr	r3, [r6, #0]
 800afc2:	b30b      	cbz	r3, 800b008 <__sfp+0x68>
 800afc4:	6836      	ldr	r6, [r6, #0]
 800afc6:	e7f7      	b.n	800afb8 <__sfp+0x18>
 800afc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afcc:	b9d5      	cbnz	r5, 800b004 <__sfp+0x64>
 800afce:	4b16      	ldr	r3, [pc, #88]	; (800b028 <__sfp+0x88>)
 800afd0:	60e3      	str	r3, [r4, #12]
 800afd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afd6:	6665      	str	r5, [r4, #100]	; 0x64
 800afd8:	f000 f859 	bl	800b08e <__retarget_lock_init_recursive>
 800afdc:	f7ff ff96 	bl	800af0c <__sfp_lock_release>
 800afe0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afe4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afe8:	6025      	str	r5, [r4, #0]
 800afea:	61a5      	str	r5, [r4, #24]
 800afec:	2208      	movs	r2, #8
 800afee:	4629      	mov	r1, r5
 800aff0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aff4:	f7ff fd74 	bl	800aae0 <memset>
 800aff8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800affc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b000:	4620      	mov	r0, r4
 800b002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b004:	3468      	adds	r4, #104	; 0x68
 800b006:	e7d9      	b.n	800afbc <__sfp+0x1c>
 800b008:	2104      	movs	r1, #4
 800b00a:	4638      	mov	r0, r7
 800b00c:	f7ff ff62 	bl	800aed4 <__sfmoreglue>
 800b010:	4604      	mov	r4, r0
 800b012:	6030      	str	r0, [r6, #0]
 800b014:	2800      	cmp	r0, #0
 800b016:	d1d5      	bne.n	800afc4 <__sfp+0x24>
 800b018:	f7ff ff78 	bl	800af0c <__sfp_lock_release>
 800b01c:	230c      	movs	r3, #12
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	e7ee      	b.n	800b000 <__sfp+0x60>
 800b022:	bf00      	nop
 800b024:	0800cb60 	.word	0x0800cb60
 800b028:	ffff0001 	.word	0xffff0001

0800b02c <fiprintf>:
 800b02c:	b40e      	push	{r1, r2, r3}
 800b02e:	b503      	push	{r0, r1, lr}
 800b030:	4601      	mov	r1, r0
 800b032:	ab03      	add	r3, sp, #12
 800b034:	4805      	ldr	r0, [pc, #20]	; (800b04c <fiprintf+0x20>)
 800b036:	f853 2b04 	ldr.w	r2, [r3], #4
 800b03a:	6800      	ldr	r0, [r0, #0]
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	f000 fa97 	bl	800b570 <_vfiprintf_r>
 800b042:	b002      	add	sp, #8
 800b044:	f85d eb04 	ldr.w	lr, [sp], #4
 800b048:	b003      	add	sp, #12
 800b04a:	4770      	bx	lr
 800b04c:	20000058 	.word	0x20000058

0800b050 <_fwalk_reent>:
 800b050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b054:	4606      	mov	r6, r0
 800b056:	4688      	mov	r8, r1
 800b058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b05c:	2700      	movs	r7, #0
 800b05e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b062:	f1b9 0901 	subs.w	r9, r9, #1
 800b066:	d505      	bpl.n	800b074 <_fwalk_reent+0x24>
 800b068:	6824      	ldr	r4, [r4, #0]
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	d1f7      	bne.n	800b05e <_fwalk_reent+0xe>
 800b06e:	4638      	mov	r0, r7
 800b070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b074:	89ab      	ldrh	r3, [r5, #12]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d907      	bls.n	800b08a <_fwalk_reent+0x3a>
 800b07a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b07e:	3301      	adds	r3, #1
 800b080:	d003      	beq.n	800b08a <_fwalk_reent+0x3a>
 800b082:	4629      	mov	r1, r5
 800b084:	4630      	mov	r0, r6
 800b086:	47c0      	blx	r8
 800b088:	4307      	orrs	r7, r0
 800b08a:	3568      	adds	r5, #104	; 0x68
 800b08c:	e7e9      	b.n	800b062 <_fwalk_reent+0x12>

0800b08e <__retarget_lock_init_recursive>:
 800b08e:	4770      	bx	lr

0800b090 <__retarget_lock_acquire_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_release_recursive>:
 800b092:	4770      	bx	lr

0800b094 <malloc>:
 800b094:	4b02      	ldr	r3, [pc, #8]	; (800b0a0 <malloc+0xc>)
 800b096:	4601      	mov	r1, r0
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f000 b86f 	b.w	800b17c <_malloc_r>
 800b09e:	bf00      	nop
 800b0a0:	20000058 	.word	0x20000058

0800b0a4 <_free_r>:
 800b0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0a6:	2900      	cmp	r1, #0
 800b0a8:	d044      	beq.n	800b134 <_free_r+0x90>
 800b0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ae:	9001      	str	r0, [sp, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0b6:	bfb8      	it	lt
 800b0b8:	18e4      	addlt	r4, r4, r3
 800b0ba:	f000 ffaf 	bl	800c01c <__malloc_lock>
 800b0be:	4a1e      	ldr	r2, [pc, #120]	; (800b138 <_free_r+0x94>)
 800b0c0:	9801      	ldr	r0, [sp, #4]
 800b0c2:	6813      	ldr	r3, [r2, #0]
 800b0c4:	b933      	cbnz	r3, 800b0d4 <_free_r+0x30>
 800b0c6:	6063      	str	r3, [r4, #4]
 800b0c8:	6014      	str	r4, [r2, #0]
 800b0ca:	b003      	add	sp, #12
 800b0cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0d0:	f000 bfaa 	b.w	800c028 <__malloc_unlock>
 800b0d4:	42a3      	cmp	r3, r4
 800b0d6:	d908      	bls.n	800b0ea <_free_r+0x46>
 800b0d8:	6825      	ldr	r5, [r4, #0]
 800b0da:	1961      	adds	r1, r4, r5
 800b0dc:	428b      	cmp	r3, r1
 800b0de:	bf01      	itttt	eq
 800b0e0:	6819      	ldreq	r1, [r3, #0]
 800b0e2:	685b      	ldreq	r3, [r3, #4]
 800b0e4:	1949      	addeq	r1, r1, r5
 800b0e6:	6021      	streq	r1, [r4, #0]
 800b0e8:	e7ed      	b.n	800b0c6 <_free_r+0x22>
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	b10b      	cbz	r3, 800b0f4 <_free_r+0x50>
 800b0f0:	42a3      	cmp	r3, r4
 800b0f2:	d9fa      	bls.n	800b0ea <_free_r+0x46>
 800b0f4:	6811      	ldr	r1, [r2, #0]
 800b0f6:	1855      	adds	r5, r2, r1
 800b0f8:	42a5      	cmp	r5, r4
 800b0fa:	d10b      	bne.n	800b114 <_free_r+0x70>
 800b0fc:	6824      	ldr	r4, [r4, #0]
 800b0fe:	4421      	add	r1, r4
 800b100:	1854      	adds	r4, r2, r1
 800b102:	42a3      	cmp	r3, r4
 800b104:	6011      	str	r1, [r2, #0]
 800b106:	d1e0      	bne.n	800b0ca <_free_r+0x26>
 800b108:	681c      	ldr	r4, [r3, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	6053      	str	r3, [r2, #4]
 800b10e:	4421      	add	r1, r4
 800b110:	6011      	str	r1, [r2, #0]
 800b112:	e7da      	b.n	800b0ca <_free_r+0x26>
 800b114:	d902      	bls.n	800b11c <_free_r+0x78>
 800b116:	230c      	movs	r3, #12
 800b118:	6003      	str	r3, [r0, #0]
 800b11a:	e7d6      	b.n	800b0ca <_free_r+0x26>
 800b11c:	6825      	ldr	r5, [r4, #0]
 800b11e:	1961      	adds	r1, r4, r5
 800b120:	428b      	cmp	r3, r1
 800b122:	bf04      	itt	eq
 800b124:	6819      	ldreq	r1, [r3, #0]
 800b126:	685b      	ldreq	r3, [r3, #4]
 800b128:	6063      	str	r3, [r4, #4]
 800b12a:	bf04      	itt	eq
 800b12c:	1949      	addeq	r1, r1, r5
 800b12e:	6021      	streq	r1, [r4, #0]
 800b130:	6054      	str	r4, [r2, #4]
 800b132:	e7ca      	b.n	800b0ca <_free_r+0x26>
 800b134:	b003      	add	sp, #12
 800b136:	bd30      	pop	{r4, r5, pc}
 800b138:	2000544c 	.word	0x2000544c

0800b13c <sbrk_aligned>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	4e0e      	ldr	r6, [pc, #56]	; (800b178 <sbrk_aligned+0x3c>)
 800b140:	460c      	mov	r4, r1
 800b142:	6831      	ldr	r1, [r6, #0]
 800b144:	4605      	mov	r5, r0
 800b146:	b911      	cbnz	r1, 800b14e <sbrk_aligned+0x12>
 800b148:	f000 fcd6 	bl	800baf8 <_sbrk_r>
 800b14c:	6030      	str	r0, [r6, #0]
 800b14e:	4621      	mov	r1, r4
 800b150:	4628      	mov	r0, r5
 800b152:	f000 fcd1 	bl	800baf8 <_sbrk_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d00a      	beq.n	800b170 <sbrk_aligned+0x34>
 800b15a:	1cc4      	adds	r4, r0, #3
 800b15c:	f024 0403 	bic.w	r4, r4, #3
 800b160:	42a0      	cmp	r0, r4
 800b162:	d007      	beq.n	800b174 <sbrk_aligned+0x38>
 800b164:	1a21      	subs	r1, r4, r0
 800b166:	4628      	mov	r0, r5
 800b168:	f000 fcc6 	bl	800baf8 <_sbrk_r>
 800b16c:	3001      	adds	r0, #1
 800b16e:	d101      	bne.n	800b174 <sbrk_aligned+0x38>
 800b170:	f04f 34ff 	mov.w	r4, #4294967295
 800b174:	4620      	mov	r0, r4
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	20005450 	.word	0x20005450

0800b17c <_malloc_r>:
 800b17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b180:	1ccd      	adds	r5, r1, #3
 800b182:	f025 0503 	bic.w	r5, r5, #3
 800b186:	3508      	adds	r5, #8
 800b188:	2d0c      	cmp	r5, #12
 800b18a:	bf38      	it	cc
 800b18c:	250c      	movcc	r5, #12
 800b18e:	2d00      	cmp	r5, #0
 800b190:	4607      	mov	r7, r0
 800b192:	db01      	blt.n	800b198 <_malloc_r+0x1c>
 800b194:	42a9      	cmp	r1, r5
 800b196:	d905      	bls.n	800b1a4 <_malloc_r+0x28>
 800b198:	230c      	movs	r3, #12
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	2600      	movs	r6, #0
 800b19e:	4630      	mov	r0, r6
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	4e2e      	ldr	r6, [pc, #184]	; (800b260 <_malloc_r+0xe4>)
 800b1a6:	f000 ff39 	bl	800c01c <__malloc_lock>
 800b1aa:	6833      	ldr	r3, [r6, #0]
 800b1ac:	461c      	mov	r4, r3
 800b1ae:	bb34      	cbnz	r4, 800b1fe <_malloc_r+0x82>
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	f7ff ffc2 	bl	800b13c <sbrk_aligned>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	d14d      	bne.n	800b25a <_malloc_r+0xde>
 800b1be:	6834      	ldr	r4, [r6, #0]
 800b1c0:	4626      	mov	r6, r4
 800b1c2:	2e00      	cmp	r6, #0
 800b1c4:	d140      	bne.n	800b248 <_malloc_r+0xcc>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	eb04 0803 	add.w	r8, r4, r3
 800b1d0:	f000 fc92 	bl	800baf8 <_sbrk_r>
 800b1d4:	4580      	cmp	r8, r0
 800b1d6:	d13a      	bne.n	800b24e <_malloc_r+0xd2>
 800b1d8:	6821      	ldr	r1, [r4, #0]
 800b1da:	3503      	adds	r5, #3
 800b1dc:	1a6d      	subs	r5, r5, r1
 800b1de:	f025 0503 	bic.w	r5, r5, #3
 800b1e2:	3508      	adds	r5, #8
 800b1e4:	2d0c      	cmp	r5, #12
 800b1e6:	bf38      	it	cc
 800b1e8:	250c      	movcc	r5, #12
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	f7ff ffa5 	bl	800b13c <sbrk_aligned>
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	d02b      	beq.n	800b24e <_malloc_r+0xd2>
 800b1f6:	6823      	ldr	r3, [r4, #0]
 800b1f8:	442b      	add	r3, r5
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	e00e      	b.n	800b21c <_malloc_r+0xa0>
 800b1fe:	6822      	ldr	r2, [r4, #0]
 800b200:	1b52      	subs	r2, r2, r5
 800b202:	d41e      	bmi.n	800b242 <_malloc_r+0xc6>
 800b204:	2a0b      	cmp	r2, #11
 800b206:	d916      	bls.n	800b236 <_malloc_r+0xba>
 800b208:	1961      	adds	r1, r4, r5
 800b20a:	42a3      	cmp	r3, r4
 800b20c:	6025      	str	r5, [r4, #0]
 800b20e:	bf18      	it	ne
 800b210:	6059      	strne	r1, [r3, #4]
 800b212:	6863      	ldr	r3, [r4, #4]
 800b214:	bf08      	it	eq
 800b216:	6031      	streq	r1, [r6, #0]
 800b218:	5162      	str	r2, [r4, r5]
 800b21a:	604b      	str	r3, [r1, #4]
 800b21c:	4638      	mov	r0, r7
 800b21e:	f104 060b 	add.w	r6, r4, #11
 800b222:	f000 ff01 	bl	800c028 <__malloc_unlock>
 800b226:	f026 0607 	bic.w	r6, r6, #7
 800b22a:	1d23      	adds	r3, r4, #4
 800b22c:	1af2      	subs	r2, r6, r3
 800b22e:	d0b6      	beq.n	800b19e <_malloc_r+0x22>
 800b230:	1b9b      	subs	r3, r3, r6
 800b232:	50a3      	str	r3, [r4, r2]
 800b234:	e7b3      	b.n	800b19e <_malloc_r+0x22>
 800b236:	6862      	ldr	r2, [r4, #4]
 800b238:	42a3      	cmp	r3, r4
 800b23a:	bf0c      	ite	eq
 800b23c:	6032      	streq	r2, [r6, #0]
 800b23e:	605a      	strne	r2, [r3, #4]
 800b240:	e7ec      	b.n	800b21c <_malloc_r+0xa0>
 800b242:	4623      	mov	r3, r4
 800b244:	6864      	ldr	r4, [r4, #4]
 800b246:	e7b2      	b.n	800b1ae <_malloc_r+0x32>
 800b248:	4634      	mov	r4, r6
 800b24a:	6876      	ldr	r6, [r6, #4]
 800b24c:	e7b9      	b.n	800b1c2 <_malloc_r+0x46>
 800b24e:	230c      	movs	r3, #12
 800b250:	603b      	str	r3, [r7, #0]
 800b252:	4638      	mov	r0, r7
 800b254:	f000 fee8 	bl	800c028 <__malloc_unlock>
 800b258:	e7a1      	b.n	800b19e <_malloc_r+0x22>
 800b25a:	6025      	str	r5, [r4, #0]
 800b25c:	e7de      	b.n	800b21c <_malloc_r+0xa0>
 800b25e:	bf00      	nop
 800b260:	2000544c 	.word	0x2000544c

0800b264 <__ssputs_r>:
 800b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b268:	688e      	ldr	r6, [r1, #8]
 800b26a:	429e      	cmp	r6, r3
 800b26c:	4682      	mov	sl, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	4690      	mov	r8, r2
 800b272:	461f      	mov	r7, r3
 800b274:	d838      	bhi.n	800b2e8 <__ssputs_r+0x84>
 800b276:	898a      	ldrh	r2, [r1, #12]
 800b278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b27c:	d032      	beq.n	800b2e4 <__ssputs_r+0x80>
 800b27e:	6825      	ldr	r5, [r4, #0]
 800b280:	6909      	ldr	r1, [r1, #16]
 800b282:	eba5 0901 	sub.w	r9, r5, r1
 800b286:	6965      	ldr	r5, [r4, #20]
 800b288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b28c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b290:	3301      	adds	r3, #1
 800b292:	444b      	add	r3, r9
 800b294:	106d      	asrs	r5, r5, #1
 800b296:	429d      	cmp	r5, r3
 800b298:	bf38      	it	cc
 800b29a:	461d      	movcc	r5, r3
 800b29c:	0553      	lsls	r3, r2, #21
 800b29e:	d531      	bpl.n	800b304 <__ssputs_r+0xa0>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7ff ff6b 	bl	800b17c <_malloc_r>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	b950      	cbnz	r0, 800b2c0 <__ssputs_r+0x5c>
 800b2aa:	230c      	movs	r3, #12
 800b2ac:	f8ca 3000 	str.w	r3, [sl]
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c0:	6921      	ldr	r1, [r4, #16]
 800b2c2:	464a      	mov	r2, r9
 800b2c4:	f7ff fbfe 	bl	800aac4 <memcpy>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	6126      	str	r6, [r4, #16]
 800b2d6:	6165      	str	r5, [r4, #20]
 800b2d8:	444e      	add	r6, r9
 800b2da:	eba5 0509 	sub.w	r5, r5, r9
 800b2de:	6026      	str	r6, [r4, #0]
 800b2e0:	60a5      	str	r5, [r4, #8]
 800b2e2:	463e      	mov	r6, r7
 800b2e4:	42be      	cmp	r6, r7
 800b2e6:	d900      	bls.n	800b2ea <__ssputs_r+0x86>
 800b2e8:	463e      	mov	r6, r7
 800b2ea:	6820      	ldr	r0, [r4, #0]
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	4641      	mov	r1, r8
 800b2f0:	f000 fe7a 	bl	800bfe8 <memmove>
 800b2f4:	68a3      	ldr	r3, [r4, #8]
 800b2f6:	1b9b      	subs	r3, r3, r6
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	4433      	add	r3, r6
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	2000      	movs	r0, #0
 800b302:	e7db      	b.n	800b2bc <__ssputs_r+0x58>
 800b304:	462a      	mov	r2, r5
 800b306:	f000 fe95 	bl	800c034 <_realloc_r>
 800b30a:	4606      	mov	r6, r0
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1e1      	bne.n	800b2d4 <__ssputs_r+0x70>
 800b310:	6921      	ldr	r1, [r4, #16]
 800b312:	4650      	mov	r0, sl
 800b314:	f7ff fec6 	bl	800b0a4 <_free_r>
 800b318:	e7c7      	b.n	800b2aa <__ssputs_r+0x46>
	...

0800b31c <_svfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	4698      	mov	r8, r3
 800b322:	898b      	ldrh	r3, [r1, #12]
 800b324:	061b      	lsls	r3, r3, #24
 800b326:	b09d      	sub	sp, #116	; 0x74
 800b328:	4607      	mov	r7, r0
 800b32a:	460d      	mov	r5, r1
 800b32c:	4614      	mov	r4, r2
 800b32e:	d50e      	bpl.n	800b34e <_svfiprintf_r+0x32>
 800b330:	690b      	ldr	r3, [r1, #16]
 800b332:	b963      	cbnz	r3, 800b34e <_svfiprintf_r+0x32>
 800b334:	2140      	movs	r1, #64	; 0x40
 800b336:	f7ff ff21 	bl	800b17c <_malloc_r>
 800b33a:	6028      	str	r0, [r5, #0]
 800b33c:	6128      	str	r0, [r5, #16]
 800b33e:	b920      	cbnz	r0, 800b34a <_svfiprintf_r+0x2e>
 800b340:	230c      	movs	r3, #12
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	e0d1      	b.n	800b4ee <_svfiprintf_r+0x1d2>
 800b34a:	2340      	movs	r3, #64	; 0x40
 800b34c:	616b      	str	r3, [r5, #20]
 800b34e:	2300      	movs	r3, #0
 800b350:	9309      	str	r3, [sp, #36]	; 0x24
 800b352:	2320      	movs	r3, #32
 800b354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b358:	f8cd 800c 	str.w	r8, [sp, #12]
 800b35c:	2330      	movs	r3, #48	; 0x30
 800b35e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b508 <_svfiprintf_r+0x1ec>
 800b362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b366:	f04f 0901 	mov.w	r9, #1
 800b36a:	4623      	mov	r3, r4
 800b36c:	469a      	mov	sl, r3
 800b36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b372:	b10a      	cbz	r2, 800b378 <_svfiprintf_r+0x5c>
 800b374:	2a25      	cmp	r2, #37	; 0x25
 800b376:	d1f9      	bne.n	800b36c <_svfiprintf_r+0x50>
 800b378:	ebba 0b04 	subs.w	fp, sl, r4
 800b37c:	d00b      	beq.n	800b396 <_svfiprintf_r+0x7a>
 800b37e:	465b      	mov	r3, fp
 800b380:	4622      	mov	r2, r4
 800b382:	4629      	mov	r1, r5
 800b384:	4638      	mov	r0, r7
 800b386:	f7ff ff6d 	bl	800b264 <__ssputs_r>
 800b38a:	3001      	adds	r0, #1
 800b38c:	f000 80aa 	beq.w	800b4e4 <_svfiprintf_r+0x1c8>
 800b390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b392:	445a      	add	r2, fp
 800b394:	9209      	str	r2, [sp, #36]	; 0x24
 800b396:	f89a 3000 	ldrb.w	r3, [sl]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 80a2 	beq.w	800b4e4 <_svfiprintf_r+0x1c8>
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3aa:	f10a 0a01 	add.w	sl, sl, #1
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	9307      	str	r3, [sp, #28]
 800b3b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3b6:	931a      	str	r3, [sp, #104]	; 0x68
 800b3b8:	4654      	mov	r4, sl
 800b3ba:	2205      	movs	r2, #5
 800b3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c0:	4851      	ldr	r0, [pc, #324]	; (800b508 <_svfiprintf_r+0x1ec>)
 800b3c2:	f7f4 fef5 	bl	80001b0 <memchr>
 800b3c6:	9a04      	ldr	r2, [sp, #16]
 800b3c8:	b9d8      	cbnz	r0, 800b402 <_svfiprintf_r+0xe6>
 800b3ca:	06d0      	lsls	r0, r2, #27
 800b3cc:	bf44      	itt	mi
 800b3ce:	2320      	movmi	r3, #32
 800b3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3d4:	0711      	lsls	r1, r2, #28
 800b3d6:	bf44      	itt	mi
 800b3d8:	232b      	movmi	r3, #43	; 0x2b
 800b3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3de:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3e4:	d015      	beq.n	800b412 <_svfiprintf_r+0xf6>
 800b3e6:	9a07      	ldr	r2, [sp, #28]
 800b3e8:	4654      	mov	r4, sl
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	f04f 0c0a 	mov.w	ip, #10
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3f6:	3b30      	subs	r3, #48	; 0x30
 800b3f8:	2b09      	cmp	r3, #9
 800b3fa:	d94e      	bls.n	800b49a <_svfiprintf_r+0x17e>
 800b3fc:	b1b0      	cbz	r0, 800b42c <_svfiprintf_r+0x110>
 800b3fe:	9207      	str	r2, [sp, #28]
 800b400:	e014      	b.n	800b42c <_svfiprintf_r+0x110>
 800b402:	eba0 0308 	sub.w	r3, r0, r8
 800b406:	fa09 f303 	lsl.w	r3, r9, r3
 800b40a:	4313      	orrs	r3, r2
 800b40c:	9304      	str	r3, [sp, #16]
 800b40e:	46a2      	mov	sl, r4
 800b410:	e7d2      	b.n	800b3b8 <_svfiprintf_r+0x9c>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	1d19      	adds	r1, r3, #4
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	9103      	str	r1, [sp, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	bfbb      	ittet	lt
 800b41e:	425b      	neglt	r3, r3
 800b420:	f042 0202 	orrlt.w	r2, r2, #2
 800b424:	9307      	strge	r3, [sp, #28]
 800b426:	9307      	strlt	r3, [sp, #28]
 800b428:	bfb8      	it	lt
 800b42a:	9204      	strlt	r2, [sp, #16]
 800b42c:	7823      	ldrb	r3, [r4, #0]
 800b42e:	2b2e      	cmp	r3, #46	; 0x2e
 800b430:	d10c      	bne.n	800b44c <_svfiprintf_r+0x130>
 800b432:	7863      	ldrb	r3, [r4, #1]
 800b434:	2b2a      	cmp	r3, #42	; 0x2a
 800b436:	d135      	bne.n	800b4a4 <_svfiprintf_r+0x188>
 800b438:	9b03      	ldr	r3, [sp, #12]
 800b43a:	1d1a      	adds	r2, r3, #4
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	9203      	str	r2, [sp, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	bfb8      	it	lt
 800b444:	f04f 33ff 	movlt.w	r3, #4294967295
 800b448:	3402      	adds	r4, #2
 800b44a:	9305      	str	r3, [sp, #20]
 800b44c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b518 <_svfiprintf_r+0x1fc>
 800b450:	7821      	ldrb	r1, [r4, #0]
 800b452:	2203      	movs	r2, #3
 800b454:	4650      	mov	r0, sl
 800b456:	f7f4 feab 	bl	80001b0 <memchr>
 800b45a:	b140      	cbz	r0, 800b46e <_svfiprintf_r+0x152>
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	eba0 000a 	sub.w	r0, r0, sl
 800b462:	fa03 f000 	lsl.w	r0, r3, r0
 800b466:	9b04      	ldr	r3, [sp, #16]
 800b468:	4303      	orrs	r3, r0
 800b46a:	3401      	adds	r4, #1
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b472:	4826      	ldr	r0, [pc, #152]	; (800b50c <_svfiprintf_r+0x1f0>)
 800b474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b478:	2206      	movs	r2, #6
 800b47a:	f7f4 fe99 	bl	80001b0 <memchr>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d038      	beq.n	800b4f4 <_svfiprintf_r+0x1d8>
 800b482:	4b23      	ldr	r3, [pc, #140]	; (800b510 <_svfiprintf_r+0x1f4>)
 800b484:	bb1b      	cbnz	r3, 800b4ce <_svfiprintf_r+0x1b2>
 800b486:	9b03      	ldr	r3, [sp, #12]
 800b488:	3307      	adds	r3, #7
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	3308      	adds	r3, #8
 800b490:	9303      	str	r3, [sp, #12]
 800b492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b494:	4433      	add	r3, r6
 800b496:	9309      	str	r3, [sp, #36]	; 0x24
 800b498:	e767      	b.n	800b36a <_svfiprintf_r+0x4e>
 800b49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b49e:	460c      	mov	r4, r1
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	e7a5      	b.n	800b3f0 <_svfiprintf_r+0xd4>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	3401      	adds	r4, #1
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	f04f 0c0a 	mov.w	ip, #10
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b6:	3a30      	subs	r2, #48	; 0x30
 800b4b8:	2a09      	cmp	r2, #9
 800b4ba:	d903      	bls.n	800b4c4 <_svfiprintf_r+0x1a8>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0c5      	beq.n	800b44c <_svfiprintf_r+0x130>
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	e7c3      	b.n	800b44c <_svfiprintf_r+0x130>
 800b4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7f0      	b.n	800b4b0 <_svfiprintf_r+0x194>
 800b4ce:	ab03      	add	r3, sp, #12
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <_svfiprintf_r+0x1f8>)
 800b4d6:	a904      	add	r1, sp, #16
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f3af 8000 	nop.w
 800b4de:	1c42      	adds	r2, r0, #1
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	d1d6      	bne.n	800b492 <_svfiprintf_r+0x176>
 800b4e4:	89ab      	ldrh	r3, [r5, #12]
 800b4e6:	065b      	lsls	r3, r3, #25
 800b4e8:	f53f af2c 	bmi.w	800b344 <_svfiprintf_r+0x28>
 800b4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4ee:	b01d      	add	sp, #116	; 0x74
 800b4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f4:	ab03      	add	r3, sp, #12
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	4b06      	ldr	r3, [pc, #24]	; (800b514 <_svfiprintf_r+0x1f8>)
 800b4fc:	a904      	add	r1, sp, #16
 800b4fe:	4638      	mov	r0, r7
 800b500:	f000 f9d4 	bl	800b8ac <_printf_i>
 800b504:	e7eb      	b.n	800b4de <_svfiprintf_r+0x1c2>
 800b506:	bf00      	nop
 800b508:	0800cd78 	.word	0x0800cd78
 800b50c:	0800cd82 	.word	0x0800cd82
 800b510:	00000000 	.word	0x00000000
 800b514:	0800b265 	.word	0x0800b265
 800b518:	0800cd7e 	.word	0x0800cd7e

0800b51c <__sfputc_r>:
 800b51c:	6893      	ldr	r3, [r2, #8]
 800b51e:	3b01      	subs	r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	b410      	push	{r4}
 800b524:	6093      	str	r3, [r2, #8]
 800b526:	da08      	bge.n	800b53a <__sfputc_r+0x1e>
 800b528:	6994      	ldr	r4, [r2, #24]
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	db01      	blt.n	800b532 <__sfputc_r+0x16>
 800b52e:	290a      	cmp	r1, #10
 800b530:	d103      	bne.n	800b53a <__sfputc_r+0x1e>
 800b532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b536:	f000 bb33 	b.w	800bba0 <__swbuf_r>
 800b53a:	6813      	ldr	r3, [r2, #0]
 800b53c:	1c58      	adds	r0, r3, #1
 800b53e:	6010      	str	r0, [r2, #0]
 800b540:	7019      	strb	r1, [r3, #0]
 800b542:	4608      	mov	r0, r1
 800b544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <__sfputs_r>:
 800b54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	4614      	mov	r4, r2
 800b552:	18d5      	adds	r5, r2, r3
 800b554:	42ac      	cmp	r4, r5
 800b556:	d101      	bne.n	800b55c <__sfputs_r+0x12>
 800b558:	2000      	movs	r0, #0
 800b55a:	e007      	b.n	800b56c <__sfputs_r+0x22>
 800b55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b560:	463a      	mov	r2, r7
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ffda 	bl	800b51c <__sfputc_r>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d1f3      	bne.n	800b554 <__sfputs_r+0xa>
 800b56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b570 <_vfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	460d      	mov	r5, r1
 800b576:	b09d      	sub	sp, #116	; 0x74
 800b578:	4614      	mov	r4, r2
 800b57a:	4698      	mov	r8, r3
 800b57c:	4606      	mov	r6, r0
 800b57e:	b118      	cbz	r0, 800b588 <_vfiprintf_r+0x18>
 800b580:	6983      	ldr	r3, [r0, #24]
 800b582:	b90b      	cbnz	r3, 800b588 <_vfiprintf_r+0x18>
 800b584:	f7ff fcd4 	bl	800af30 <__sinit>
 800b588:	4b89      	ldr	r3, [pc, #548]	; (800b7b0 <_vfiprintf_r+0x240>)
 800b58a:	429d      	cmp	r5, r3
 800b58c:	d11b      	bne.n	800b5c6 <_vfiprintf_r+0x56>
 800b58e:	6875      	ldr	r5, [r6, #4]
 800b590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b592:	07d9      	lsls	r1, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_vfiprintf_r+0x32>
 800b596:	89ab      	ldrh	r3, [r5, #12]
 800b598:	059a      	lsls	r2, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_vfiprintf_r+0x32>
 800b59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b59e:	f7ff fd77 	bl	800b090 <__retarget_lock_acquire_recursive>
 800b5a2:	89ab      	ldrh	r3, [r5, #12]
 800b5a4:	071b      	lsls	r3, r3, #28
 800b5a6:	d501      	bpl.n	800b5ac <_vfiprintf_r+0x3c>
 800b5a8:	692b      	ldr	r3, [r5, #16]
 800b5aa:	b9eb      	cbnz	r3, 800b5e8 <_vfiprintf_r+0x78>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f000 fb5a 	bl	800bc68 <__swsetup_r>
 800b5b4:	b1c0      	cbz	r0, 800b5e8 <_vfiprintf_r+0x78>
 800b5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5b8:	07dc      	lsls	r4, r3, #31
 800b5ba:	d50e      	bpl.n	800b5da <_vfiprintf_r+0x6a>
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	b01d      	add	sp, #116	; 0x74
 800b5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c6:	4b7b      	ldr	r3, [pc, #492]	; (800b7b4 <_vfiprintf_r+0x244>)
 800b5c8:	429d      	cmp	r5, r3
 800b5ca:	d101      	bne.n	800b5d0 <_vfiprintf_r+0x60>
 800b5cc:	68b5      	ldr	r5, [r6, #8]
 800b5ce:	e7df      	b.n	800b590 <_vfiprintf_r+0x20>
 800b5d0:	4b79      	ldr	r3, [pc, #484]	; (800b7b8 <_vfiprintf_r+0x248>)
 800b5d2:	429d      	cmp	r5, r3
 800b5d4:	bf08      	it	eq
 800b5d6:	68f5      	ldreq	r5, [r6, #12]
 800b5d8:	e7da      	b.n	800b590 <_vfiprintf_r+0x20>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	0598      	lsls	r0, r3, #22
 800b5de:	d4ed      	bmi.n	800b5bc <_vfiprintf_r+0x4c>
 800b5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5e2:	f7ff fd56 	bl	800b092 <__retarget_lock_release_recursive>
 800b5e6:	e7e9      	b.n	800b5bc <_vfiprintf_r+0x4c>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ec:	2320      	movs	r3, #32
 800b5ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5f6:	2330      	movs	r3, #48	; 0x30
 800b5f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7bc <_vfiprintf_r+0x24c>
 800b5fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b600:	f04f 0901 	mov.w	r9, #1
 800b604:	4623      	mov	r3, r4
 800b606:	469a      	mov	sl, r3
 800b608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b60c:	b10a      	cbz	r2, 800b612 <_vfiprintf_r+0xa2>
 800b60e:	2a25      	cmp	r2, #37	; 0x25
 800b610:	d1f9      	bne.n	800b606 <_vfiprintf_r+0x96>
 800b612:	ebba 0b04 	subs.w	fp, sl, r4
 800b616:	d00b      	beq.n	800b630 <_vfiprintf_r+0xc0>
 800b618:	465b      	mov	r3, fp
 800b61a:	4622      	mov	r2, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	4630      	mov	r0, r6
 800b620:	f7ff ff93 	bl	800b54a <__sfputs_r>
 800b624:	3001      	adds	r0, #1
 800b626:	f000 80aa 	beq.w	800b77e <_vfiprintf_r+0x20e>
 800b62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b62c:	445a      	add	r2, fp
 800b62e:	9209      	str	r2, [sp, #36]	; 0x24
 800b630:	f89a 3000 	ldrb.w	r3, [sl]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 80a2 	beq.w	800b77e <_vfiprintf_r+0x20e>
 800b63a:	2300      	movs	r3, #0
 800b63c:	f04f 32ff 	mov.w	r2, #4294967295
 800b640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b644:	f10a 0a01 	add.w	sl, sl, #1
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	9307      	str	r3, [sp, #28]
 800b64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b650:	931a      	str	r3, [sp, #104]	; 0x68
 800b652:	4654      	mov	r4, sl
 800b654:	2205      	movs	r2, #5
 800b656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65a:	4858      	ldr	r0, [pc, #352]	; (800b7bc <_vfiprintf_r+0x24c>)
 800b65c:	f7f4 fda8 	bl	80001b0 <memchr>
 800b660:	9a04      	ldr	r2, [sp, #16]
 800b662:	b9d8      	cbnz	r0, 800b69c <_vfiprintf_r+0x12c>
 800b664:	06d1      	lsls	r1, r2, #27
 800b666:	bf44      	itt	mi
 800b668:	2320      	movmi	r3, #32
 800b66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b66e:	0713      	lsls	r3, r2, #28
 800b670:	bf44      	itt	mi
 800b672:	232b      	movmi	r3, #43	; 0x2b
 800b674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b678:	f89a 3000 	ldrb.w	r3, [sl]
 800b67c:	2b2a      	cmp	r3, #42	; 0x2a
 800b67e:	d015      	beq.n	800b6ac <_vfiprintf_r+0x13c>
 800b680:	9a07      	ldr	r2, [sp, #28]
 800b682:	4654      	mov	r4, sl
 800b684:	2000      	movs	r0, #0
 800b686:	f04f 0c0a 	mov.w	ip, #10
 800b68a:	4621      	mov	r1, r4
 800b68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b690:	3b30      	subs	r3, #48	; 0x30
 800b692:	2b09      	cmp	r3, #9
 800b694:	d94e      	bls.n	800b734 <_vfiprintf_r+0x1c4>
 800b696:	b1b0      	cbz	r0, 800b6c6 <_vfiprintf_r+0x156>
 800b698:	9207      	str	r2, [sp, #28]
 800b69a:	e014      	b.n	800b6c6 <_vfiprintf_r+0x156>
 800b69c:	eba0 0308 	sub.w	r3, r0, r8
 800b6a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	9304      	str	r3, [sp, #16]
 800b6a8:	46a2      	mov	sl, r4
 800b6aa:	e7d2      	b.n	800b652 <_vfiprintf_r+0xe2>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	1d19      	adds	r1, r3, #4
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	9103      	str	r1, [sp, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bfbb      	ittet	lt
 800b6b8:	425b      	neglt	r3, r3
 800b6ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b6be:	9307      	strge	r3, [sp, #28]
 800b6c0:	9307      	strlt	r3, [sp, #28]
 800b6c2:	bfb8      	it	lt
 800b6c4:	9204      	strlt	r2, [sp, #16]
 800b6c6:	7823      	ldrb	r3, [r4, #0]
 800b6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ca:	d10c      	bne.n	800b6e6 <_vfiprintf_r+0x176>
 800b6cc:	7863      	ldrb	r3, [r4, #1]
 800b6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d0:	d135      	bne.n	800b73e <_vfiprintf_r+0x1ce>
 800b6d2:	9b03      	ldr	r3, [sp, #12]
 800b6d4:	1d1a      	adds	r2, r3, #4
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	9203      	str	r2, [sp, #12]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	bfb8      	it	lt
 800b6de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6e2:	3402      	adds	r4, #2
 800b6e4:	9305      	str	r3, [sp, #20]
 800b6e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b7cc <_vfiprintf_r+0x25c>
 800b6ea:	7821      	ldrb	r1, [r4, #0]
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	f7f4 fd5e 	bl	80001b0 <memchr>
 800b6f4:	b140      	cbz	r0, 800b708 <_vfiprintf_r+0x198>
 800b6f6:	2340      	movs	r3, #64	; 0x40
 800b6f8:	eba0 000a 	sub.w	r0, r0, sl
 800b6fc:	fa03 f000 	lsl.w	r0, r3, r0
 800b700:	9b04      	ldr	r3, [sp, #16]
 800b702:	4303      	orrs	r3, r0
 800b704:	3401      	adds	r4, #1
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70c:	482c      	ldr	r0, [pc, #176]	; (800b7c0 <_vfiprintf_r+0x250>)
 800b70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b712:	2206      	movs	r2, #6
 800b714:	f7f4 fd4c 	bl	80001b0 <memchr>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d03f      	beq.n	800b79c <_vfiprintf_r+0x22c>
 800b71c:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <_vfiprintf_r+0x254>)
 800b71e:	bb1b      	cbnz	r3, 800b768 <_vfiprintf_r+0x1f8>
 800b720:	9b03      	ldr	r3, [sp, #12]
 800b722:	3307      	adds	r3, #7
 800b724:	f023 0307 	bic.w	r3, r3, #7
 800b728:	3308      	adds	r3, #8
 800b72a:	9303      	str	r3, [sp, #12]
 800b72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b72e:	443b      	add	r3, r7
 800b730:	9309      	str	r3, [sp, #36]	; 0x24
 800b732:	e767      	b.n	800b604 <_vfiprintf_r+0x94>
 800b734:	fb0c 3202 	mla	r2, ip, r2, r3
 800b738:	460c      	mov	r4, r1
 800b73a:	2001      	movs	r0, #1
 800b73c:	e7a5      	b.n	800b68a <_vfiprintf_r+0x11a>
 800b73e:	2300      	movs	r3, #0
 800b740:	3401      	adds	r4, #1
 800b742:	9305      	str	r3, [sp, #20]
 800b744:	4619      	mov	r1, r3
 800b746:	f04f 0c0a 	mov.w	ip, #10
 800b74a:	4620      	mov	r0, r4
 800b74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b750:	3a30      	subs	r2, #48	; 0x30
 800b752:	2a09      	cmp	r2, #9
 800b754:	d903      	bls.n	800b75e <_vfiprintf_r+0x1ee>
 800b756:	2b00      	cmp	r3, #0
 800b758:	d0c5      	beq.n	800b6e6 <_vfiprintf_r+0x176>
 800b75a:	9105      	str	r1, [sp, #20]
 800b75c:	e7c3      	b.n	800b6e6 <_vfiprintf_r+0x176>
 800b75e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b762:	4604      	mov	r4, r0
 800b764:	2301      	movs	r3, #1
 800b766:	e7f0      	b.n	800b74a <_vfiprintf_r+0x1da>
 800b768:	ab03      	add	r3, sp, #12
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	462a      	mov	r2, r5
 800b76e:	4b16      	ldr	r3, [pc, #88]	; (800b7c8 <_vfiprintf_r+0x258>)
 800b770:	a904      	add	r1, sp, #16
 800b772:	4630      	mov	r0, r6
 800b774:	f3af 8000 	nop.w
 800b778:	4607      	mov	r7, r0
 800b77a:	1c78      	adds	r0, r7, #1
 800b77c:	d1d6      	bne.n	800b72c <_vfiprintf_r+0x1bc>
 800b77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b780:	07d9      	lsls	r1, r3, #31
 800b782:	d405      	bmi.n	800b790 <_vfiprintf_r+0x220>
 800b784:	89ab      	ldrh	r3, [r5, #12]
 800b786:	059a      	lsls	r2, r3, #22
 800b788:	d402      	bmi.n	800b790 <_vfiprintf_r+0x220>
 800b78a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b78c:	f7ff fc81 	bl	800b092 <__retarget_lock_release_recursive>
 800b790:	89ab      	ldrh	r3, [r5, #12]
 800b792:	065b      	lsls	r3, r3, #25
 800b794:	f53f af12 	bmi.w	800b5bc <_vfiprintf_r+0x4c>
 800b798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b79a:	e711      	b.n	800b5c0 <_vfiprintf_r+0x50>
 800b79c:	ab03      	add	r3, sp, #12
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <_vfiprintf_r+0x258>)
 800b7a4:	a904      	add	r1, sp, #16
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f000 f880 	bl	800b8ac <_printf_i>
 800b7ac:	e7e4      	b.n	800b778 <_vfiprintf_r+0x208>
 800b7ae:	bf00      	nop
 800b7b0:	0800cd38 	.word	0x0800cd38
 800b7b4:	0800cd58 	.word	0x0800cd58
 800b7b8:	0800cd18 	.word	0x0800cd18
 800b7bc:	0800cd78 	.word	0x0800cd78
 800b7c0:	0800cd82 	.word	0x0800cd82
 800b7c4:	00000000 	.word	0x00000000
 800b7c8:	0800b54b 	.word	0x0800b54b
 800b7cc:	0800cd7e 	.word	0x0800cd7e

0800b7d0 <_printf_common>:
 800b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	4699      	mov	r9, r3
 800b7d8:	688a      	ldr	r2, [r1, #8]
 800b7da:	690b      	ldr	r3, [r1, #16]
 800b7dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	bfb8      	it	lt
 800b7e4:	4613      	movlt	r3, r2
 800b7e6:	6033      	str	r3, [r6, #0]
 800b7e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7ec:	4607      	mov	r7, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	b10a      	cbz	r2, 800b7f6 <_printf_common+0x26>
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	6033      	str	r3, [r6, #0]
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	0699      	lsls	r1, r3, #26
 800b7fa:	bf42      	ittt	mi
 800b7fc:	6833      	ldrmi	r3, [r6, #0]
 800b7fe:	3302      	addmi	r3, #2
 800b800:	6033      	strmi	r3, [r6, #0]
 800b802:	6825      	ldr	r5, [r4, #0]
 800b804:	f015 0506 	ands.w	r5, r5, #6
 800b808:	d106      	bne.n	800b818 <_printf_common+0x48>
 800b80a:	f104 0a19 	add.w	sl, r4, #25
 800b80e:	68e3      	ldr	r3, [r4, #12]
 800b810:	6832      	ldr	r2, [r6, #0]
 800b812:	1a9b      	subs	r3, r3, r2
 800b814:	42ab      	cmp	r3, r5
 800b816:	dc26      	bgt.n	800b866 <_printf_common+0x96>
 800b818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b81c:	1e13      	subs	r3, r2, #0
 800b81e:	6822      	ldr	r2, [r4, #0]
 800b820:	bf18      	it	ne
 800b822:	2301      	movne	r3, #1
 800b824:	0692      	lsls	r2, r2, #26
 800b826:	d42b      	bmi.n	800b880 <_printf_common+0xb0>
 800b828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b82c:	4649      	mov	r1, r9
 800b82e:	4638      	mov	r0, r7
 800b830:	47c0      	blx	r8
 800b832:	3001      	adds	r0, #1
 800b834:	d01e      	beq.n	800b874 <_printf_common+0xa4>
 800b836:	6823      	ldr	r3, [r4, #0]
 800b838:	68e5      	ldr	r5, [r4, #12]
 800b83a:	6832      	ldr	r2, [r6, #0]
 800b83c:	f003 0306 	and.w	r3, r3, #6
 800b840:	2b04      	cmp	r3, #4
 800b842:	bf08      	it	eq
 800b844:	1aad      	subeq	r5, r5, r2
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	6922      	ldr	r2, [r4, #16]
 800b84a:	bf0c      	ite	eq
 800b84c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b850:	2500      	movne	r5, #0
 800b852:	4293      	cmp	r3, r2
 800b854:	bfc4      	itt	gt
 800b856:	1a9b      	subgt	r3, r3, r2
 800b858:	18ed      	addgt	r5, r5, r3
 800b85a:	2600      	movs	r6, #0
 800b85c:	341a      	adds	r4, #26
 800b85e:	42b5      	cmp	r5, r6
 800b860:	d11a      	bne.n	800b898 <_printf_common+0xc8>
 800b862:	2000      	movs	r0, #0
 800b864:	e008      	b.n	800b878 <_printf_common+0xa8>
 800b866:	2301      	movs	r3, #1
 800b868:	4652      	mov	r2, sl
 800b86a:	4649      	mov	r1, r9
 800b86c:	4638      	mov	r0, r7
 800b86e:	47c0      	blx	r8
 800b870:	3001      	adds	r0, #1
 800b872:	d103      	bne.n	800b87c <_printf_common+0xac>
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b87c:	3501      	adds	r5, #1
 800b87e:	e7c6      	b.n	800b80e <_printf_common+0x3e>
 800b880:	18e1      	adds	r1, r4, r3
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	2030      	movs	r0, #48	; 0x30
 800b886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b88a:	4422      	add	r2, r4
 800b88c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b894:	3302      	adds	r3, #2
 800b896:	e7c7      	b.n	800b828 <_printf_common+0x58>
 800b898:	2301      	movs	r3, #1
 800b89a:	4622      	mov	r2, r4
 800b89c:	4649      	mov	r1, r9
 800b89e:	4638      	mov	r0, r7
 800b8a0:	47c0      	blx	r8
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	d0e6      	beq.n	800b874 <_printf_common+0xa4>
 800b8a6:	3601      	adds	r6, #1
 800b8a8:	e7d9      	b.n	800b85e <_printf_common+0x8e>
	...

0800b8ac <_printf_i>:
 800b8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b0:	7e0f      	ldrb	r7, [r1, #24]
 800b8b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8b4:	2f78      	cmp	r7, #120	; 0x78
 800b8b6:	4691      	mov	r9, r2
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	469a      	mov	sl, r3
 800b8be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8c2:	d807      	bhi.n	800b8d4 <_printf_i+0x28>
 800b8c4:	2f62      	cmp	r7, #98	; 0x62
 800b8c6:	d80a      	bhi.n	800b8de <_printf_i+0x32>
 800b8c8:	2f00      	cmp	r7, #0
 800b8ca:	f000 80d8 	beq.w	800ba7e <_printf_i+0x1d2>
 800b8ce:	2f58      	cmp	r7, #88	; 0x58
 800b8d0:	f000 80a3 	beq.w	800ba1a <_printf_i+0x16e>
 800b8d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8dc:	e03a      	b.n	800b954 <_printf_i+0xa8>
 800b8de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8e2:	2b15      	cmp	r3, #21
 800b8e4:	d8f6      	bhi.n	800b8d4 <_printf_i+0x28>
 800b8e6:	a101      	add	r1, pc, #4	; (adr r1, 800b8ec <_printf_i+0x40>)
 800b8e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8ec:	0800b945 	.word	0x0800b945
 800b8f0:	0800b959 	.word	0x0800b959
 800b8f4:	0800b8d5 	.word	0x0800b8d5
 800b8f8:	0800b8d5 	.word	0x0800b8d5
 800b8fc:	0800b8d5 	.word	0x0800b8d5
 800b900:	0800b8d5 	.word	0x0800b8d5
 800b904:	0800b959 	.word	0x0800b959
 800b908:	0800b8d5 	.word	0x0800b8d5
 800b90c:	0800b8d5 	.word	0x0800b8d5
 800b910:	0800b8d5 	.word	0x0800b8d5
 800b914:	0800b8d5 	.word	0x0800b8d5
 800b918:	0800ba65 	.word	0x0800ba65
 800b91c:	0800b989 	.word	0x0800b989
 800b920:	0800ba47 	.word	0x0800ba47
 800b924:	0800b8d5 	.word	0x0800b8d5
 800b928:	0800b8d5 	.word	0x0800b8d5
 800b92c:	0800ba87 	.word	0x0800ba87
 800b930:	0800b8d5 	.word	0x0800b8d5
 800b934:	0800b989 	.word	0x0800b989
 800b938:	0800b8d5 	.word	0x0800b8d5
 800b93c:	0800b8d5 	.word	0x0800b8d5
 800b940:	0800ba4f 	.word	0x0800ba4f
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	1d1a      	adds	r2, r3, #4
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	602a      	str	r2, [r5, #0]
 800b94c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b954:	2301      	movs	r3, #1
 800b956:	e0a3      	b.n	800baa0 <_printf_i+0x1f4>
 800b958:	6820      	ldr	r0, [r4, #0]
 800b95a:	6829      	ldr	r1, [r5, #0]
 800b95c:	0606      	lsls	r6, r0, #24
 800b95e:	f101 0304 	add.w	r3, r1, #4
 800b962:	d50a      	bpl.n	800b97a <_printf_i+0xce>
 800b964:	680e      	ldr	r6, [r1, #0]
 800b966:	602b      	str	r3, [r5, #0]
 800b968:	2e00      	cmp	r6, #0
 800b96a:	da03      	bge.n	800b974 <_printf_i+0xc8>
 800b96c:	232d      	movs	r3, #45	; 0x2d
 800b96e:	4276      	negs	r6, r6
 800b970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b974:	485e      	ldr	r0, [pc, #376]	; (800baf0 <_printf_i+0x244>)
 800b976:	230a      	movs	r3, #10
 800b978:	e019      	b.n	800b9ae <_printf_i+0x102>
 800b97a:	680e      	ldr	r6, [r1, #0]
 800b97c:	602b      	str	r3, [r5, #0]
 800b97e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b982:	bf18      	it	ne
 800b984:	b236      	sxthne	r6, r6
 800b986:	e7ef      	b.n	800b968 <_printf_i+0xbc>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	6820      	ldr	r0, [r4, #0]
 800b98c:	1d19      	adds	r1, r3, #4
 800b98e:	6029      	str	r1, [r5, #0]
 800b990:	0601      	lsls	r1, r0, #24
 800b992:	d501      	bpl.n	800b998 <_printf_i+0xec>
 800b994:	681e      	ldr	r6, [r3, #0]
 800b996:	e002      	b.n	800b99e <_printf_i+0xf2>
 800b998:	0646      	lsls	r6, r0, #25
 800b99a:	d5fb      	bpl.n	800b994 <_printf_i+0xe8>
 800b99c:	881e      	ldrh	r6, [r3, #0]
 800b99e:	4854      	ldr	r0, [pc, #336]	; (800baf0 <_printf_i+0x244>)
 800b9a0:	2f6f      	cmp	r7, #111	; 0x6f
 800b9a2:	bf0c      	ite	eq
 800b9a4:	2308      	moveq	r3, #8
 800b9a6:	230a      	movne	r3, #10
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9ae:	6865      	ldr	r5, [r4, #4]
 800b9b0:	60a5      	str	r5, [r4, #8]
 800b9b2:	2d00      	cmp	r5, #0
 800b9b4:	bfa2      	ittt	ge
 800b9b6:	6821      	ldrge	r1, [r4, #0]
 800b9b8:	f021 0104 	bicge.w	r1, r1, #4
 800b9bc:	6021      	strge	r1, [r4, #0]
 800b9be:	b90e      	cbnz	r6, 800b9c4 <_printf_i+0x118>
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	d04d      	beq.n	800ba60 <_printf_i+0x1b4>
 800b9c4:	4615      	mov	r5, r2
 800b9c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9ca:	fb03 6711 	mls	r7, r3, r1, r6
 800b9ce:	5dc7      	ldrb	r7, [r0, r7]
 800b9d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9d4:	4637      	mov	r7, r6
 800b9d6:	42bb      	cmp	r3, r7
 800b9d8:	460e      	mov	r6, r1
 800b9da:	d9f4      	bls.n	800b9c6 <_printf_i+0x11a>
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d10b      	bne.n	800b9f8 <_printf_i+0x14c>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	07de      	lsls	r6, r3, #31
 800b9e4:	d508      	bpl.n	800b9f8 <_printf_i+0x14c>
 800b9e6:	6923      	ldr	r3, [r4, #16]
 800b9e8:	6861      	ldr	r1, [r4, #4]
 800b9ea:	4299      	cmp	r1, r3
 800b9ec:	bfde      	ittt	le
 800b9ee:	2330      	movle	r3, #48	; 0x30
 800b9f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9f8:	1b52      	subs	r2, r2, r5
 800b9fa:	6122      	str	r2, [r4, #16]
 800b9fc:	f8cd a000 	str.w	sl, [sp]
 800ba00:	464b      	mov	r3, r9
 800ba02:	aa03      	add	r2, sp, #12
 800ba04:	4621      	mov	r1, r4
 800ba06:	4640      	mov	r0, r8
 800ba08:	f7ff fee2 	bl	800b7d0 <_printf_common>
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d14c      	bne.n	800baaa <_printf_i+0x1fe>
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	b004      	add	sp, #16
 800ba16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1a:	4835      	ldr	r0, [pc, #212]	; (800baf0 <_printf_i+0x244>)
 800ba1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba20:	6829      	ldr	r1, [r5, #0]
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba28:	6029      	str	r1, [r5, #0]
 800ba2a:	061d      	lsls	r5, r3, #24
 800ba2c:	d514      	bpl.n	800ba58 <_printf_i+0x1ac>
 800ba2e:	07df      	lsls	r7, r3, #31
 800ba30:	bf44      	itt	mi
 800ba32:	f043 0320 	orrmi.w	r3, r3, #32
 800ba36:	6023      	strmi	r3, [r4, #0]
 800ba38:	b91e      	cbnz	r6, 800ba42 <_printf_i+0x196>
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	f023 0320 	bic.w	r3, r3, #32
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	2310      	movs	r3, #16
 800ba44:	e7b0      	b.n	800b9a8 <_printf_i+0xfc>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	f043 0320 	orr.w	r3, r3, #32
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	2378      	movs	r3, #120	; 0x78
 800ba50:	4828      	ldr	r0, [pc, #160]	; (800baf4 <_printf_i+0x248>)
 800ba52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba56:	e7e3      	b.n	800ba20 <_printf_i+0x174>
 800ba58:	0659      	lsls	r1, r3, #25
 800ba5a:	bf48      	it	mi
 800ba5c:	b2b6      	uxthmi	r6, r6
 800ba5e:	e7e6      	b.n	800ba2e <_printf_i+0x182>
 800ba60:	4615      	mov	r5, r2
 800ba62:	e7bb      	b.n	800b9dc <_printf_i+0x130>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	6826      	ldr	r6, [r4, #0]
 800ba68:	6961      	ldr	r1, [r4, #20]
 800ba6a:	1d18      	adds	r0, r3, #4
 800ba6c:	6028      	str	r0, [r5, #0]
 800ba6e:	0635      	lsls	r5, r6, #24
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	d501      	bpl.n	800ba78 <_printf_i+0x1cc>
 800ba74:	6019      	str	r1, [r3, #0]
 800ba76:	e002      	b.n	800ba7e <_printf_i+0x1d2>
 800ba78:	0670      	lsls	r0, r6, #25
 800ba7a:	d5fb      	bpl.n	800ba74 <_printf_i+0x1c8>
 800ba7c:	8019      	strh	r1, [r3, #0]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	4615      	mov	r5, r2
 800ba84:	e7ba      	b.n	800b9fc <_printf_i+0x150>
 800ba86:	682b      	ldr	r3, [r5, #0]
 800ba88:	1d1a      	adds	r2, r3, #4
 800ba8a:	602a      	str	r2, [r5, #0]
 800ba8c:	681d      	ldr	r5, [r3, #0]
 800ba8e:	6862      	ldr	r2, [r4, #4]
 800ba90:	2100      	movs	r1, #0
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7f4 fb8c 	bl	80001b0 <memchr>
 800ba98:	b108      	cbz	r0, 800ba9e <_printf_i+0x1f2>
 800ba9a:	1b40      	subs	r0, r0, r5
 800ba9c:	6060      	str	r0, [r4, #4]
 800ba9e:	6863      	ldr	r3, [r4, #4]
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	2300      	movs	r3, #0
 800baa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa8:	e7a8      	b.n	800b9fc <_printf_i+0x150>
 800baaa:	6923      	ldr	r3, [r4, #16]
 800baac:	462a      	mov	r2, r5
 800baae:	4649      	mov	r1, r9
 800bab0:	4640      	mov	r0, r8
 800bab2:	47d0      	blx	sl
 800bab4:	3001      	adds	r0, #1
 800bab6:	d0ab      	beq.n	800ba10 <_printf_i+0x164>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	079b      	lsls	r3, r3, #30
 800babc:	d413      	bmi.n	800bae6 <_printf_i+0x23a>
 800babe:	68e0      	ldr	r0, [r4, #12]
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	4298      	cmp	r0, r3
 800bac4:	bfb8      	it	lt
 800bac6:	4618      	movlt	r0, r3
 800bac8:	e7a4      	b.n	800ba14 <_printf_i+0x168>
 800baca:	2301      	movs	r3, #1
 800bacc:	4632      	mov	r2, r6
 800bace:	4649      	mov	r1, r9
 800bad0:	4640      	mov	r0, r8
 800bad2:	47d0      	blx	sl
 800bad4:	3001      	adds	r0, #1
 800bad6:	d09b      	beq.n	800ba10 <_printf_i+0x164>
 800bad8:	3501      	adds	r5, #1
 800bada:	68e3      	ldr	r3, [r4, #12]
 800badc:	9903      	ldr	r1, [sp, #12]
 800bade:	1a5b      	subs	r3, r3, r1
 800bae0:	42ab      	cmp	r3, r5
 800bae2:	dcf2      	bgt.n	800baca <_printf_i+0x21e>
 800bae4:	e7eb      	b.n	800babe <_printf_i+0x212>
 800bae6:	2500      	movs	r5, #0
 800bae8:	f104 0619 	add.w	r6, r4, #25
 800baec:	e7f5      	b.n	800bada <_printf_i+0x22e>
 800baee:	bf00      	nop
 800baf0:	0800cd89 	.word	0x0800cd89
 800baf4:	0800cd9a 	.word	0x0800cd9a

0800baf8 <_sbrk_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4d06      	ldr	r5, [pc, #24]	; (800bb14 <_sbrk_r+0x1c>)
 800bafc:	2300      	movs	r3, #0
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	602b      	str	r3, [r5, #0]
 800bb04:	f7f7 fecc 	bl	80038a0 <_sbrk>
 800bb08:	1c43      	adds	r3, r0, #1
 800bb0a:	d102      	bne.n	800bb12 <_sbrk_r+0x1a>
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	b103      	cbz	r3, 800bb12 <_sbrk_r+0x1a>
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	20005454 	.word	0x20005454

0800bb18 <__sread>:
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb20:	f000 fab8 	bl	800c094 <_read_r>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	bfab      	itete	ge
 800bb28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb2a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb2c:	181b      	addge	r3, r3, r0
 800bb2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb32:	bfac      	ite	ge
 800bb34:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb36:	81a3      	strhlt	r3, [r4, #12]
 800bb38:	bd10      	pop	{r4, pc}

0800bb3a <__swrite>:
 800bb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3e:	461f      	mov	r7, r3
 800bb40:	898b      	ldrh	r3, [r1, #12]
 800bb42:	05db      	lsls	r3, r3, #23
 800bb44:	4605      	mov	r5, r0
 800bb46:	460c      	mov	r4, r1
 800bb48:	4616      	mov	r6, r2
 800bb4a:	d505      	bpl.n	800bb58 <__swrite+0x1e>
 800bb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb50:	2302      	movs	r3, #2
 800bb52:	2200      	movs	r2, #0
 800bb54:	f000 f9d0 	bl	800bef8 <_lseek_r>
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb62:	81a3      	strh	r3, [r4, #12]
 800bb64:	4632      	mov	r2, r6
 800bb66:	463b      	mov	r3, r7
 800bb68:	4628      	mov	r0, r5
 800bb6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6e:	f000 b869 	b.w	800bc44 <_write_r>

0800bb72 <__sseek>:
 800bb72:	b510      	push	{r4, lr}
 800bb74:	460c      	mov	r4, r1
 800bb76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7a:	f000 f9bd 	bl	800bef8 <_lseek_r>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	bf15      	itete	ne
 800bb84:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb8e:	81a3      	strheq	r3, [r4, #12]
 800bb90:	bf18      	it	ne
 800bb92:	81a3      	strhne	r3, [r4, #12]
 800bb94:	bd10      	pop	{r4, pc}

0800bb96 <__sclose>:
 800bb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9a:	f000 b8db 	b.w	800bd54 <_close_r>
	...

0800bba0 <__swbuf_r>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	460e      	mov	r6, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	4605      	mov	r5, r0
 800bba8:	b118      	cbz	r0, 800bbb2 <__swbuf_r+0x12>
 800bbaa:	6983      	ldr	r3, [r0, #24]
 800bbac:	b90b      	cbnz	r3, 800bbb2 <__swbuf_r+0x12>
 800bbae:	f7ff f9bf 	bl	800af30 <__sinit>
 800bbb2:	4b21      	ldr	r3, [pc, #132]	; (800bc38 <__swbuf_r+0x98>)
 800bbb4:	429c      	cmp	r4, r3
 800bbb6:	d12b      	bne.n	800bc10 <__swbuf_r+0x70>
 800bbb8:	686c      	ldr	r4, [r5, #4]
 800bbba:	69a3      	ldr	r3, [r4, #24]
 800bbbc:	60a3      	str	r3, [r4, #8]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	071a      	lsls	r2, r3, #28
 800bbc2:	d52f      	bpl.n	800bc24 <__swbuf_r+0x84>
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	b36b      	cbz	r3, 800bc24 <__swbuf_r+0x84>
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	6820      	ldr	r0, [r4, #0]
 800bbcc:	1ac0      	subs	r0, r0, r3
 800bbce:	6963      	ldr	r3, [r4, #20]
 800bbd0:	b2f6      	uxtb	r6, r6
 800bbd2:	4283      	cmp	r3, r0
 800bbd4:	4637      	mov	r7, r6
 800bbd6:	dc04      	bgt.n	800bbe2 <__swbuf_r+0x42>
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 f950 	bl	800be80 <_fflush_r>
 800bbe0:	bb30      	cbnz	r0, 800bc30 <__swbuf_r+0x90>
 800bbe2:	68a3      	ldr	r3, [r4, #8]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	60a3      	str	r3, [r4, #8]
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	701e      	strb	r6, [r3, #0]
 800bbf0:	6963      	ldr	r3, [r4, #20]
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	4283      	cmp	r3, r0
 800bbf6:	d004      	beq.n	800bc02 <__swbuf_r+0x62>
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	07db      	lsls	r3, r3, #31
 800bbfc:	d506      	bpl.n	800bc0c <__swbuf_r+0x6c>
 800bbfe:	2e0a      	cmp	r6, #10
 800bc00:	d104      	bne.n	800bc0c <__swbuf_r+0x6c>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f000 f93b 	bl	800be80 <_fflush_r>
 800bc0a:	b988      	cbnz	r0, 800bc30 <__swbuf_r+0x90>
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc10:	4b0a      	ldr	r3, [pc, #40]	; (800bc3c <__swbuf_r+0x9c>)
 800bc12:	429c      	cmp	r4, r3
 800bc14:	d101      	bne.n	800bc1a <__swbuf_r+0x7a>
 800bc16:	68ac      	ldr	r4, [r5, #8]
 800bc18:	e7cf      	b.n	800bbba <__swbuf_r+0x1a>
 800bc1a:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <__swbuf_r+0xa0>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	bf08      	it	eq
 800bc20:	68ec      	ldreq	r4, [r5, #12]
 800bc22:	e7ca      	b.n	800bbba <__swbuf_r+0x1a>
 800bc24:	4621      	mov	r1, r4
 800bc26:	4628      	mov	r0, r5
 800bc28:	f000 f81e 	bl	800bc68 <__swsetup_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d0cb      	beq.n	800bbc8 <__swbuf_r+0x28>
 800bc30:	f04f 37ff 	mov.w	r7, #4294967295
 800bc34:	e7ea      	b.n	800bc0c <__swbuf_r+0x6c>
 800bc36:	bf00      	nop
 800bc38:	0800cd38 	.word	0x0800cd38
 800bc3c:	0800cd58 	.word	0x0800cd58
 800bc40:	0800cd18 	.word	0x0800cd18

0800bc44 <_write_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d07      	ldr	r5, [pc, #28]	; (800bc64 <_write_r+0x20>)
 800bc48:	4604      	mov	r4, r0
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	2200      	movs	r2, #0
 800bc50:	602a      	str	r2, [r5, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f7fd fac2 	bl	80091dc <_write>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_write_r+0x1e>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_write_r+0x1e>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	20005454 	.word	0x20005454

0800bc68 <__swsetup_r>:
 800bc68:	4b32      	ldr	r3, [pc, #200]	; (800bd34 <__swsetup_r+0xcc>)
 800bc6a:	b570      	push	{r4, r5, r6, lr}
 800bc6c:	681d      	ldr	r5, [r3, #0]
 800bc6e:	4606      	mov	r6, r0
 800bc70:	460c      	mov	r4, r1
 800bc72:	b125      	cbz	r5, 800bc7e <__swsetup_r+0x16>
 800bc74:	69ab      	ldr	r3, [r5, #24]
 800bc76:	b913      	cbnz	r3, 800bc7e <__swsetup_r+0x16>
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f7ff f959 	bl	800af30 <__sinit>
 800bc7e:	4b2e      	ldr	r3, [pc, #184]	; (800bd38 <__swsetup_r+0xd0>)
 800bc80:	429c      	cmp	r4, r3
 800bc82:	d10f      	bne.n	800bca4 <__swsetup_r+0x3c>
 800bc84:	686c      	ldr	r4, [r5, #4]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc8c:	0719      	lsls	r1, r3, #28
 800bc8e:	d42c      	bmi.n	800bcea <__swsetup_r+0x82>
 800bc90:	06dd      	lsls	r5, r3, #27
 800bc92:	d411      	bmi.n	800bcb8 <__swsetup_r+0x50>
 800bc94:	2309      	movs	r3, #9
 800bc96:	6033      	str	r3, [r6, #0]
 800bc98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc9c:	81a3      	strh	r3, [r4, #12]
 800bc9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bca2:	e03e      	b.n	800bd22 <__swsetup_r+0xba>
 800bca4:	4b25      	ldr	r3, [pc, #148]	; (800bd3c <__swsetup_r+0xd4>)
 800bca6:	429c      	cmp	r4, r3
 800bca8:	d101      	bne.n	800bcae <__swsetup_r+0x46>
 800bcaa:	68ac      	ldr	r4, [r5, #8]
 800bcac:	e7eb      	b.n	800bc86 <__swsetup_r+0x1e>
 800bcae:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <__swsetup_r+0xd8>)
 800bcb0:	429c      	cmp	r4, r3
 800bcb2:	bf08      	it	eq
 800bcb4:	68ec      	ldreq	r4, [r5, #12]
 800bcb6:	e7e6      	b.n	800bc86 <__swsetup_r+0x1e>
 800bcb8:	0758      	lsls	r0, r3, #29
 800bcba:	d512      	bpl.n	800bce2 <__swsetup_r+0x7a>
 800bcbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcbe:	b141      	cbz	r1, 800bcd2 <__swsetup_r+0x6a>
 800bcc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcc4:	4299      	cmp	r1, r3
 800bcc6:	d002      	beq.n	800bcce <__swsetup_r+0x66>
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7ff f9eb 	bl	800b0a4 <_free_r>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	6363      	str	r3, [r4, #52]	; 0x34
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	6063      	str	r3, [r4, #4]
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	f043 0308 	orr.w	r3, r3, #8
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	6923      	ldr	r3, [r4, #16]
 800bcec:	b94b      	cbnz	r3, 800bd02 <__swsetup_r+0x9a>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcf8:	d003      	beq.n	800bd02 <__swsetup_r+0x9a>
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	f000 f933 	bl	800bf68 <__smakebuf_r>
 800bd02:	89a0      	ldrh	r0, [r4, #12]
 800bd04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd08:	f010 0301 	ands.w	r3, r0, #1
 800bd0c:	d00a      	beq.n	800bd24 <__swsetup_r+0xbc>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60a3      	str	r3, [r4, #8]
 800bd12:	6963      	ldr	r3, [r4, #20]
 800bd14:	425b      	negs	r3, r3
 800bd16:	61a3      	str	r3, [r4, #24]
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	b943      	cbnz	r3, 800bd2e <__swsetup_r+0xc6>
 800bd1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd20:	d1ba      	bne.n	800bc98 <__swsetup_r+0x30>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	0781      	lsls	r1, r0, #30
 800bd26:	bf58      	it	pl
 800bd28:	6963      	ldrpl	r3, [r4, #20]
 800bd2a:	60a3      	str	r3, [r4, #8]
 800bd2c:	e7f4      	b.n	800bd18 <__swsetup_r+0xb0>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e7f7      	b.n	800bd22 <__swsetup_r+0xba>
 800bd32:	bf00      	nop
 800bd34:	20000058 	.word	0x20000058
 800bd38:	0800cd38 	.word	0x0800cd38
 800bd3c:	0800cd58 	.word	0x0800cd58
 800bd40:	0800cd18 	.word	0x0800cd18

0800bd44 <abort>:
 800bd44:	b508      	push	{r3, lr}
 800bd46:	2006      	movs	r0, #6
 800bd48:	f000 f9de 	bl	800c108 <raise>
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	f7f7 fd4b 	bl	80037e8 <_exit>
	...

0800bd54 <_close_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d06      	ldr	r5, [pc, #24]	; (800bd70 <_close_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	602b      	str	r3, [r5, #0]
 800bd60:	f7f7 fd69 	bl	8003836 <_close>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_close_r+0x1a>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_close_r+0x1a>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20005454 	.word	0x20005454

0800bd74 <__sflush_r>:
 800bd74:	898a      	ldrh	r2, [r1, #12]
 800bd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	0710      	lsls	r0, r2, #28
 800bd7e:	460c      	mov	r4, r1
 800bd80:	d458      	bmi.n	800be34 <__sflush_r+0xc0>
 800bd82:	684b      	ldr	r3, [r1, #4]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	dc05      	bgt.n	800bd94 <__sflush_r+0x20>
 800bd88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	dc02      	bgt.n	800bd94 <__sflush_r+0x20>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd96:	2e00      	cmp	r6, #0
 800bd98:	d0f9      	beq.n	800bd8e <__sflush_r+0x1a>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bda0:	682f      	ldr	r7, [r5, #0]
 800bda2:	602b      	str	r3, [r5, #0]
 800bda4:	d032      	beq.n	800be0c <__sflush_r+0x98>
 800bda6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	075a      	lsls	r2, r3, #29
 800bdac:	d505      	bpl.n	800bdba <__sflush_r+0x46>
 800bdae:	6863      	ldr	r3, [r4, #4]
 800bdb0:	1ac0      	subs	r0, r0, r3
 800bdb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdb4:	b10b      	cbz	r3, 800bdba <__sflush_r+0x46>
 800bdb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdb8:	1ac0      	subs	r0, r0, r3
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdc0:	6a21      	ldr	r1, [r4, #32]
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	47b0      	blx	r6
 800bdc6:	1c43      	adds	r3, r0, #1
 800bdc8:	89a3      	ldrh	r3, [r4, #12]
 800bdca:	d106      	bne.n	800bdda <__sflush_r+0x66>
 800bdcc:	6829      	ldr	r1, [r5, #0]
 800bdce:	291d      	cmp	r1, #29
 800bdd0:	d82c      	bhi.n	800be2c <__sflush_r+0xb8>
 800bdd2:	4a2a      	ldr	r2, [pc, #168]	; (800be7c <__sflush_r+0x108>)
 800bdd4:	40ca      	lsrs	r2, r1
 800bdd6:	07d6      	lsls	r6, r2, #31
 800bdd8:	d528      	bpl.n	800be2c <__sflush_r+0xb8>
 800bdda:	2200      	movs	r2, #0
 800bddc:	6062      	str	r2, [r4, #4]
 800bdde:	04d9      	lsls	r1, r3, #19
 800bde0:	6922      	ldr	r2, [r4, #16]
 800bde2:	6022      	str	r2, [r4, #0]
 800bde4:	d504      	bpl.n	800bdf0 <__sflush_r+0x7c>
 800bde6:	1c42      	adds	r2, r0, #1
 800bde8:	d101      	bne.n	800bdee <__sflush_r+0x7a>
 800bdea:	682b      	ldr	r3, [r5, #0]
 800bdec:	b903      	cbnz	r3, 800bdf0 <__sflush_r+0x7c>
 800bdee:	6560      	str	r0, [r4, #84]	; 0x54
 800bdf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdf2:	602f      	str	r7, [r5, #0]
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	d0ca      	beq.n	800bd8e <__sflush_r+0x1a>
 800bdf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdfc:	4299      	cmp	r1, r3
 800bdfe:	d002      	beq.n	800be06 <__sflush_r+0x92>
 800be00:	4628      	mov	r0, r5
 800be02:	f7ff f94f 	bl	800b0a4 <_free_r>
 800be06:	2000      	movs	r0, #0
 800be08:	6360      	str	r0, [r4, #52]	; 0x34
 800be0a:	e7c1      	b.n	800bd90 <__sflush_r+0x1c>
 800be0c:	6a21      	ldr	r1, [r4, #32]
 800be0e:	2301      	movs	r3, #1
 800be10:	4628      	mov	r0, r5
 800be12:	47b0      	blx	r6
 800be14:	1c41      	adds	r1, r0, #1
 800be16:	d1c7      	bne.n	800bda8 <__sflush_r+0x34>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0c4      	beq.n	800bda8 <__sflush_r+0x34>
 800be1e:	2b1d      	cmp	r3, #29
 800be20:	d001      	beq.n	800be26 <__sflush_r+0xb2>
 800be22:	2b16      	cmp	r3, #22
 800be24:	d101      	bne.n	800be2a <__sflush_r+0xb6>
 800be26:	602f      	str	r7, [r5, #0]
 800be28:	e7b1      	b.n	800bd8e <__sflush_r+0x1a>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be30:	81a3      	strh	r3, [r4, #12]
 800be32:	e7ad      	b.n	800bd90 <__sflush_r+0x1c>
 800be34:	690f      	ldr	r7, [r1, #16]
 800be36:	2f00      	cmp	r7, #0
 800be38:	d0a9      	beq.n	800bd8e <__sflush_r+0x1a>
 800be3a:	0793      	lsls	r3, r2, #30
 800be3c:	680e      	ldr	r6, [r1, #0]
 800be3e:	bf08      	it	eq
 800be40:	694b      	ldreq	r3, [r1, #20]
 800be42:	600f      	str	r7, [r1, #0]
 800be44:	bf18      	it	ne
 800be46:	2300      	movne	r3, #0
 800be48:	eba6 0807 	sub.w	r8, r6, r7
 800be4c:	608b      	str	r3, [r1, #8]
 800be4e:	f1b8 0f00 	cmp.w	r8, #0
 800be52:	dd9c      	ble.n	800bd8e <__sflush_r+0x1a>
 800be54:	6a21      	ldr	r1, [r4, #32]
 800be56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be58:	4643      	mov	r3, r8
 800be5a:	463a      	mov	r2, r7
 800be5c:	4628      	mov	r0, r5
 800be5e:	47b0      	blx	r6
 800be60:	2800      	cmp	r0, #0
 800be62:	dc06      	bgt.n	800be72 <__sflush_r+0xfe>
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295
 800be70:	e78e      	b.n	800bd90 <__sflush_r+0x1c>
 800be72:	4407      	add	r7, r0
 800be74:	eba8 0800 	sub.w	r8, r8, r0
 800be78:	e7e9      	b.n	800be4e <__sflush_r+0xda>
 800be7a:	bf00      	nop
 800be7c:	20400001 	.word	0x20400001

0800be80 <_fflush_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	690b      	ldr	r3, [r1, #16]
 800be84:	4605      	mov	r5, r0
 800be86:	460c      	mov	r4, r1
 800be88:	b913      	cbnz	r3, 800be90 <_fflush_r+0x10>
 800be8a:	2500      	movs	r5, #0
 800be8c:	4628      	mov	r0, r5
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	b118      	cbz	r0, 800be9a <_fflush_r+0x1a>
 800be92:	6983      	ldr	r3, [r0, #24]
 800be94:	b90b      	cbnz	r3, 800be9a <_fflush_r+0x1a>
 800be96:	f7ff f84b 	bl	800af30 <__sinit>
 800be9a:	4b14      	ldr	r3, [pc, #80]	; (800beec <_fflush_r+0x6c>)
 800be9c:	429c      	cmp	r4, r3
 800be9e:	d11b      	bne.n	800bed8 <_fflush_r+0x58>
 800bea0:	686c      	ldr	r4, [r5, #4]
 800bea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d0ef      	beq.n	800be8a <_fflush_r+0xa>
 800beaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800beac:	07d0      	lsls	r0, r2, #31
 800beae:	d404      	bmi.n	800beba <_fflush_r+0x3a>
 800beb0:	0599      	lsls	r1, r3, #22
 800beb2:	d402      	bmi.n	800beba <_fflush_r+0x3a>
 800beb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beb6:	f7ff f8eb 	bl	800b090 <__retarget_lock_acquire_recursive>
 800beba:	4628      	mov	r0, r5
 800bebc:	4621      	mov	r1, r4
 800bebe:	f7ff ff59 	bl	800bd74 <__sflush_r>
 800bec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bec4:	07da      	lsls	r2, r3, #31
 800bec6:	4605      	mov	r5, r0
 800bec8:	d4e0      	bmi.n	800be8c <_fflush_r+0xc>
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	059b      	lsls	r3, r3, #22
 800bece:	d4dd      	bmi.n	800be8c <_fflush_r+0xc>
 800bed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed2:	f7ff f8de 	bl	800b092 <__retarget_lock_release_recursive>
 800bed6:	e7d9      	b.n	800be8c <_fflush_r+0xc>
 800bed8:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <_fflush_r+0x70>)
 800beda:	429c      	cmp	r4, r3
 800bedc:	d101      	bne.n	800bee2 <_fflush_r+0x62>
 800bede:	68ac      	ldr	r4, [r5, #8]
 800bee0:	e7df      	b.n	800bea2 <_fflush_r+0x22>
 800bee2:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <_fflush_r+0x74>)
 800bee4:	429c      	cmp	r4, r3
 800bee6:	bf08      	it	eq
 800bee8:	68ec      	ldreq	r4, [r5, #12]
 800beea:	e7da      	b.n	800bea2 <_fflush_r+0x22>
 800beec:	0800cd38 	.word	0x0800cd38
 800bef0:	0800cd58 	.word	0x0800cd58
 800bef4:	0800cd18 	.word	0x0800cd18

0800bef8 <_lseek_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d07      	ldr	r5, [pc, #28]	; (800bf18 <_lseek_r+0x20>)
 800befc:	4604      	mov	r4, r0
 800befe:	4608      	mov	r0, r1
 800bf00:	4611      	mov	r1, r2
 800bf02:	2200      	movs	r2, #0
 800bf04:	602a      	str	r2, [r5, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	f7f7 fcbc 	bl	8003884 <_lseek>
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d102      	bne.n	800bf16 <_lseek_r+0x1e>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	b103      	cbz	r3, 800bf16 <_lseek_r+0x1e>
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	20005454 	.word	0x20005454

0800bf1c <__swhatbuf_r>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	460e      	mov	r6, r1
 800bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf24:	2900      	cmp	r1, #0
 800bf26:	b096      	sub	sp, #88	; 0x58
 800bf28:	4614      	mov	r4, r2
 800bf2a:	461d      	mov	r5, r3
 800bf2c:	da08      	bge.n	800bf40 <__swhatbuf_r+0x24>
 800bf2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	061a      	lsls	r2, r3, #24
 800bf38:	d410      	bmi.n	800bf5c <__swhatbuf_r+0x40>
 800bf3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3e:	e00e      	b.n	800bf5e <__swhatbuf_r+0x42>
 800bf40:	466a      	mov	r2, sp
 800bf42:	f000 f8fd 	bl	800c140 <_fstat_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	dbf1      	blt.n	800bf2e <__swhatbuf_r+0x12>
 800bf4a:	9a01      	ldr	r2, [sp, #4]
 800bf4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf54:	425a      	negs	r2, r3
 800bf56:	415a      	adcs	r2, r3
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	e7ee      	b.n	800bf3a <__swhatbuf_r+0x1e>
 800bf5c:	2340      	movs	r3, #64	; 0x40
 800bf5e:	2000      	movs	r0, #0
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	b016      	add	sp, #88	; 0x58
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf68 <__smakebuf_r>:
 800bf68:	898b      	ldrh	r3, [r1, #12]
 800bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf6c:	079d      	lsls	r5, r3, #30
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460c      	mov	r4, r1
 800bf72:	d507      	bpl.n	800bf84 <__smakebuf_r+0x1c>
 800bf74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	6163      	str	r3, [r4, #20]
 800bf80:	b002      	add	sp, #8
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	ab01      	add	r3, sp, #4
 800bf86:	466a      	mov	r2, sp
 800bf88:	f7ff ffc8 	bl	800bf1c <__swhatbuf_r>
 800bf8c:	9900      	ldr	r1, [sp, #0]
 800bf8e:	4605      	mov	r5, r0
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7ff f8f3 	bl	800b17c <_malloc_r>
 800bf96:	b948      	cbnz	r0, 800bfac <__smakebuf_r+0x44>
 800bf98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf9c:	059a      	lsls	r2, r3, #22
 800bf9e:	d4ef      	bmi.n	800bf80 <__smakebuf_r+0x18>
 800bfa0:	f023 0303 	bic.w	r3, r3, #3
 800bfa4:	f043 0302 	orr.w	r3, r3, #2
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	e7e3      	b.n	800bf74 <__smakebuf_r+0xc>
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <__smakebuf_r+0x7c>)
 800bfae:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	6020      	str	r0, [r4, #0]
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	9b00      	ldr	r3, [sp, #0]
 800bfbc:	6163      	str	r3, [r4, #20]
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	6120      	str	r0, [r4, #16]
 800bfc2:	b15b      	cbz	r3, 800bfdc <__smakebuf_r+0x74>
 800bfc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 f8cb 	bl	800c164 <_isatty_r>
 800bfce:	b128      	cbz	r0, 800bfdc <__smakebuf_r+0x74>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	f043 0301 	orr.w	r3, r3, #1
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	89a0      	ldrh	r0, [r4, #12]
 800bfde:	4305      	orrs	r5, r0
 800bfe0:	81a5      	strh	r5, [r4, #12]
 800bfe2:	e7cd      	b.n	800bf80 <__smakebuf_r+0x18>
 800bfe4:	0800aec9 	.word	0x0800aec9

0800bfe8 <memmove>:
 800bfe8:	4288      	cmp	r0, r1
 800bfea:	b510      	push	{r4, lr}
 800bfec:	eb01 0402 	add.w	r4, r1, r2
 800bff0:	d902      	bls.n	800bff8 <memmove+0x10>
 800bff2:	4284      	cmp	r4, r0
 800bff4:	4623      	mov	r3, r4
 800bff6:	d807      	bhi.n	800c008 <memmove+0x20>
 800bff8:	1e43      	subs	r3, r0, #1
 800bffa:	42a1      	cmp	r1, r4
 800bffc:	d008      	beq.n	800c010 <memmove+0x28>
 800bffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c002:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c006:	e7f8      	b.n	800bffa <memmove+0x12>
 800c008:	4402      	add	r2, r0
 800c00a:	4601      	mov	r1, r0
 800c00c:	428a      	cmp	r2, r1
 800c00e:	d100      	bne.n	800c012 <memmove+0x2a>
 800c010:	bd10      	pop	{r4, pc}
 800c012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c01a:	e7f7      	b.n	800c00c <memmove+0x24>

0800c01c <__malloc_lock>:
 800c01c:	4801      	ldr	r0, [pc, #4]	; (800c024 <__malloc_lock+0x8>)
 800c01e:	f7ff b837 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800c022:	bf00      	nop
 800c024:	20005448 	.word	0x20005448

0800c028 <__malloc_unlock>:
 800c028:	4801      	ldr	r0, [pc, #4]	; (800c030 <__malloc_unlock+0x8>)
 800c02a:	f7ff b832 	b.w	800b092 <__retarget_lock_release_recursive>
 800c02e:	bf00      	nop
 800c030:	20005448 	.word	0x20005448

0800c034 <_realloc_r>:
 800c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c038:	4680      	mov	r8, r0
 800c03a:	4614      	mov	r4, r2
 800c03c:	460e      	mov	r6, r1
 800c03e:	b921      	cbnz	r1, 800c04a <_realloc_r+0x16>
 800c040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c044:	4611      	mov	r1, r2
 800c046:	f7ff b899 	b.w	800b17c <_malloc_r>
 800c04a:	b92a      	cbnz	r2, 800c058 <_realloc_r+0x24>
 800c04c:	f7ff f82a 	bl	800b0a4 <_free_r>
 800c050:	4625      	mov	r5, r4
 800c052:	4628      	mov	r0, r5
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	f000 f894 	bl	800c184 <_malloc_usable_size_r>
 800c05c:	4284      	cmp	r4, r0
 800c05e:	4607      	mov	r7, r0
 800c060:	d802      	bhi.n	800c068 <_realloc_r+0x34>
 800c062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c066:	d812      	bhi.n	800c08e <_realloc_r+0x5a>
 800c068:	4621      	mov	r1, r4
 800c06a:	4640      	mov	r0, r8
 800c06c:	f7ff f886 	bl	800b17c <_malloc_r>
 800c070:	4605      	mov	r5, r0
 800c072:	2800      	cmp	r0, #0
 800c074:	d0ed      	beq.n	800c052 <_realloc_r+0x1e>
 800c076:	42bc      	cmp	r4, r7
 800c078:	4622      	mov	r2, r4
 800c07a:	4631      	mov	r1, r6
 800c07c:	bf28      	it	cs
 800c07e:	463a      	movcs	r2, r7
 800c080:	f7fe fd20 	bl	800aac4 <memcpy>
 800c084:	4631      	mov	r1, r6
 800c086:	4640      	mov	r0, r8
 800c088:	f7ff f80c 	bl	800b0a4 <_free_r>
 800c08c:	e7e1      	b.n	800c052 <_realloc_r+0x1e>
 800c08e:	4635      	mov	r5, r6
 800c090:	e7df      	b.n	800c052 <_realloc_r+0x1e>
	...

0800c094 <_read_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d07      	ldr	r5, [pc, #28]	; (800c0b4 <_read_r+0x20>)
 800c098:	4604      	mov	r4, r0
 800c09a:	4608      	mov	r0, r1
 800c09c:	4611      	mov	r1, r2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	602a      	str	r2, [r5, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	f7f7 fbaa 	bl	80037fc <_read>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_read_r+0x1e>
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	b103      	cbz	r3, 800c0b2 <_read_r+0x1e>
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	20005454 	.word	0x20005454

0800c0b8 <_raise_r>:
 800c0b8:	291f      	cmp	r1, #31
 800c0ba:	b538      	push	{r3, r4, r5, lr}
 800c0bc:	4604      	mov	r4, r0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	d904      	bls.n	800c0cc <_raise_r+0x14>
 800c0c2:	2316      	movs	r3, #22
 800c0c4:	6003      	str	r3, [r0, #0]
 800c0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0ce:	b112      	cbz	r2, 800c0d6 <_raise_r+0x1e>
 800c0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0d4:	b94b      	cbnz	r3, 800c0ea <_raise_r+0x32>
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 f830 	bl	800c13c <_getpid_r>
 800c0dc:	462a      	mov	r2, r5
 800c0de:	4601      	mov	r1, r0
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0e6:	f000 b817 	b.w	800c118 <_kill_r>
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d00a      	beq.n	800c104 <_raise_r+0x4c>
 800c0ee:	1c59      	adds	r1, r3, #1
 800c0f0:	d103      	bne.n	800c0fa <_raise_r+0x42>
 800c0f2:	2316      	movs	r3, #22
 800c0f4:	6003      	str	r3, [r0, #0]
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	e7e7      	b.n	800c0ca <_raise_r+0x12>
 800c0fa:	2400      	movs	r4, #0
 800c0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c100:	4628      	mov	r0, r5
 800c102:	4798      	blx	r3
 800c104:	2000      	movs	r0, #0
 800c106:	e7e0      	b.n	800c0ca <_raise_r+0x12>

0800c108 <raise>:
 800c108:	4b02      	ldr	r3, [pc, #8]	; (800c114 <raise+0xc>)
 800c10a:	4601      	mov	r1, r0
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f7ff bfd3 	b.w	800c0b8 <_raise_r>
 800c112:	bf00      	nop
 800c114:	20000058 	.word	0x20000058

0800c118 <_kill_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d07      	ldr	r5, [pc, #28]	; (800c138 <_kill_r+0x20>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	4611      	mov	r1, r2
 800c124:	602b      	str	r3, [r5, #0]
 800c126:	f7f7 fb4f 	bl	80037c8 <_kill>
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	d102      	bne.n	800c134 <_kill_r+0x1c>
 800c12e:	682b      	ldr	r3, [r5, #0]
 800c130:	b103      	cbz	r3, 800c134 <_kill_r+0x1c>
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	bd38      	pop	{r3, r4, r5, pc}
 800c136:	bf00      	nop
 800c138:	20005454 	.word	0x20005454

0800c13c <_getpid_r>:
 800c13c:	f7f7 bb3c 	b.w	80037b8 <_getpid>

0800c140 <_fstat_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d07      	ldr	r5, [pc, #28]	; (800c160 <_fstat_r+0x20>)
 800c144:	2300      	movs	r3, #0
 800c146:	4604      	mov	r4, r0
 800c148:	4608      	mov	r0, r1
 800c14a:	4611      	mov	r1, r2
 800c14c:	602b      	str	r3, [r5, #0]
 800c14e:	f7f7 fb7e 	bl	800384e <_fstat>
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	d102      	bne.n	800c15c <_fstat_r+0x1c>
 800c156:	682b      	ldr	r3, [r5, #0]
 800c158:	b103      	cbz	r3, 800c15c <_fstat_r+0x1c>
 800c15a:	6023      	str	r3, [r4, #0]
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	bf00      	nop
 800c160:	20005454 	.word	0x20005454

0800c164 <_isatty_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d06      	ldr	r5, [pc, #24]	; (800c180 <_isatty_r+0x1c>)
 800c168:	2300      	movs	r3, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	602b      	str	r3, [r5, #0]
 800c170:	f7f7 fb7d 	bl	800386e <_isatty>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_isatty_r+0x1a>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_isatty_r+0x1a>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	20005454 	.word	0x20005454

0800c184 <_malloc_usable_size_r>:
 800c184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c188:	1f18      	subs	r0, r3, #4
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfbc      	itt	lt
 800c18e:	580b      	ldrlt	r3, [r1, r0]
 800c190:	18c0      	addlt	r0, r0, r3
 800c192:	4770      	bx	lr

0800c194 <_init>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	bf00      	nop
 800c198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19a:	bc08      	pop	{r3}
 800c19c:	469e      	mov	lr, r3
 800c19e:	4770      	bx	lr

0800c1a0 <_fini>:
 800c1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a2:	bf00      	nop
 800c1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a6:	bc08      	pop	{r3}
 800c1a8:	469e      	mov	lr, r3
 800c1aa:	4770      	bx	lr

Disassembly of section .RamFunc:

0800c1ac <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b089      	sub	sp, #36	; 0x24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c1b6:	2380      	movs	r3, #128	; 0x80
 800c1b8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c1c2:	4b18      	ldr	r3, [pc, #96]	; (800c224 <FLASH_Program_Fast+0x78>)
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	4a17      	ldr	r2, [pc, #92]	; (800c224 <FLASH_Program_Fast+0x78>)
 800c1c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800c1d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1d4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800c1d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1d8:	b672      	cpsid	i
}
 800c1da:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	617b      	str	r3, [r7, #20]
    row_index--;
 800c1f0:	7ffb      	ldrb	r3, [r7, #31]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800c1f6:	7ffb      	ldrb	r3, [r7, #31]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d1ef      	bne.n	800c1dc <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800c1fc:	bf00      	nop
 800c1fe:	4b09      	ldr	r3, [pc, #36]	; (800c224 <FLASH_Program_Fast+0x78>)
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20a:	d0f8      	beq.n	800c1fe <FLASH_Program_Fast+0x52>
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f383 8810 	msr	PRIMASK, r3
}
 800c216:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800c218:	bf00      	nop
 800c21a:	3724      	adds	r7, #36	; 0x24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr
 800c224:	58004000 	.word	0x58004000
